
MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005698  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800591c  0800591c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005924  08005924  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800592c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000e4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d9ad  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000227e  00000000  00000000  0002d9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002fc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a70  00000000  00000000  000307c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025166  00000000  00000000  00031238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109b4  00000000  00000000  0005639e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5bf3  00000000  00000000  00066d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c945  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f0c  00000000  00000000  0013c998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005830 	.word	0x08005830

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	08005830 	.word	0x08005830

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_uldivmod>:
 8000a3c:	b953      	cbnz	r3, 8000a54 <__aeabi_uldivmod+0x18>
 8000a3e:	b94a      	cbnz	r2, 8000a54 <__aeabi_uldivmod+0x18>
 8000a40:	2900      	cmp	r1, #0
 8000a42:	bf08      	it	eq
 8000a44:	2800      	cmpeq	r0, #0
 8000a46:	bf1c      	itt	ne
 8000a48:	f04f 31ff 	movne.w	r1, #4294967295
 8000a4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a50:	f000 b974 	b.w	8000d3c <__aeabi_idiv0>
 8000a54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a5c:	f000 f806 	bl	8000a6c <__udivmoddi4>
 8000a60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <__udivmoddi4>:
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	9d08      	ldr	r5, [sp, #32]
 8000a72:	4604      	mov	r4, r0
 8000a74:	468e      	mov	lr, r1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d14d      	bne.n	8000b16 <__udivmoddi4+0xaa>
 8000a7a:	428a      	cmp	r2, r1
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	d969      	bls.n	8000b54 <__udivmoddi4+0xe8>
 8000a80:	fab2 f282 	clz	r2, r2
 8000a84:	b152      	cbz	r2, 8000a9c <__udivmoddi4+0x30>
 8000a86:	fa01 f302 	lsl.w	r3, r1, r2
 8000a8a:	f1c2 0120 	rsb	r1, r2, #32
 8000a8e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a92:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a96:	ea41 0e03 	orr.w	lr, r1, r3
 8000a9a:	4094      	lsls	r4, r2
 8000a9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa0:	0c21      	lsrs	r1, r4, #16
 8000aa2:	fbbe f6f8 	udiv	r6, lr, r8
 8000aa6:	fa1f f78c 	uxth.w	r7, ip
 8000aaa:	fb08 e316 	mls	r3, r8, r6, lr
 8000aae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ab2:	fb06 f107 	mul.w	r1, r6, r7
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	d90a      	bls.n	8000ad0 <__udivmoddi4+0x64>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ac2:	f080 811f 	bcs.w	8000d04 <__udivmoddi4+0x298>
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	f240 811c 	bls.w	8000d04 <__udivmoddi4+0x298>
 8000acc:	3e02      	subs	r6, #2
 8000ace:	4463      	add	r3, ip
 8000ad0:	1a5b      	subs	r3, r3, r1
 8000ad2:	b2a4      	uxth	r4, r4
 8000ad4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad8:	fb08 3310 	mls	r3, r8, r0, r3
 8000adc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae0:	fb00 f707 	mul.w	r7, r0, r7
 8000ae4:	42a7      	cmp	r7, r4
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x92>
 8000ae8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af0:	f080 810a 	bcs.w	8000d08 <__udivmoddi4+0x29c>
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	f240 8107 	bls.w	8000d08 <__udivmoddi4+0x29c>
 8000afa:	4464      	add	r4, ip
 8000afc:	3802      	subs	r0, #2
 8000afe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b02:	1be4      	subs	r4, r4, r7
 8000b04:	2600      	movs	r6, #0
 8000b06:	b11d      	cbz	r5, 8000b10 <__udivmoddi4+0xa4>
 8000b08:	40d4      	lsrs	r4, r2
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d909      	bls.n	8000b2e <__udivmoddi4+0xc2>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	f000 80ef 	beq.w	8000cfe <__udivmoddi4+0x292>
 8000b20:	2600      	movs	r6, #0
 8000b22:	e9c5 0100 	strd	r0, r1, [r5]
 8000b26:	4630      	mov	r0, r6
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	fab3 f683 	clz	r6, r3
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d14a      	bne.n	8000bcc <__udivmoddi4+0x160>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xd4>
 8000b3a:	4282      	cmp	r2, r0
 8000b3c:	f200 80f9 	bhi.w	8000d32 <__udivmoddi4+0x2c6>
 8000b40:	1a84      	subs	r4, r0, r2
 8000b42:	eb61 0303 	sbc.w	r3, r1, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	469e      	mov	lr, r3
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d0e0      	beq.n	8000b10 <__udivmoddi4+0xa4>
 8000b4e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b52:	e7dd      	b.n	8000b10 <__udivmoddi4+0xa4>
 8000b54:	b902      	cbnz	r2, 8000b58 <__udivmoddi4+0xec>
 8000b56:	deff      	udf	#255	; 0xff
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	f040 8092 	bne.w	8000c86 <__udivmoddi4+0x21a>
 8000b62:	eba1 010c 	sub.w	r1, r1, ip
 8000b66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6a:	fa1f fe8c 	uxth.w	lr, ip
 8000b6e:	2601      	movs	r6, #1
 8000b70:	0c20      	lsrs	r0, r4, #16
 8000b72:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b76:	fb07 1113 	mls	r1, r7, r3, r1
 8000b7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b7e:	fb0e f003 	mul.w	r0, lr, r3
 8000b82:	4288      	cmp	r0, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x12c>
 8000b86:	eb1c 0101 	adds.w	r1, ip, r1
 8000b8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x12a>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f200 80cb 	bhi.w	8000d2c <__udivmoddi4+0x2c0>
 8000b96:	4643      	mov	r3, r8
 8000b98:	1a09      	subs	r1, r1, r0
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ba8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x156>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb8:	d202      	bcs.n	8000bc0 <__udivmoddi4+0x154>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f200 80bb 	bhi.w	8000d36 <__udivmoddi4+0x2ca>
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	eba4 040e 	sub.w	r4, r4, lr
 8000bc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bca:	e79c      	b.n	8000b06 <__udivmoddi4+0x9a>
 8000bcc:	f1c6 0720 	rsb	r7, r6, #32
 8000bd0:	40b3      	lsls	r3, r6
 8000bd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bda:	fa20 f407 	lsr.w	r4, r0, r7
 8000bde:	fa01 f306 	lsl.w	r3, r1, r6
 8000be2:	431c      	orrs	r4, r3
 8000be4:	40f9      	lsrs	r1, r7
 8000be6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bea:	fa00 f306 	lsl.w	r3, r0, r6
 8000bee:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bf2:	0c20      	lsrs	r0, r4, #16
 8000bf4:	fa1f fe8c 	uxth.w	lr, ip
 8000bf8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c00:	fb08 f00e 	mul.w	r0, r8, lr
 8000c04:	4288      	cmp	r0, r1
 8000c06:	fa02 f206 	lsl.w	r2, r2, r6
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b8>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c14:	f080 8088 	bcs.w	8000d28 <__udivmoddi4+0x2bc>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f240 8085 	bls.w	8000d28 <__udivmoddi4+0x2bc>
 8000c1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c22:	4461      	add	r1, ip
 8000c24:	1a09      	subs	r1, r1, r0
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c2c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c30:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c38:	458e      	cmp	lr, r1
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1e2>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c44:	d26c      	bcs.n	8000d20 <__udivmoddi4+0x2b4>
 8000c46:	458e      	cmp	lr, r1
 8000c48:	d96a      	bls.n	8000d20 <__udivmoddi4+0x2b4>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4461      	add	r1, ip
 8000c4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c52:	fba0 9402 	umull	r9, r4, r0, r2
 8000c56:	eba1 010e 	sub.w	r1, r1, lr
 8000c5a:	42a1      	cmp	r1, r4
 8000c5c:	46c8      	mov	r8, r9
 8000c5e:	46a6      	mov	lr, r4
 8000c60:	d356      	bcc.n	8000d10 <__udivmoddi4+0x2a4>
 8000c62:	d053      	beq.n	8000d0c <__udivmoddi4+0x2a0>
 8000c64:	b15d      	cbz	r5, 8000c7e <__udivmoddi4+0x212>
 8000c66:	ebb3 0208 	subs.w	r2, r3, r8
 8000c6a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c6e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c72:	fa22 f306 	lsr.w	r3, r2, r6
 8000c76:	40f1      	lsrs	r1, r6
 8000c78:	431f      	orrs	r7, r3
 8000c7a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c7e:	2600      	movs	r6, #0
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	f1c2 0320 	rsb	r3, r2, #32
 8000c8a:	40d8      	lsrs	r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	fa21 f303 	lsr.w	r3, r1, r3
 8000c94:	4091      	lsls	r1, r2
 8000c96:	4301      	orrs	r1, r0
 8000c98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ca0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ca4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ca8:	0c0b      	lsrs	r3, r1, #16
 8000caa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cae:	fb00 f60e 	mul.w	r6, r0, lr
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x260>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc2:	d22f      	bcs.n	8000d24 <__udivmoddi4+0x2b8>
 8000cc4:	429e      	cmp	r6, r3
 8000cc6:	d92d      	bls.n	8000d24 <__udivmoddi4+0x2b8>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	b289      	uxth	r1, r1
 8000cd0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cd4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cdc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x28a>
 8000ce4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cec:	d216      	bcs.n	8000d1c <__udivmoddi4+0x2b0>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d914      	bls.n	8000d1c <__udivmoddi4+0x2b0>
 8000cf2:	3e02      	subs	r6, #2
 8000cf4:	4461      	add	r1, ip
 8000cf6:	1ac9      	subs	r1, r1, r3
 8000cf8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cfc:	e738      	b.n	8000b70 <__udivmoddi4+0x104>
 8000cfe:	462e      	mov	r6, r5
 8000d00:	4628      	mov	r0, r5
 8000d02:	e705      	b.n	8000b10 <__udivmoddi4+0xa4>
 8000d04:	4606      	mov	r6, r0
 8000d06:	e6e3      	b.n	8000ad0 <__udivmoddi4+0x64>
 8000d08:	4618      	mov	r0, r3
 8000d0a:	e6f8      	b.n	8000afe <__udivmoddi4+0x92>
 8000d0c:	454b      	cmp	r3, r9
 8000d0e:	d2a9      	bcs.n	8000c64 <__udivmoddi4+0x1f8>
 8000d10:	ebb9 0802 	subs.w	r8, r9, r2
 8000d14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d18:	3801      	subs	r0, #1
 8000d1a:	e7a3      	b.n	8000c64 <__udivmoddi4+0x1f8>
 8000d1c:	4646      	mov	r6, r8
 8000d1e:	e7ea      	b.n	8000cf6 <__udivmoddi4+0x28a>
 8000d20:	4620      	mov	r0, r4
 8000d22:	e794      	b.n	8000c4e <__udivmoddi4+0x1e2>
 8000d24:	4640      	mov	r0, r8
 8000d26:	e7d1      	b.n	8000ccc <__udivmoddi4+0x260>
 8000d28:	46d0      	mov	r8, sl
 8000d2a:	e77b      	b.n	8000c24 <__udivmoddi4+0x1b8>
 8000d2c:	3b02      	subs	r3, #2
 8000d2e:	4461      	add	r1, ip
 8000d30:	e732      	b.n	8000b98 <__udivmoddi4+0x12c>
 8000d32:	4630      	mov	r0, r6
 8000d34:	e709      	b.n	8000b4a <__udivmoddi4+0xde>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	e742      	b.n	8000bc2 <__udivmoddi4+0x156>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <APP_SMInit>:
 * @brief  SM Initialization
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType APP_SMInit(void){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	71fb      	strb	r3, [r7, #7]

	//Initialize State Machine
	states = SM_INIT;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <APP_SMInit+0x30>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	//Set a timer to allow read values from device
	ret |= DEV_TimerInit(&idle, READ_TIME);
 8000d50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <APP_SMInit+0x34>)
 8000d56:	f004 f911 	bl	8004f7c <DEV_TimerInit>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	71fb      	strb	r3, [r7, #7]
	return ret;
 8000d64:	79fb      	ldrb	r3, [r7, #7]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000034 	.word	0x20000034
 8000d74:	20000054 	.word	0x20000054

08000d78 <APP_SMProccess>:
 * @brief  SM Set and work according current state
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType APP_SMProccess(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]
	bool_t done = false;
 8000d82:	2300      	movs	r3, #0
 8000d84:	71bb      	strb	r3, [r7, #6]

	switch(states){
 8000d86:	4b5b      	ldr	r3, [pc, #364]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	f200 80a7 	bhi.w	8000ede <APP_SMProccess+0x166>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <APP_SMProccess+0x20>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000db1 	.word	0x08000db1
 8000d9c:	08000e13 	.word	0x08000e13
 8000da0:	08000e3f 	.word	0x08000e3f
 8000da4:	08000e6b 	.word	0x08000e6b
 8000da8:	08000e97 	.word	0x08000e97
 8000dac:	08000ebb 	.word	0x08000ebb
		//Initialization state: initialize UART and I2C communication and MPU9250
		case SM_INIT:
			ret |= DEV_UARTInit();
 8000db0:	f004 f978 	bl	80050a4 <DEV_UARTInit>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <APP_SMProccess+0x54>
				states = SM_ERROR;
 8000dc4:	4b4b      	ldr	r3, [pc, #300]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	701a      	strb	r2, [r3, #0]
				break;
 8000dca:	e08e      	b.n	8000eea <APP_SMProccess+0x172>
			}
			ret |= DEV_I2CInit();
 8000dcc:	f004 fbea 	bl	80055a4 <DEV_I2CInit>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <APP_SMProccess+0x70>
				states = SM_ERROR;
 8000de0:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000de2:	2206      	movs	r2, #6
 8000de4:	701a      	strb	r2, [r3, #0]
				break;
 8000de6:	e080      	b.n	8000eea <APP_SMProccess+0x172>
			}
			ret |= APP_MPU9250Init();
 8000de8:	f004 fa02 	bl	80051f0 <APP_MPU9250Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	71fb      	strb	r3, [r7, #7]
			if(ret == API_OK){
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d106      	bne.n	8000e0a <APP_SMProccess+0x92>
				new_state = SM_READGYRO;
 8000dfc:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <APP_SMProccess+0x180>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
				states = SM_IDLE;
 8000e02:	4b3c      	ldr	r3, [pc, #240]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000e04:	2205      	movs	r2, #5
 8000e06:	701a      	strb	r2, [r3, #0]
			}
			else{
				states = SM_ERROR;
				break;
			}
			break;
 8000e08:	e06f      	b.n	8000eea <APP_SMProccess+0x172>
				states = SM_ERROR;
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000e0c:	2206      	movs	r2, #6
 8000e0e:	701a      	strb	r2, [r3, #0]
				break;
 8000e10:	e06b      	b.n	8000eea <APP_SMProccess+0x172>
		//Gyroscope State: Read Gyroscope values
		case SM_READGYRO:
			ret |= APP_MPU9250ReadGyro(&read_buff.gyro);
 8000e12:	483a      	ldr	r0, [pc, #232]	; (8000efc <APP_SMProccess+0x184>)
 8000e14:	f004 fa4e 	bl	80052b4 <APP_MPU9250ReadGyro>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <APP_SMProccess+0xb8>
				states = SM_ERROR;
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000e2a:	2206      	movs	r2, #6
 8000e2c:	701a      	strb	r2, [r3, #0]
				break;
 8000e2e:	e05c      	b.n	8000eea <APP_SMProccess+0x172>
			}
			new_state = SM_READACCL;
 8000e30:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <APP_SMProccess+0x180>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	701a      	strb	r2, [r3, #0]
			states = SM_IDLE;
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000e38:	2205      	movs	r2, #5
 8000e3a:	701a      	strb	r2, [r3, #0]
			break;
 8000e3c:	e055      	b.n	8000eea <APP_SMProccess+0x172>
		//Accelerometer State: Read Accelerometer values
		case SM_READACCL:
			ret |= APP_MPU9250ReadAccl(&read_buff.accl);
 8000e3e:	4830      	ldr	r0, [pc, #192]	; (8000f00 <APP_SMProccess+0x188>)
 8000e40:	f004 fa90 	bl	8005364 <APP_MPU9250ReadAccl>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <APP_SMProccess+0xe4>
				states = SM_ERROR;
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000e56:	2206      	movs	r2, #6
 8000e58:	701a      	strb	r2, [r3, #0]
				break;
 8000e5a:	e046      	b.n	8000eea <APP_SMProccess+0x172>
			}
			new_state = SM_READTEMP;
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <APP_SMProccess+0x180>)
 8000e5e:	2203      	movs	r2, #3
 8000e60:	701a      	strb	r2, [r3, #0]
			states = SM_IDLE;
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000e64:	2205      	movs	r2, #5
 8000e66:	701a      	strb	r2, [r3, #0]
			break;
 8000e68:	e03f      	b.n	8000eea <APP_SMProccess+0x172>
		//Temperature State: Read Temperature value
		case SM_READTEMP:
			ret |= APP_MPU9250ReadTemp(&read_buff.temp);
 8000e6a:	4826      	ldr	r0, [pc, #152]	; (8000f04 <APP_SMProccess+0x18c>)
 8000e6c:	f004 fad2 	bl	8005414 <APP_MPU9250ReadTemp>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <APP_SMProccess+0x110>
				states = SM_ERROR;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000e82:	2206      	movs	r2, #6
 8000e84:	701a      	strb	r2, [r3, #0]
				break;
 8000e86:	e030      	b.n	8000eea <APP_SMProccess+0x172>
			}
			new_state = SM_PRINT;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <APP_SMProccess+0x180>)
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	701a      	strb	r2, [r3, #0]
			states = SM_IDLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000e90:	2205      	movs	r2, #5
 8000e92:	701a      	strb	r2, [r3, #0]
			break;
 8000e94:	e029      	b.n	8000eea <APP_SMProccess+0x172>
		//Print state: print a text via UART with values
		case SM_PRINT:
			ret |= print_string(&read_buff);
 8000e96:	4819      	ldr	r0, [pc, #100]	; (8000efc <APP_SMProccess+0x184>)
 8000e98:	f000 f838 	bl	8000f0c <print_string>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	71fb      	strb	r3, [r7, #7]
			if(ret == API_OK){
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d11b      	bne.n	8000ee4 <APP_SMProccess+0x16c>
				new_state = SM_READGYRO;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <APP_SMProccess+0x180>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
				states = SM_IDLE;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000eb8:	e014      	b.n	8000ee4 <APP_SMProccess+0x16c>
		//Idle state: we can do anything here
		case SM_IDLE:
			//Check read time
			ret |= DEV_TimerRead(&idle, &done);
 8000eba:	1dbb      	adds	r3, r7, #6
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4812      	ldr	r0, [pc, #72]	; (8000f08 <APP_SMProccess+0x190>)
 8000ec0:	f004 f880 	bl	8004fc4 <DEV_TimerRead>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	71fb      	strb	r3, [r7, #7]
			if(done == true){
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d009      	beq.n	8000ee8 <APP_SMProccess+0x170>
				states = new_state;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <APP_SMProccess+0x180>)
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <APP_SMProccess+0x17c>)
 8000eda:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000edc:	e004      	b.n	8000ee8 <APP_SMProccess+0x170>
		//Error state: return error
		case SM_ERROR:
		default:
			ret = API_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	71fb      	strb	r3, [r7, #7]
			break;
 8000ee2:	e002      	b.n	8000eea <APP_SMProccess+0x172>
			break;
 8000ee4:	bf00      	nop
 8000ee6:	e000      	b.n	8000eea <APP_SMProccess+0x172>
			break;
 8000ee8:	bf00      	nop
	}
	return ret;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000034 	.word	0x20000034
 8000ef8:	20000035 	.word	0x20000035
 8000efc:	20000038 	.word	0x20000038
 8000f00:	20000044 	.word	0x20000044
 8000f04:	20000050 	.word	0x20000050
 8000f08:	20000054 	.word	0x20000054

08000f0c <print_string>:
 * @brief  Print a string with MPU9250 information via UART
 * @param
 * 		data	[I] - MPU9250 Data to print
 * @retval ret - Return API value
 */
static retType print_string(MPU9250_t * data){
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b0e4      	sub	sp, #400	; 0x190
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f16:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000f1a:	6018      	str	r0, [r3, #0]

	retType ret = API_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
	uint8_t buff[256] = {0};
 8000f22:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	22fc      	movs	r2, #252	; 0xfc
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 fc21 	bl	800577c <memset>
	char_t value[8] = {0};
 8000f3a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
	char_t str[] = "Data returned: ";
 8000f4a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000f52:	4ab1      	ldr	r2, [pc, #708]	; (8001218 <print_string+0x30c>)
 8000f54:	461c      	mov	r4, r3
 8000f56:	4613      	mov	r3, r2
 8000f58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char_t str_gyro[] = "\nGyroscope [°/s]: ";
 8000f5e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f66:	4aad      	ldr	r2, [pc, #692]	; (800121c <print_string+0x310>)
 8000f68:	461c      	mov	r4, r3
 8000f6a:	4615      	mov	r5, r2
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	6023      	str	r3, [r4, #0]
	char_t str_accl[] = "\nAccelerometer [g]: ";
 8000f74:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000f7c:	4aa8      	ldr	r2, [pc, #672]	; (8001220 <print_string+0x314>)
 8000f7e:	461c      	mov	r4, r3
 8000f80:	4615      	mov	r5, r2
 8000f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f8a:	6020      	str	r0, [r4, #0]
 8000f8c:	3404      	adds	r4, #4
 8000f8e:	7021      	strb	r1, [r4, #0]
	char_t str_temp[] = "\nTemperature [°C]: ";
 8000f90:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f94:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000f98:	4aa2      	ldr	r2, [pc, #648]	; (8001224 <print_string+0x318>)
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	4615      	mov	r5, r2
 8000f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fa6:	6020      	str	r0, [r4, #0]
 8000fa8:	3404      	adds	r4, #4
 8000faa:	7021      	strb	r1, [r4, #0]
	char_t str_x[] = "\nAxis X: ";
 8000fac:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fb0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000fb4:	4a9c      	ldr	r2, [pc, #624]	; (8001228 <print_string+0x31c>)
 8000fb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb8:	c303      	stmia	r3!, {r0, r1}
 8000fba:	801a      	strh	r2, [r3, #0]
	char_t str_y[] = "\nAxis Y: ";
 8000fbc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fc0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8000fc4:	4a99      	ldr	r2, [pc, #612]	; (800122c <print_string+0x320>)
 8000fc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc8:	c303      	stmia	r3!, {r0, r1}
 8000fca:	801a      	strh	r2, [r3, #0]
	char_t str_z[] = "\nAxis Z: ";
 8000fcc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fd0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000fd4:	4a96      	ldr	r2, [pc, #600]	; (8001230 <print_string+0x324>)
 8000fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd8:	c303      	stmia	r3!, {r0, r1}
 8000fda:	801a      	strh	r2, [r3, #0]
	char_t i = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f

	strcat((char_t *)buff, str);
 8000fe2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000fe6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f004 fbcd 	bl	800578c <strcat>
	strcat((char_t *)buff, str_gyro);
 8000ff2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ff6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 fbc5 	bl	800578c <strcat>
	strcat((char_t *)buff, str_x);
 8001002:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001006:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f004 fbbd 	bl	800578c <strcat>
	ftoa(data->gyro.x, value);
 8001012:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001016:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001024:	4618      	mov	r0, r3
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	f000 f905 	bl	8001238 <ftoa>
	strcat((char_t *)buff, value);
 800102e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001032:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fba7 	bl	800578c <strcat>
	strcat((char_t *)buff, str_y);
 800103e:	f107 0218 	add.w	r2, r7, #24
 8001042:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fb9f 	bl	800578c <strcat>
	ftoa(data->gyro.y, value);
 800104e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001052:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	edd3 7a01 	vldr	s15, [r3, #4]
 800105c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001060:	4618      	mov	r0, r3
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	f000 f8e7 	bl	8001238 <ftoa>
	strcat((char_t *)buff, value);
 800106a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800106e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f004 fb89 	bl	800578c <strcat>
	strcat((char_t *)buff, str_z);
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f004 fb81 	bl	800578c <strcat>
	ftoa(data->gyro.z, value);
 800108a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800108e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	edd3 7a02 	vldr	s15, [r3, #8]
 8001098:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800109c:	4618      	mov	r0, r3
 800109e:	eeb0 0a67 	vmov.f32	s0, s15
 80010a2:	f000 f8c9 	bl	8001238 <ftoa>
	strcat((char_t *)buff, value);
 80010a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80010aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 fb6b 	bl	800578c <strcat>

	strcat((char_t *)buff, str_accl);
 80010b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fb63 	bl	800578c <strcat>
	strcat((char_t *)buff, str_x);
 80010c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80010ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 fb5b 	bl	800578c <strcat>
	ftoa(data->accl.x, value);
 80010d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80010da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80010e4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010e8:	4618      	mov	r0, r3
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	f000 f8a3 	bl	8001238 <ftoa>
	strcat((char_t *)buff, value);
 80010f2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80010f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 fb45 	bl	800578c <strcat>
	strcat((char_t *)buff, str_y);
 8001102:	f107 0218 	add.w	r2, r7, #24
 8001106:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f004 fb3d 	bl	800578c <strcat>
	ftoa(data->accl.y, value);
 8001112:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001116:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001120:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001124:	4618      	mov	r0, r3
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	f000 f885 	bl	8001238 <ftoa>
	strcat((char_t *)buff, value);
 800112e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001132:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f004 fb27 	bl	800578c <strcat>
	strcat((char_t *)buff, str_z);
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f004 fb1f 	bl	800578c <strcat>
	ftoa(data->accl.z, value);
 800114e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001152:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	edd3 7a05 	vldr	s15, [r3, #20]
 800115c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001160:	4618      	mov	r0, r3
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	f000 f867 	bl	8001238 <ftoa>
	strcat((char_t *)buff, value);
 800116a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800116e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f004 fb09 	bl	800578c <strcat>

	strcat((char_t *)buff, str_temp);
 800117a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800117e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f004 fb01 	bl	800578c <strcat>
	ftoa(data->temp, value);
 800118a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800118e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	edd3 7a06 	vldr	s15, [r3, #24]
 8001198:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800119c:	4618      	mov	r0, r3
 800119e:	eeb0 0a67 	vmov.f32	s0, s15
 80011a2:	f000 f849 	bl	8001238 <ftoa>
	strcat((char_t *)buff, value);
 80011a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80011aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 faeb 	bl	800578c <strcat>
	strcat((char_t *)buff, "\n\n");
 80011b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f818 	bl	80001f0 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c8:	4413      	add	r3, r2
 80011ca:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <print_string+0x328>)
 80011cc:	8811      	ldrh	r1, [r2, #0]
 80011ce:	7892      	ldrb	r2, [r2, #2]
 80011d0:	8019      	strh	r1, [r3, #0]
 80011d2:	709a      	strb	r2, [r3, #2]

	for(i = 0; i<256; i++){
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
		if(*(buff + i) == '\0') break;
 80011da:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80011de:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011e2:	4413      	add	r3, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00d      	beq.n	8001206 <print_string+0x2fa>
		//Print byte by byte
		DEV_UARTSendChar(buff + i);
 80011ea:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80011ee:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011f2:	4413      	add	r3, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 ff1b 	bl	8005030 <DEV_UARTSendChar>
	for(i = 0; i<256; i++){
 80011fa:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80011fe:	3301      	adds	r3, #1
 8001200:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
		if(*(buff + i) == '\0') break;
 8001204:	e7e9      	b.n	80011da <print_string+0x2ce>
 8001206:	bf00      	nop
	}
	return ret;
 8001208:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
}
 800120c:	4618      	mov	r0, r3
 800120e:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001212:	46bd      	mov	sp, r7
 8001214:	bdb0      	pop	{r4, r5, r7, pc}
 8001216:	bf00      	nop
 8001218:	0800584c 	.word	0x0800584c
 800121c:	0800585c 	.word	0x0800585c
 8001220:	08005870 	.word	0x08005870
 8001224:	08005888 	.word	0x08005888
 8001228:	080058a0 	.word	0x080058a0
 800122c:	080058ac 	.word	0x080058ac
 8001230:	080058b8 	.word	0x080058b8
 8001234:	08005848 	.word	0x08005848

08001238 <ftoa>:
 * @param
 * 		value	[I] - Float data
 * 		str		[O] - String output
 * @retval void
 */
static void ftoa(float value, char_t * str){
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
 800123e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001242:	60b8      	str	r0, [r7, #8]

	float fpart;
	uint8_t ipart;
    char_t istr[5] = {0};
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    char_t dot[] = ".";
 800124e:	232e      	movs	r3, #46	; 0x2e
 8001250:	843b      	strh	r3, [r7, #32]
    char_t fstr[2] = {0};
 8001252:	2300      	movs	r3, #0
 8001254:	83bb      	strh	r3, [r7, #28]
    char_t vstr[8] = {0};
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]

    //Get int part
    ipart = (uint8_t)value;
 800125e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001266:	edc7 7a01 	vstr	s15, [r7, #4]
 800126a:	793b      	ldrb	r3, [r7, #4]
 800126c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    //Get float part
    fpart = value - (float)ipart;
 8001270:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001284:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    //Convert int part to string
    itoa(ipart, istr, 10);
 8001288:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800128c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001290:	220a      	movs	r2, #10
 8001292:	4618      	mov	r0, r3
 8001294:	f004 fa70 	bl	8005778 <itoa>
	//Convert float part to string
	fpart = fpart * pow(10, 2);
 8001298:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800129c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001324 <ftoa+0xec>
 80012a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	itoa((uint8_t)fpart, fstr, 10);
 80012a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80012b4:	793b      	ldrb	r3, [r7, #4]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	220a      	movs	r2, #10
 80012c0:	4619      	mov	r1, r3
 80012c2:	f004 fa59 	bl	8005778 <itoa>

	strcat(vstr,istr);
 80012c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fa5b 	bl	800578c <strcat>
	strcat(vstr, dot);
 80012d6:	f107 0220 	add.w	r2, r7, #32
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 fa53 	bl	800578c <strcat>
	strcat(vstr, fstr);
 80012e6:	f107 021c 	add.w	r2, r7, #28
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fa4b 	bl	800578c <strcat>

	for(int i = 0; i < 8; i++){
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
 80012fa:	e00b      	b.n	8001314 <ftoa+0xdc>
		str[i] = vstr[i];
 80012fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	4413      	add	r3, r2
 8001302:	f107 0114 	add.w	r1, r7, #20
 8001306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001308:	440a      	add	r2, r1
 800130a:	7812      	ldrb	r2, [r2, #0]
 800130c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 800130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001310:	3301      	adds	r3, #1
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
 8001314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001316:	2b07      	cmp	r3, #7
 8001318:	ddf0      	ble.n	80012fc <ftoa+0xc4>
	}
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	3738      	adds	r7, #56	; 0x38
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	42c80000 	.word	0x42c80000

08001328 <main>:
 * @brief  Main program
 * @param  void
 * @retval void
 */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	retType ret = API_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8001332:	f000 f927 	bl	8001584 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8001336:	f000 f817 	bl	8001368 <SystemClock_Config>

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED2);
 800133a:	2001      	movs	r0, #1
 800133c:	f000 f8b8 	bl	80014b0 <BSP_LED_Init>

	//FSM initialization
	ret |= APP_SMInit();
 8001340:	f7ff fcfe 	bl	8000d40 <APP_SMInit>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4313      	orrs	r3, r2
 800134c:	71fb      	strb	r3, [r7, #7]

	/* Infinite loop */
	while (1)
	{
		//Update FSM
		ret |= APP_SMProccess();
 800134e:	f7ff fd13 	bl	8000d78 <APP_SMProccess>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4313      	orrs	r3, r2
 800135a:	71fb      	strb	r3, [r7, #7]
		if(ret != API_OK) Error_Handler();
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f5      	beq.n	800134e <main+0x26>
 8001362:	f000 f863 	bl	800142c <Error_Handler>
		ret |= APP_SMProccess();
 8001366:	e7f2      	b.n	800134e <main+0x26>

08001368 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  void
 * @retval void
 */
static void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	; 0x50
 800136c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <SystemClock_Config+0xbc>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a2b      	ldr	r2, [pc, #172]	; (8001424 <SystemClock_Config+0xbc>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <SystemClock_Config+0xbc>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <SystemClock_Config+0xc0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a25      	ldr	r2, [pc, #148]	; (8001428 <SystemClock_Config+0xc0>)
 8001394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <SystemClock_Config+0xc0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a6:	2301      	movs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013aa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013ae:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b0:	2302      	movs	r3, #2
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80013ba:	2308      	movs	r3, #8
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80013be:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80013c8:	2307      	movs	r3, #7
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fd45 	bl	8003e60 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 80013dc:	f000 f826 	bl	800142c <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013e0:	f002 fcee 	bl	8003dc0 <HAL_PWREx_EnableOverDrive>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 80013ea:	f000 f81f 	bl	800142c <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80013ee:	230f      	movs	r3, #15
 80013f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2302      	movs	r3, #2
 80013f4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001406:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800140a:	2105      	movs	r1, #5
 800140c:	4618      	mov	r0, r3
 800140e:	f002 ff9f 	bl	8004350 <HAL_RCC_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8001418:	f000 f808 	bl	800142c <Error_Handler>
	}
}
 800141c:	bf00      	nop
 800141e:	3750      	adds	r7, #80	; 0x50
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  void
 * @retval void
 */
static void Error_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001430:	2001      	movs	r0, #1
 8001432:	f000 f88d 	bl	8001550 <BSP_LED_On>
	while (1)
 8001436:	e7fe      	b.n	8001436 <Error_Handler+0xa>

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001494 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001462:	490e      	ldr	r1, [pc, #56]	; (800149c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001478:	4c0b      	ldr	r4, [pc, #44]	; (80014a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001486:	f7ff ffd7 	bl	8001438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148a:	f004 f939 	bl	8005700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff ff4b 	bl	8001328 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001494:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80014a0:	0800592c 	.word	0x0800592c
  ldr r2, =_sbss
 80014a4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80014a8:	200000fc 	.word	0x200000fc

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>
	...

080014b0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10e      	bne.n	80014de <BSP_LED_Init+0x2e>
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <BSP_LED_Init+0x94>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <BSP_LED_Init+0x94>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <BSP_LED_Init+0x94>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	e00d      	b.n	80014fa <BSP_LED_Init+0x4a>
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <BSP_LED_Init+0x94>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <BSP_LED_Init+0x94>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <BSP_LED_Init+0x94>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <BSP_LED_Init+0x98>)
 80014fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <BSP_LED_Init+0x9c>)
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	f107 0214 	add.w	r2, r7, #20
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f9e4 	bl	80018ec <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <BSP_LED_Init+0x9c>)
 8001528:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a06      	ldr	r2, [pc, #24]	; (8001548 <BSP_LED_Init+0x98>)
 8001530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	f000 fb84 	bl	8001c44 <HAL_GPIO_WritePin>
}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	080058f0 	.word	0x080058f0
 800154c:	20000004 	.word	0x20000004

08001550 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <BSP_LED_On+0x2c>)
 800155e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <BSP_LED_On+0x30>)
 8001566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800156a:	2201      	movs	r2, #1
 800156c:	4619      	mov	r1, r3
 800156e:	f000 fb69 	bl	8001c44 <HAL_GPIO_WritePin>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000004 	.word	0x20000004
 8001580:	080058f0 	.word	0x080058f0

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <HAL_Init+0x40>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_Init+0x40>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_Init+0x40>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 f92b 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f002 fb42 	bl	8003c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f943 	bl	8001872 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 f90b 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	20000014 	.word	0x20000014
 8001624:	20000010 	.word	0x20000010

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000014 	.word	0x20000014
 800164c:	20000060 	.word	0x20000060

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000060 	.word	0x20000060

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff29 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff3e 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff31 	bl	80016cc <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d004      	beq.n	80018a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e00c      	b.n	80018c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2205      	movs	r2, #5
 80018ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018dc:	b2db      	uxtb	r3, r3
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e177      	b.n	8001bf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8166 	bne.w	8001bf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d005      	beq.n	800193e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193a:	2b02      	cmp	r3, #2
 800193c:	d130      	bne.n	80019a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 0201 	and.w	r2, r3, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d017      	beq.n	80019dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d123      	bne.n	8001a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80c0 	beq.w	8001bf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b66      	ldr	r3, [pc, #408]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a65      	ldr	r2, [pc, #404]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8e:	4a61      	ldr	r2, [pc, #388]	; (8001c14 <HAL_GPIO_Init+0x328>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a58      	ldr	r2, [pc, #352]	; (8001c18 <HAL_GPIO_Init+0x32c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d037      	beq.n	8001b2a <HAL_GPIO_Init+0x23e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a57      	ldr	r2, [pc, #348]	; (8001c1c <HAL_GPIO_Init+0x330>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d031      	beq.n	8001b26 <HAL_GPIO_Init+0x23a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a56      	ldr	r2, [pc, #344]	; (8001c20 <HAL_GPIO_Init+0x334>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d02b      	beq.n	8001b22 <HAL_GPIO_Init+0x236>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a55      	ldr	r2, [pc, #340]	; (8001c24 <HAL_GPIO_Init+0x338>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d025      	beq.n	8001b1e <HAL_GPIO_Init+0x232>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <HAL_GPIO_Init+0x33c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <HAL_GPIO_Init+0x22e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a53      	ldr	r2, [pc, #332]	; (8001c2c <HAL_GPIO_Init+0x340>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x22a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_GPIO_Init+0x344>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x226>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a51      	ldr	r2, [pc, #324]	; (8001c34 <HAL_GPIO_Init+0x348>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x222>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a50      	ldr	r2, [pc, #320]	; (8001c38 <HAL_GPIO_Init+0x34c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x21e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4f      	ldr	r2, [pc, #316]	; (8001c3c <HAL_GPIO_Init+0x350>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x21a>
 8001b02:	2309      	movs	r3, #9
 8001b04:	e012      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b06:	230a      	movs	r3, #10
 8001b08:	e010      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	e00e      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b0e:	2307      	movs	r3, #7
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b12:	2306      	movs	r3, #6
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b3c:	4935      	ldr	r1, [pc, #212]	; (8001c14 <HAL_GPIO_Init+0x328>)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_GPIO_Init+0x354>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6e:	4a34      	ldr	r2, [pc, #208]	; (8001c40 <HAL_GPIO_Init+0x354>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_GPIO_Init+0x354>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b98:	4a29      	ldr	r2, [pc, #164]	; (8001c40 <HAL_GPIO_Init+0x354>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_GPIO_Init+0x354>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <HAL_GPIO_Init+0x354>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_GPIO_Init+0x354>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <HAL_GPIO_Init+0x354>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	f67f ae84 	bls.w	8001908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40021c00 	.word	0x40021c00
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40022400 	.word	0x40022400
 8001c40:	40013c00 	.word	0x40013c00

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c60:	e003      	b.n	8001c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e12b      	b.n	8001ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f001 fff6 	bl	8003c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2224      	movs	r2, #36	; 0x24
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cdc:	f002 fd30 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8001ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a81      	ldr	r2, [pc, #516]	; (8001eec <HAL_I2C_Init+0x274>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d807      	bhi.n	8001cfc <HAL_I2C_Init+0x84>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a80      	ldr	r2, [pc, #512]	; (8001ef0 <HAL_I2C_Init+0x278>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	bf94      	ite	ls
 8001cf4:	2301      	movls	r3, #1
 8001cf6:	2300      	movhi	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	e006      	b.n	8001d0a <HAL_I2C_Init+0x92>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a7d      	ldr	r2, [pc, #500]	; (8001ef4 <HAL_I2C_Init+0x27c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	bf94      	ite	ls
 8001d04:	2301      	movls	r3, #1
 8001d06:	2300      	movhi	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0e7      	b.n	8001ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4a78      	ldr	r2, [pc, #480]	; (8001ef8 <HAL_I2C_Init+0x280>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9b      	lsrs	r3, r3, #18
 8001d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a6a      	ldr	r2, [pc, #424]	; (8001eec <HAL_I2C_Init+0x274>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d802      	bhi.n	8001d4c <HAL_I2C_Init+0xd4>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	e009      	b.n	8001d60 <HAL_I2C_Init+0xe8>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	4a69      	ldr	r2, [pc, #420]	; (8001efc <HAL_I2C_Init+0x284>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	3301      	adds	r3, #1
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	495c      	ldr	r1, [pc, #368]	; (8001eec <HAL_I2C_Init+0x274>)
 8001d7c:	428b      	cmp	r3, r1
 8001d7e:	d819      	bhi.n	8001db4 <HAL_I2C_Init+0x13c>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e59      	subs	r1, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d8e:	1c59      	adds	r1, r3, #1
 8001d90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d94:	400b      	ands	r3, r1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_I2C_Init+0x138>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1e59      	subs	r1, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dae:	e051      	b.n	8001e54 <HAL_I2C_Init+0x1dc>
 8001db0:	2304      	movs	r3, #4
 8001db2:	e04f      	b.n	8001e54 <HAL_I2C_Init+0x1dc>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d111      	bne.n	8001de0 <HAL_I2C_Init+0x168>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e58      	subs	r0, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	440b      	add	r3, r1
 8001dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	e012      	b.n	8001e06 <HAL_I2C_Init+0x18e>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1e58      	subs	r0, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	0099      	lsls	r1, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x196>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e022      	b.n	8001e54 <HAL_I2C_Init+0x1dc>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10e      	bne.n	8001e34 <HAL_I2C_Init+0x1bc>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1e58      	subs	r0, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	440b      	add	r3, r1
 8001e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e32:	e00f      	b.n	8001e54 <HAL_I2C_Init+0x1dc>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	0099      	lsls	r1, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	6809      	ldr	r1, [r1, #0]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6911      	ldr	r1, [r2, #16]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68d2      	ldr	r2, [r2, #12]
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	000186a0 	.word	0x000186a0
 8001ef0:	001e847f 	.word	0x001e847f
 8001ef4:	003d08ff 	.word	0x003d08ff
 8001ef8:	431bde83 	.word	0x431bde83
 8001efc:	10624dd3 	.word	0x10624dd3

08001f00 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	817b      	strh	r3, [r7, #10]
 8001f10:	4613      	mov	r3, r2
 8001f12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	f040 8085 	bne.w	8002030 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_I2C_Master_Transmit_IT+0x140>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	08db      	lsrs	r3, r3, #3
 8001f2c:	4a45      	ldr	r2, [pc, #276]	; (8002044 <HAL_I2C_Master_Transmit_IT+0x144>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0a1a      	lsrs	r2, r3, #8
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009a      	lsls	r2, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d116      	bne.n	8001f7a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f043 0220 	orr.w	r2, r3, #32
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e05b      	b.n	8002032 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d0db      	beq.n	8001f40 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_I2C_Master_Transmit_IT+0x96>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e04d      	b.n	8002032 <HAL_I2C_Master_Transmit_IT+0x132>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d007      	beq.n	8001fbc <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2221      	movs	r2, #33	; 0x21
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	893a      	ldrh	r2, [r7, #8]
 8001fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <HAL_I2C_Master_Transmit_IT+0x148>)
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001ffe:	897a      	ldrh	r2, [r7, #10]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800201a:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800202a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	371c      	adds	r7, #28
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000000 	.word	0x20000000
 8002044:	14f8b589 	.word	0x14f8b589
 8002048:	ffff0000 	.word	0xffff0000

0800204c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	460b      	mov	r3, r1
 800205a:	817b      	strh	r3, [r7, #10]
 800205c:	4613      	mov	r3, r2
 800205e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b20      	cmp	r3, #32
 800206e:	f040 808d 	bne.w	800218c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002072:	4b4a      	ldr	r3, [pc, #296]	; (800219c <HAL_I2C_Master_Receive_IT+0x150>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	08db      	lsrs	r3, r3, #3
 8002078:	4a49      	ldr	r2, [pc, #292]	; (80021a0 <HAL_I2C_Master_Receive_IT+0x154>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0a1a      	lsrs	r2, r3, #8
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	009a      	lsls	r2, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3b01      	subs	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d116      	bne.n	80020c6 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f043 0220 	orr.w	r2, r3, #32
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e063      	b.n	800218e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d0db      	beq.n	800208c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_I2C_Master_Receive_IT+0x96>
 80020de:	2302      	movs	r3, #2
 80020e0:	e055      	b.n	800218e <HAL_I2C_Master_Receive_IT+0x142>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d007      	beq.n	8002108 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002116:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2222      	movs	r2, #34	; 0x22
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2210      	movs	r2, #16
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	893a      	ldrh	r2, [r7, #8]
 8002138:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_I2C_Master_Receive_IT+0x158>)
 8002148:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800214a:	897a      	ldrh	r2, [r7, #10]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002166:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002176:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002186:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000000 	.word	0x20000000
 80021a0:	14f8b589 	.word	0x14f8b589
 80021a4:	ffff0000 	.word	0xffff0000

080021a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	460b      	mov	r3, r1
 80021b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff fa4a 	bl	8001650 <HAL_GetTick>
 80021bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	f040 8111 	bne.w	80023f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2319      	movs	r3, #25
 80021d6:	2201      	movs	r2, #1
 80021d8:	4988      	ldr	r1, [pc, #544]	; (80023fc <HAL_I2C_IsDeviceReady+0x254>)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f001 fc8a 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
 80021e8:	e104      	b.n	80023f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_I2C_IsDeviceReady+0x50>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e0fd      	b.n	80023f4 <HAL_I2C_IsDeviceReady+0x24c>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d007      	beq.n	800221e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0201 	orr.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2224      	movs	r2, #36	; 0x24
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a70      	ldr	r2, [pc, #448]	; (8002400 <HAL_I2C_IsDeviceReady+0x258>)
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002250:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f001 fc48 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00d      	beq.n	8002286 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002278:	d103      	bne.n	8002282 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e0b6      	b.n	80023f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002286:	897b      	ldrh	r3, [r7, #10]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002294:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002296:	f7ff f9db 	bl	8001650 <HAL_GetTick>
 800229a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022ca:	e025      	b.n	8002318 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022cc:	f7ff f9c0 	bl	8001650 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d302      	bcc.n	80022e2 <HAL_I2C_IsDeviceReady+0x13a>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	22a0      	movs	r2, #160	; 0xa0
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2ba0      	cmp	r3, #160	; 0xa0
 8002322:	d005      	beq.n	8002330 <HAL_I2C_IsDeviceReady+0x188>
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_I2C_IsDeviceReady+0x188>
 800232a:	7dbb      	ldrb	r3, [r7, #22]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0cd      	beq.n	80022cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d129      	bne.n	800239a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002354:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2319      	movs	r3, #25
 8002372:	2201      	movs	r2, #1
 8002374:	4921      	ldr	r1, [pc, #132]	; (80023fc <HAL_I2C_IsDeviceReady+0x254>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f001 fbbc 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e036      	b.n	80023f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e02c      	b.n	80023f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2319      	movs	r3, #25
 80023ba:	2201      	movs	r2, #1
 80023bc:	490f      	ldr	r1, [pc, #60]	; (80023fc <HAL_I2C_IsDeviceReady+0x254>)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f001 fb98 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e012      	b.n	80023f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f4ff af32 	bcc.w	8002242 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
  }
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	00100002 	.word	0x00100002
 8002400:	ffff0000 	.word	0xffff0000

08002404 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002424:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	2b10      	cmp	r3, #16
 8002432:	d003      	beq.n	800243c <HAL_I2C_EV_IRQHandler+0x38>
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	f040 80c1 	bne.w	80025be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_I2C_EV_IRQHandler+0x6e>
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800245c:	d003      	beq.n	8002466 <HAL_I2C_EV_IRQHandler+0x62>
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002464:	d101      	bne.n	800246a <HAL_I2C_EV_IRQHandler+0x66>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_I2C_EV_IRQHandler+0x68>
 800246a:	2300      	movs	r3, #0
 800246c:	2b01      	cmp	r3, #1
 800246e:	f000 8132 	beq.w	80026d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00c      	beq.n	8002496 <HAL_I2C_EV_IRQHandler+0x92>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	0a5b      	lsrs	r3, r3, #9
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f001 fbbd 	bl	8003c08 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fcdc 	bl	8002e4c <I2C_Master_SB>
 8002494:	e092      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	0a5b      	lsrs	r3, r3, #9
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fd52 	bl	8002f58 <I2C_Master_ADD10>
 80024b4:	e082      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	0a5b      	lsrs	r3, r3, #9
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fd6c 	bl	8002fac <I2C_Master_ADDR>
 80024d4:	e072      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d03b      	beq.n	800255a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024f0:	f000 80f3 	beq.w	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	09db      	lsrs	r3, r3, #7
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00f      	beq.n	8002520 <HAL_I2C_EV_IRQHandler+0x11c>
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	0a9b      	lsrs	r3, r3, #10
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <HAL_I2C_EV_IRQHandler+0x11c>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d103      	bne.n	8002520 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f94c 	bl	80027b6 <I2C_MasterTransmit_TXE>
 800251e:	e04d      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80d6 	beq.w	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	0a5b      	lsrs	r3, r3, #9
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80cf 	beq.w	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800253c:	7bbb      	ldrb	r3, [r7, #14]
 800253e:	2b21      	cmp	r3, #33	; 0x21
 8002540:	d103      	bne.n	800254a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f9d3 	bl	80028ee <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002548:	e0c7      	b.n	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b40      	cmp	r3, #64	; 0x40
 800254e:	f040 80c4 	bne.w	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fa41 	bl	80029da <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002558:	e0bf      	b.n	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002568:	f000 80b7 	beq.w	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00f      	beq.n	8002598 <HAL_I2C_EV_IRQHandler+0x194>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	0a9b      	lsrs	r3, r3, #10
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d009      	beq.n	8002598 <HAL_I2C_EV_IRQHandler+0x194>
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d103      	bne.n	8002598 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fab6 	bl	8002b02 <I2C_MasterReceive_RXNE>
 8002596:	e011      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 809a 	beq.w	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	0a5b      	lsrs	r3, r3, #9
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8093 	beq.w	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fb5f 	bl	8002c78 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ba:	e08e      	b.n	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
 80025bc:	e08d      	b.n	80026da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e007      	b.n	80025e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <HAL_I2C_EV_IRQHandler+0x20e>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	0a5b      	lsrs	r3, r3, #9
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00c      	beq.n	8002612 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002608:	69b9      	ldr	r1, [r7, #24]
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 ff1d 	bl	800344a <I2C_Slave_ADDR>
 8002610:	e066      	b.n	80026e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_I2C_EV_IRQHandler+0x22e>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	0a5b      	lsrs	r3, r3, #9
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 ff58 	bl	80034e0 <I2C_Slave_STOPF>
 8002630:	e056      	b.n	80026e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002632:	7bbb      	ldrb	r3, [r7, #14]
 8002634:	2b21      	cmp	r3, #33	; 0x21
 8002636:	d002      	beq.n	800263e <HAL_I2C_EV_IRQHandler+0x23a>
 8002638:	7bbb      	ldrb	r3, [r7, #14]
 800263a:	2b29      	cmp	r3, #41	; 0x29
 800263c:	d125      	bne.n	800268a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	09db      	lsrs	r3, r3, #7
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00f      	beq.n	800266a <HAL_I2C_EV_IRQHandler+0x266>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	0a9b      	lsrs	r3, r3, #10
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_I2C_EV_IRQHandler+0x266>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fe33 	bl	80032ce <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002668:	e039      	b.n	80026de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d033      	beq.n	80026de <HAL_I2C_EV_IRQHandler+0x2da>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	0a5b      	lsrs	r3, r3, #9
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02d      	beq.n	80026de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fe60 	bl	8003348 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002688:	e029      	b.n	80026de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00f      	beq.n	80026b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	0a9b      	lsrs	r3, r3, #10
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fe6b 	bl	800338a <I2C_SlaveReceive_RXNE>
 80026b4:	e014      	b.n	80026e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00e      	beq.n	80026e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	0a5b      	lsrs	r3, r3, #9
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fe99 	bl	8003406 <I2C_SlaveReceive_BTF>
 80026d4:	e004      	b.n	80026e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80026d6:	bf00      	nop
 80026d8:	e002      	b.n	80026e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026da:	bf00      	nop
 80026dc:	e000      	b.n	80026e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
 8002742:	4613      	mov	r3, r2
 8002744:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027cc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d150      	bne.n	800287e <I2C_MasterTransmit_TXE+0xc8>
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	2b21      	cmp	r3, #33	; 0x21
 80027e0:	d14d      	bne.n	800287e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d01d      	beq.n	8002824 <I2C_MasterTransmit_TXE+0x6e>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	d01a      	beq.n	8002824 <I2C_MasterTransmit_TXE+0x6e>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027f4:	d016      	beq.n	8002824 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002804:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2211      	movs	r2, #17
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff62 	bl	80026e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002822:	e060      	b.n	80028e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002832:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d107      	bne.n	800286e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ff7d 	bl	8002766 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800286c:	e03b      	b.n	80028e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff35 	bl	80026e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800287c:	e033      	b.n	80028e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b21      	cmp	r3, #33	; 0x21
 8002882:	d005      	beq.n	8002890 <I2C_MasterTransmit_TXE+0xda>
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d12d      	bne.n	80028e6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b22      	cmp	r3, #34	; 0x22
 800288e:	d12a      	bne.n	80028e6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d108      	bne.n	80028ac <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80028aa:	e01c      	b.n	80028e6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d103      	bne.n	80028c0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f88e 	bl	80029da <I2C_MemoryTransmit_TXE_BTF>
}
 80028be:	e012      	b.n	80028e6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028e4:	e7ff      	b.n	80028e6 <I2C_MasterTransmit_TXE+0x130>
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b21      	cmp	r3, #33	; 0x21
 8002906:	d164      	bne.n	80029d2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002936:	e04c      	b.n	80029d2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d01d      	beq.n	800297a <I2C_MasterTransmit_BTF+0x8c>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b20      	cmp	r3, #32
 8002942:	d01a      	beq.n	800297a <I2C_MasterTransmit_BTF+0x8c>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800294a:	d016      	beq.n	800297a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800295a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2211      	movs	r2, #17
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff feb7 	bl	80026e6 <HAL_I2C_MasterTxCpltCallback>
}
 8002978:	e02b      	b.n	80029d2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002988:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002998:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b40      	cmp	r3, #64	; 0x40
 80029b2:	d107      	bne.n	80029c4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fed2 	bl	8002766 <HAL_I2C_MemTxCpltCallback>
}
 80029c2:	e006      	b.n	80029d2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff fe8a 	bl	80026e6 <HAL_I2C_MasterTxCpltCallback>
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11d      	bne.n	8002a2e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d10b      	bne.n	8002a12 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0a:	1c9a      	adds	r2, r3, #2
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002a10:	e073      	b.n	8002afa <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	121b      	asrs	r3, r3, #8
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a2c:	e065      	b.n	8002afa <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10b      	bne.n	8002a4e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a4c:	e055      	b.n	8002afa <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d151      	bne.n	8002afa <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b22      	cmp	r3, #34	; 0x22
 8002a5a:	d10d      	bne.n	8002a78 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a76:	e040      	b.n	8002afa <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d015      	beq.n	8002aae <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b21      	cmp	r3, #33	; 0x21
 8002a86:	d112      	bne.n	8002aae <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002aac:	e025      	b.n	8002afa <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d120      	bne.n	8002afa <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b21      	cmp	r3, #33	; 0x21
 8002abc:	d11d      	bne.n	8002afa <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002acc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002adc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fe36 	bl	8002766 <HAL_I2C_MemTxCpltCallback>
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b22      	cmp	r3, #34	; 0x22
 8002b14:	f040 80ac 	bne.w	8002c70 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d921      	bls.n	8002b6a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	f040 808c 	bne.w	8002c70 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b66:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002b68:	e082      	b.n	8002c70 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d075      	beq.n	8002c5e <I2C_MasterReceive_RXNE+0x15c>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d002      	beq.n	8002b7e <I2C_MasterReceive_RXNE+0x7c>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d16f      	bne.n	8002c5e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f001 f810 	bl	8003ba4 <I2C_WaitOnSTOPRequestThroughIT>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d142      	bne.n	8002c10 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b98:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ba8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d10a      	bne.n	8002bfa <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fdc1 	bl	800277a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bf8:	e03a      	b.n	8002c70 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2212      	movs	r2, #18
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fd76 	bl	80026fa <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c0e:	e02f      	b.n	8002c70 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fd99 	bl	800278e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c5c:	e008      	b.n	8002c70 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6c:	605a      	str	r2, [r3, #4]
}
 8002c6e:	e7ff      	b.n	8002c70 <I2C_MasterReceive_RXNE+0x16e>
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d11b      	bne.n	8002cc8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002cc6:	e0bd      	b.n	8002e44 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d129      	bne.n	8002d26 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d00a      	beq.n	8002cfe <I2C_MasterReceive_BTF+0x86>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d007      	beq.n	8002cfe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d24:	e08e      	b.n	8002e44 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d176      	bne.n	8002e1e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d002      	beq.n	8002d3c <I2C_MasterReceive_BTF+0xc4>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d108      	bne.n	8002d4e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e019      	b.n	8002d82 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d002      	beq.n	8002d5a <I2C_MasterReceive_BTF+0xe2>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e00a      	b.n	8002d82 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d007      	beq.n	8002d82 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ddc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d10a      	bne.n	8002e08 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff fcba 	bl	800277a <HAL_I2C_MemRxCpltCallback>
}
 8002e06:	e01d      	b.n	8002e44 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2212      	movs	r2, #18
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff fc6f 	bl	80026fa <HAL_I2C_MasterRxCpltCallback>
}
 8002e1c:	e012      	b.n	8002e44 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d117      	bne.n	8002e90 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e78:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002e7a:	e067      	b.n	8002f4c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]
}
 8002e8e:	e05d      	b.n	8002f4c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e98:	d133      	bne.n	8002f02 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b21      	cmp	r3, #33	; 0x21
 8002ea4:	d109      	bne.n	8002eba <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eb6:	611a      	str	r2, [r3, #16]
 8002eb8:	e008      	b.n	8002ecc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <I2C_Master_SB+0x92>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d108      	bne.n	8002ef0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d032      	beq.n	8002f4c <I2C_Master_SB+0x100>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02d      	beq.n	8002f4c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efe:	605a      	str	r2, [r3, #4]
}
 8002f00:	e024      	b.n	8002f4c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10e      	bne.n	8002f28 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	11db      	asrs	r3, r3, #7
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 0306 	and.w	r3, r3, #6
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f063 030f 	orn	r3, r3, #15
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]
}
 8002f26:	e011      	b.n	8002f4c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d10d      	bne.n	8002f4c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	11db      	asrs	r3, r3, #7
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 0306 	and.w	r3, r3, #6
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f063 030e 	orn	r3, r3, #14
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	611a      	str	r2, [r3, #16]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <I2C_Master_ADD10+0x26>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d108      	bne.n	8002f90 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00c      	beq.n	8002fa0 <I2C_Master_ADD10+0x48>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9e:	605a      	str	r2, [r3, #4]
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b091      	sub	sp, #68	; 0x44
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b22      	cmp	r3, #34	; 0x22
 8002fd4:	f040 8169 	bne.w	80032aa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10f      	bne.n	8003000 <I2C_Master_ADDR+0x54>
 8002fe0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d10b      	bne.n	8003000 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	e160      	b.n	80032c2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003004:	2b00      	cmp	r3, #0
 8003006:	d11d      	bne.n	8003044 <I2C_Master_ADDR+0x98>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003010:	d118      	bne.n	8003044 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003012:	2300      	movs	r3, #0
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003036:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	651a      	str	r2, [r3, #80]	; 0x50
 8003042:	e13e      	b.n	80032c2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304e:	2300      	movs	r3, #0
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e115      	b.n	80032a2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	f040 808a 	bne.w	8003196 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003088:	d137      	bne.n	80030fa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003098:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a8:	d113      	bne.n	80030d2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	e0e7      	b.n	80032a2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	623b      	str	r3, [r7, #32]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e0d3      	b.n	80032a2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d02e      	beq.n	800315e <I2C_Master_ADDR+0x1b2>
 8003100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003102:	2b20      	cmp	r3, #32
 8003104:	d02b      	beq.n	800315e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003108:	2b12      	cmp	r3, #18
 800310a:	d102      	bne.n	8003112 <I2C_Master_ADDR+0x166>
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	2b01      	cmp	r3, #1
 8003110:	d125      	bne.n	800315e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	2b04      	cmp	r3, #4
 8003116:	d00e      	beq.n	8003136 <I2C_Master_ADDR+0x18a>
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	2b02      	cmp	r3, #2
 800311c:	d00b      	beq.n	8003136 <I2C_Master_ADDR+0x18a>
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	2b10      	cmp	r3, #16
 8003122:	d008      	beq.n	8003136 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e007      	b.n	8003146 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	e0a1      	b.n	80032a2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e085      	b.n	80032a2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d14d      	bne.n	800323c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d016      	beq.n	80031d4 <I2C_Master_ADDR+0x228>
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d013      	beq.n	80031d4 <I2C_Master_ADDR+0x228>
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d010      	beq.n	80031d4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e007      	b.n	80031e4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031e2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f2:	d117      	bne.n	8003224 <I2C_Master_ADDR+0x278>
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031fa:	d00b      	beq.n	8003214 <I2C_Master_ADDR+0x268>
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d008      	beq.n	8003214 <I2C_Master_ADDR+0x268>
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	2b08      	cmp	r3, #8
 8003206:	d005      	beq.n	8003214 <I2C_Master_ADDR+0x268>
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	2b10      	cmp	r3, #16
 800320c:	d002      	beq.n	8003214 <I2C_Master_ADDR+0x268>
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	2b20      	cmp	r3, #32
 8003212:	d107      	bne.n	8003224 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003222:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	e032      	b.n	80032a2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800324a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325a:	d117      	bne.n	800328c <I2C_Master_ADDR+0x2e0>
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003262:	d00b      	beq.n	800327c <I2C_Master_ADDR+0x2d0>
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	2b01      	cmp	r3, #1
 8003268:	d008      	beq.n	800327c <I2C_Master_ADDR+0x2d0>
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	2b08      	cmp	r3, #8
 800326e:	d005      	beq.n	800327c <I2C_Master_ADDR+0x2d0>
 8003270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003272:	2b10      	cmp	r3, #16
 8003274:	d002      	beq.n	800327c <I2C_Master_ADDR+0x2d0>
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	2b20      	cmp	r3, #32
 800327a:	d107      	bne.n	800328c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800328a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80032a8:	e00b      	b.n	80032c2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	e7ff      	b.n	80032c2 <I2C_Master_ADDR+0x316>
 80032c2:	bf00      	nop
 80032c4:	3744      	adds	r7, #68	; 0x44
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d02b      	beq.n	8003340 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d114      	bne.n	8003340 <I2C_SlaveTransmit_TXE+0x72>
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b29      	cmp	r3, #41	; 0x29
 800331a:	d111      	bne.n	8003340 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2221      	movs	r2, #33	; 0x21
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2228      	movs	r2, #40	; 0x28
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff f9e7 	bl	800270e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d011      	beq.n	800337e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d02c      	beq.n	80033fe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d114      	bne.n	80033fe <I2C_SlaveReceive_RXNE+0x74>
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b2a      	cmp	r3, #42	; 0x2a
 80033d8:	d111      	bne.n	80033fe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2222      	movs	r2, #34	; 0x22
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2228      	movs	r2, #40	; 0x28
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff f992 	bl	8002722 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003464:	2b28      	cmp	r3, #40	; 0x28
 8003466:	d127      	bne.n	80034b8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	09db      	lsrs	r3, r3, #7
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d103      	bne.n	800349c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	81bb      	strh	r3, [r7, #12]
 800349a:	e002      	b.n	80034a2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80034aa:	89ba      	ldrh	r2, [r7, #12]
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	4619      	mov	r1, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff f940 	bl	8002736 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80034b6:	e00e      	b.n	80034d6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003500:	2300      	movs	r3, #0
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353c:	d172      	bne.n	8003624 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b22      	cmp	r3, #34	; 0x22
 8003542:	d002      	beq.n	800354a <I2C_Slave_STOPF+0x6a>
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b2a      	cmp	r3, #42	; 0x2a
 8003548:	d135      	bne.n	80035b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe f9a3 	bl	80018ce <HAL_DMA_GetState>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d049      	beq.n	8003622 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	4a69      	ldr	r2, [pc, #420]	; (8003738 <I2C_Slave_STOPF+0x258>)
 8003594:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe f975 	bl	800188a <HAL_DMA_Abort_IT>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03d      	beq.n	8003622 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035b0:	4610      	mov	r0, r2
 80035b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035b4:	e035      	b.n	8003622 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f043 0204 	orr.w	r2, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe f96d 	bl	80018ce <HAL_DMA_GetState>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d014      	beq.n	8003624 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	4a4e      	ldr	r2, [pc, #312]	; (8003738 <I2C_Slave_STOPF+0x258>)
 8003600:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe f93f 	bl	800188a <HAL_DMA_Abort_IT>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800361c:	4610      	mov	r0, r2
 800361e:	4798      	blx	r3
 8003620:	e000      	b.n	8003624 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003622:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d03e      	beq.n	80036ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d112      	bne.n	8003662 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d112      	bne.n	8003696 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f043 0204 	orr.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f843 	bl	8003740 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80036ba:	e039      	b.n	8003730 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b2a      	cmp	r3, #42	; 0x2a
 80036c0:	d109      	bne.n	80036d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2228      	movs	r2, #40	; 0x28
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff f826 	bl	8002722 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b28      	cmp	r3, #40	; 0x28
 80036e0:	d111      	bne.n	8003706 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <I2C_Slave_STOPF+0x25c>)
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff f827 	bl	8002752 <HAL_I2C_ListenCpltCallback>
}
 8003704:	e014      	b.n	8003730 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	2b22      	cmp	r3, #34	; 0x22
 800370c:	d002      	beq.n	8003714 <I2C_Slave_STOPF+0x234>
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b22      	cmp	r3, #34	; 0x22
 8003712:	d10d      	bne.n	8003730 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe fff9 	bl	8002722 <HAL_I2C_SlaveRxCpltCallback>
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	080039a5 	.word	0x080039a5
 800373c:	ffff0000 	.word	0xffff0000

08003740 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003756:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003758:	7bbb      	ldrb	r3, [r7, #14]
 800375a:	2b10      	cmp	r3, #16
 800375c:	d002      	beq.n	8003764 <I2C_ITError+0x24>
 800375e:	7bbb      	ldrb	r3, [r7, #14]
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d10a      	bne.n	800377a <I2C_ITError+0x3a>
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b22      	cmp	r3, #34	; 0x22
 8003768:	d107      	bne.n	800377a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003778:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003780:	2b28      	cmp	r3, #40	; 0x28
 8003782:	d107      	bne.n	8003794 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2228      	movs	r2, #40	; 0x28
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003792:	e015      	b.n	80037c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a2:	d00a      	beq.n	80037ba <I2C_ITError+0x7a>
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b60      	cmp	r3, #96	; 0x60
 80037a8:	d007      	beq.n	80037ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ce:	d162      	bne.n	8003896 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d020      	beq.n	8003830 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	4a6a      	ldr	r2, [pc, #424]	; (800399c <I2C_ITError+0x25c>)
 80037f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe f845 	bl	800188a <HAL_DMA_Abort_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8089 	beq.w	800391a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800382a:	4610      	mov	r0, r2
 800382c:	4798      	blx	r3
 800382e:	e074      	b.n	800391a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	4a59      	ldr	r2, [pc, #356]	; (800399c <I2C_ITError+0x25c>)
 8003836:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe f824 	bl	800188a <HAL_DMA_Abort_IT>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d068      	beq.n	800391a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d10b      	bne.n	800386e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003890:	4610      	mov	r0, r2
 8003892:	4798      	blx	r3
 8003894:	e041      	b.n	800391a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b60      	cmp	r3, #96	; 0x60
 80038a0:	d125      	bne.n	80038ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d10b      	bne.n	80038d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fe ff5b 	bl	80027a2 <HAL_I2C_AbortCpltCallback>
 80038ec:	e015      	b.n	800391a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d10b      	bne.n	8003914 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fe ff3a 	bl	800278e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003956:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b04      	cmp	r3, #4
 800396a:	d113      	bne.n	8003994 <I2C_ITError+0x254>
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b28      	cmp	r3, #40	; 0x28
 8003970:	d110      	bne.n	8003994 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <I2C_ITError+0x260>)
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe fedf 	bl	8002752 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	080039a5 	.word	0x080039a5
 80039a0:	ffff0000 	.word	0xffff0000

080039a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039be:	4b4b      	ldr	r3, [pc, #300]	; (8003aec <I2C_DMAAbort+0x148>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	08db      	lsrs	r3, r3, #3
 80039c4:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <I2C_DMAAbort+0x14c>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	0a1a      	lsrs	r2, r3, #8
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00da      	lsls	r2, r3, #3
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80039ea:	e00a      	b.n	8003a02 <I2C_DMAAbort+0x5e>
    }
    count--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a00:	d0ea      	beq.n	80039d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	2200      	movs	r2, #0
 8003a10:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	2200      	movs	r2, #0
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2200      	movs	r2, #0
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	2200      	movs	r2, #0
 8003a46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	2200      	movs	r2, #0
 8003a56:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b60      	cmp	r3, #96	; 0x60
 8003a72:	d10e      	bne.n	8003a92 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7fe fe89 	bl	80027a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a90:	e027      	b.n	8003ae2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a98:	2b28      	cmp	r3, #40	; 0x28
 8003a9a:	d117      	bne.n	8003acc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2228      	movs	r2, #40	; 0x28
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003aca:	e007      	b.n	8003adc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003adc:	6978      	ldr	r0, [r7, #20]
 8003ade:	f7fe fe56 	bl	800278e <HAL_I2C_ErrorCallback>
}
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000000 	.word	0x20000000
 8003af0:	14f8b589 	.word	0x14f8b589

08003af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b04:	e025      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d021      	beq.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fd fd9f 	bl	8001650 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d116      	bne.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e023      	b.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10d      	bne.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4013      	ands	r3, r2
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	e00c      	b.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4013      	ands	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf0c      	ite	eq
 8003b8a:	2301      	moveq	r3, #1
 8003b8c:	2300      	movne	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d0b6      	beq.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	08db      	lsrs	r3, r3, #3
 8003bb6:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	0a1a      	lsrs	r2, r3, #8
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d107      	bne.n	8003be2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f043 0220 	orr.w	r2, r3, #32
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e008      	b.n	8003bf4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf0:	d0e9      	beq.n	8003bc6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	20000000 	.word	0x20000000
 8003c04:	14f8b589 	.word	0x14f8b589

08003c08 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c18:	d103      	bne.n	8003c22 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c20:	e007      	b.n	8003c32 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c2a:	d102      	bne.n	8003c32 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2208      	movs	r2, #8
 8003c30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	4a0f      	ldr	r2, [pc, #60]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c54:	6453      	str	r3, [r2, #68]	; 0x44
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800

08003c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_I2C_MspInit+0x94>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d133      	bne.n	8003d1a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_I2C_MspInit+0x98>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_I2C_MspInit+0x98>)
 8003cbc:	f043 0320 	orr.w	r3, r3, #32
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_I2C_MspInit+0x98>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cd2:	2312      	movs	r3, #18
 8003cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003cde:	2304      	movs	r3, #4
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ce2:	f107 0314 	add.w	r3, r7, #20
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4810      	ldr	r0, [pc, #64]	; (8003d2c <HAL_I2C_MspInit+0x9c>)
 8003cea:	f7fd fdff 	bl	80018ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_I2C_MspInit+0x98>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <HAL_I2C_MspInit+0x98>)
 8003cf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_I2C_MspInit+0x98>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	2021      	movs	r0, #33	; 0x21
 8003d10:	f7fd fd85 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003d14:	2021      	movs	r0, #33	; 0x21
 8003d16:	f7fd fd9e 	bl	8001856 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003d1a:	bf00      	nop
 8003d1c:	3728      	adds	r7, #40	; 0x28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40005800 	.word	0x40005800
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40021400 	.word	0x40021400

08003d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_UART_MspInit+0x84>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d12c      	bne.n	8003dac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <HAL_UART_MspInit+0x88>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_UART_MspInit+0x88>)
 8003d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d60:	6413      	str	r3, [r2, #64]	; 0x40
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_UART_MspInit+0x88>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HAL_UART_MspInit+0x88>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <HAL_UART_MspInit+0x88>)
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <HAL_UART_MspInit+0x88>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d90:	2302      	movs	r3, #2
 8003d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d9c:	2307      	movs	r3, #7
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	4619      	mov	r1, r3
 8003da6:	4805      	ldr	r0, [pc, #20]	; (8003dbc <HAL_UART_MspInit+0x8c>)
 8003da8:	f7fd fda0 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003dac:	bf00      	nop
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40004800 	.word	0x40004800
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020c00 	.word	0x40020c00

08003dc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_PWREx_EnableOverDrive+0x94>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dec:	f7fd fc30 	bl	8001650 <HAL_GetTick>
 8003df0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003df2:	e009      	b.n	8003e08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003df4:	f7fd fc2c 	bl	8001650 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e02:	d901      	bls.n	8003e08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e01f      	b.n	8003e48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e08:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d1ee      	bne.n	8003df4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e16:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e1c:	f7fd fc18 	bl	8001650 <HAL_GetTick>
 8003e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e22:	e009      	b.n	8003e38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e24:	f7fd fc14 	bl	8001650 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e32:	d901      	bls.n	8003e38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e007      	b.n	8003e48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e44:	d1ee      	bne.n	8003e24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	420e0040 	.word	0x420e0040
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	420e0044 	.word	0x420e0044

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e267      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d075      	beq.n	8003f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e7e:	4b88      	ldr	r3, [pc, #544]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d00c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8a:	4b85      	ldr	r3, [pc, #532]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d112      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e96:	4b82      	ldr	r3, [pc, #520]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea2:	d10b      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	4b7e      	ldr	r3, [pc, #504]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05b      	beq.n	8003f68 <HAL_RCC_OscConfig+0x108>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d157      	bne.n	8003f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e242      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x74>
 8003ec6:	4b76      	ldr	r3, [pc, #472]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a75      	ldr	r2, [pc, #468]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e01d      	b.n	8003f10 <HAL_RCC_OscConfig+0xb0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x98>
 8003ede:	4b70      	ldr	r3, [pc, #448]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6f      	ldr	r2, [pc, #444]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b6d      	ldr	r3, [pc, #436]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6c      	ldr	r2, [pc, #432]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCC_OscConfig+0xb0>
 8003ef8:	4b69      	ldr	r3, [pc, #420]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a68      	ldr	r2, [pc, #416]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b66      	ldr	r3, [pc, #408]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a65      	ldr	r2, [pc, #404]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fd fb9a 	bl	8001650 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f20:	f7fd fb96 	bl	8001650 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e207      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b5b      	ldr	r3, [pc, #364]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0xc0>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fd fb86 	bl	8001650 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fd fb82 	bl	8001650 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1f3      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5a:	4b51      	ldr	r3, [pc, #324]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0xe8>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d063      	beq.n	800403e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f76:	4b4a      	ldr	r3, [pc, #296]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f82:	4b47      	ldr	r3, [pc, #284]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d11c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8e:	4b44      	ldr	r3, [pc, #272]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d116      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9a:	4b41      	ldr	r3, [pc, #260]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x152>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e1c7      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4937      	ldr	r1, [pc, #220]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc6:	e03a      	b.n	800403e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd0:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <HAL_RCC_OscConfig+0x244>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7fd fb3b 	bl	8001650 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fde:	f7fd fb37 	bl	8001650 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1a8      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffc:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4925      	ldr	r1, [pc, #148]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]
 8004010:	e015      	b.n	800403e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_RCC_OscConfig+0x244>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd fb1a 	bl	8001650 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004020:	f7fd fb16 	bl	8001650 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e187      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d036      	beq.n	80040b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d016      	beq.n	8004080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <HAL_RCC_OscConfig+0x248>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd fafa 	bl	8001650 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004060:	f7fd faf6 	bl	8001650 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e167      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCC_OscConfig+0x240>)
 8004074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x200>
 800407e:	e01b      	b.n	80040b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_RCC_OscConfig+0x248>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004086:	f7fd fae3 	bl	8001650 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408c:	e00e      	b.n	80040ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408e:	f7fd fadf 	bl	8001650 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d907      	bls.n	80040ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e150      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	42470000 	.word	0x42470000
 80040a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ac:	4b88      	ldr	r3, [pc, #544]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1ea      	bne.n	800408e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8097 	beq.w	80041f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ca:	4b81      	ldr	r3, [pc, #516]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	4b7d      	ldr	r3, [pc, #500]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4a7c      	ldr	r2, [pc, #496]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6413      	str	r3, [r2, #64]	; 0x40
 80040e6:	4b7a      	ldr	r3, [pc, #488]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	4b77      	ldr	r3, [pc, #476]	; (80042d4 <HAL_RCC_OscConfig+0x474>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d118      	bne.n	8004134 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004102:	4b74      	ldr	r3, [pc, #464]	; (80042d4 <HAL_RCC_OscConfig+0x474>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a73      	ldr	r2, [pc, #460]	; (80042d4 <HAL_RCC_OscConfig+0x474>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410e:	f7fd fa9f 	bl	8001650 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004116:	f7fd fa9b 	bl	8001650 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e10c      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004128:	4b6a      	ldr	r3, [pc, #424]	; (80042d4 <HAL_RCC_OscConfig+0x474>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x2ea>
 800413c:	4b64      	ldr	r3, [pc, #400]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a63      	ldr	r2, [pc, #396]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
 8004148:	e01c      	b.n	8004184 <HAL_RCC_OscConfig+0x324>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b05      	cmp	r3, #5
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x30c>
 8004152:	4b5f      	ldr	r3, [pc, #380]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4a5e      	ldr	r2, [pc, #376]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004158:	f043 0304 	orr.w	r3, r3, #4
 800415c:	6713      	str	r3, [r2, #112]	; 0x70
 800415e:	4b5c      	ldr	r3, [pc, #368]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	4a5b      	ldr	r2, [pc, #364]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6713      	str	r3, [r2, #112]	; 0x70
 800416a:	e00b      	b.n	8004184 <HAL_RCC_OscConfig+0x324>
 800416c:	4b58      	ldr	r3, [pc, #352]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a57      	ldr	r2, [pc, #348]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
 8004178:	4b55      	ldr	r3, [pc, #340]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	4a54      	ldr	r2, [pc, #336]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 800417e:	f023 0304 	bic.w	r3, r3, #4
 8004182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d015      	beq.n	80041b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd fa60 	bl	8001650 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004192:	e00a      	b.n	80041aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fd fa5c 	bl	8001650 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0cb      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041aa:	4b49      	ldr	r3, [pc, #292]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0ee      	beq.n	8004194 <HAL_RCC_OscConfig+0x334>
 80041b6:	e014      	b.n	80041e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b8:	f7fd fa4a 	bl	8001650 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fd fa46 	bl	8001650 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e0b5      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d6:	4b3e      	ldr	r3, [pc, #248]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1ee      	bne.n	80041c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e8:	4b39      	ldr	r3, [pc, #228]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	4a38      	ldr	r2, [pc, #224]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80041ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80a1 	beq.w	8004340 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041fe:	4b34      	ldr	r3, [pc, #208]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b08      	cmp	r3, #8
 8004208:	d05c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d141      	bne.n	8004296 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCC_OscConfig+0x478>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fd fa1a 	bl	8001650 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004220:	f7fd fa16 	bl	8001650 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e087      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	3b01      	subs	r3, #1
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	491b      	ldr	r1, [pc, #108]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004268:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <HAL_RCC_OscConfig+0x478>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fd f9ef 	bl	8001650 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004276:	f7fd f9eb 	bl	8001650 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e05c      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x416>
 8004294:	e054      	b.n	8004340 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <HAL_RCC_OscConfig+0x478>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fd f9d8 	bl	8001650 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fd f9d4 	bl	8001650 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e045      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_RCC_OscConfig+0x470>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x444>
 80042c2:	e03d      	b.n	8004340 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e038      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40007000 	.word	0x40007000
 80042d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042dc:	4b1b      	ldr	r3, [pc, #108]	; (800434c <HAL_RCC_OscConfig+0x4ec>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d028      	beq.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d121      	bne.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d11a      	bne.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800430c:	4013      	ands	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004314:	4293      	cmp	r3, r2
 8004316:	d111      	bne.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	3b01      	subs	r3, #1
 8004326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d107      	bne.n	800433c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800

08004350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0cc      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004364:	4b68      	ldr	r3, [pc, #416]	; (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d90c      	bls.n	800438c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b65      	ldr	r3, [pc, #404]	; (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b63      	ldr	r3, [pc, #396]	; (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0b8      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d020      	beq.n	80043da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a4:	4b59      	ldr	r3, [pc, #356]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4a58      	ldr	r2, [pc, #352]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043bc:	4b53      	ldr	r3, [pc, #332]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4a52      	ldr	r2, [pc, #328]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c8:	4b50      	ldr	r3, [pc, #320]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	494d      	ldr	r1, [pc, #308]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d044      	beq.n	8004470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	4b47      	ldr	r3, [pc, #284]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d119      	bne.n	800442e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e07f      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d003      	beq.n	800440e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440a:	2b03      	cmp	r3, #3
 800440c:	d107      	bne.n	800441e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440e:	4b3f      	ldr	r3, [pc, #252]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e06f      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441e:	4b3b      	ldr	r3, [pc, #236]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e067      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800442e:	4b37      	ldr	r3, [pc, #220]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 0203 	bic.w	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4934      	ldr	r1, [pc, #208]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004440:	f7fd f906 	bl	8001650 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004446:	e00a      	b.n	800445e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004448:	f7fd f902 	bl	8001650 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	; 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e04f      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	4b2b      	ldr	r3, [pc, #172]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 020c 	and.w	r2, r3, #12
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	429a      	cmp	r2, r3
 800446e:	d1eb      	bne.n	8004448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004470:	4b25      	ldr	r3, [pc, #148]	; (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d20c      	bcs.n	8004498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b22      	ldr	r3, [pc, #136]	; (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e032      	b.n	80044fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a4:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4916      	ldr	r1, [pc, #88]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044c2:	4b12      	ldr	r3, [pc, #72]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	490e      	ldr	r1, [pc, #56]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044d6:	f000 f821 	bl	800451c <HAL_RCC_GetSysClockFreq>
 80044da:	4602      	mov	r2, r0
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	490a      	ldr	r1, [pc, #40]	; (8004510 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	5ccb      	ldrb	r3, [r1, r3]
 80044ea:	fa22 f303 	lsr.w	r3, r2, r3
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_RCC_ClockConfig+0x1c8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fd f866 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023c00 	.word	0x40023c00
 800450c:	40023800 	.word	0x40023800
 8004510:	080058d8 	.word	0x080058d8
 8004514:	20000000 	.word	0x20000000
 8004518:	20000010 	.word	0x20000010

0800451c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b094      	sub	sp, #80	; 0x50
 8004522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	647b      	str	r3, [r7, #68]	; 0x44
 8004528:	2300      	movs	r3, #0
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452c:	2300      	movs	r3, #0
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004534:	4b79      	ldr	r3, [pc, #484]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b08      	cmp	r3, #8
 800453e:	d00d      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x40>
 8004540:	2b08      	cmp	r3, #8
 8004542:	f200 80e1 	bhi.w	8004708 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x34>
 800454a:	2b04      	cmp	r3, #4
 800454c:	d003      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x3a>
 800454e:	e0db      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004550:	4b73      	ldr	r3, [pc, #460]	; (8004720 <HAL_RCC_GetSysClockFreq+0x204>)
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004554:	e0db      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004556:	4b73      	ldr	r3, [pc, #460]	; (8004724 <HAL_RCC_GetSysClockFreq+0x208>)
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800455a:	e0d8      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800455c:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004564:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004566:	4b6d      	ldr	r3, [pc, #436]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d063      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004572:	4b6a      	ldr	r3, [pc, #424]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	2200      	movs	r2, #0
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
 800457c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
 8004586:	2300      	movs	r3, #0
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
 800458a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800458e:	4622      	mov	r2, r4
 8004590:	462b      	mov	r3, r5
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	0159      	lsls	r1, r3, #5
 800459c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a0:	0150      	lsls	r0, r2, #5
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4621      	mov	r1, r4
 80045a8:	1a51      	subs	r1, r2, r1
 80045aa:	6139      	str	r1, [r7, #16]
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb63 0301 	sbc.w	r3, r3, r1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045c0:	4659      	mov	r1, fp
 80045c2:	018b      	lsls	r3, r1, #6
 80045c4:	4651      	mov	r1, sl
 80045c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ca:	4651      	mov	r1, sl
 80045cc:	018a      	lsls	r2, r1, #6
 80045ce:	4651      	mov	r1, sl
 80045d0:	ebb2 0801 	subs.w	r8, r2, r1
 80045d4:	4659      	mov	r1, fp
 80045d6:	eb63 0901 	sbc.w	r9, r3, r1
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ee:	4690      	mov	r8, r2
 80045f0:	4699      	mov	r9, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	eb18 0303 	adds.w	r3, r8, r3
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	462b      	mov	r3, r5
 80045fc:	eb49 0303 	adc.w	r3, r9, r3
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800460e:	4629      	mov	r1, r5
 8004610:	024b      	lsls	r3, r1, #9
 8004612:	4621      	mov	r1, r4
 8004614:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004618:	4621      	mov	r1, r4
 800461a:	024a      	lsls	r2, r1, #9
 800461c:	4610      	mov	r0, r2
 800461e:	4619      	mov	r1, r3
 8004620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004622:	2200      	movs	r2, #0
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
 8004626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800462c:	f7fc fa06 	bl	8000a3c <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4613      	mov	r3, r2
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	e058      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463a:	4b38      	ldr	r3, [pc, #224]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	2200      	movs	r2, #0
 8004642:	4618      	mov	r0, r3
 8004644:	4611      	mov	r1, r2
 8004646:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	2300      	movs	r3, #0
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
 8004650:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	f04f 0000 	mov.w	r0, #0
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	0159      	lsls	r1, r3, #5
 8004662:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004666:	0150      	lsls	r0, r2, #5
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4641      	mov	r1, r8
 800466e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004672:	4649      	mov	r1, r9
 8004674:	eb63 0b01 	sbc.w	fp, r3, r1
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004684:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004688:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800468c:	ebb2 040a 	subs.w	r4, r2, sl
 8004690:	eb63 050b 	sbc.w	r5, r3, fp
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	00eb      	lsls	r3, r5, #3
 800469e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046a2:	00e2      	lsls	r2, r4, #3
 80046a4:	4614      	mov	r4, r2
 80046a6:	461d      	mov	r5, r3
 80046a8:	4643      	mov	r3, r8
 80046aa:	18e3      	adds	r3, r4, r3
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	464b      	mov	r3, r9
 80046b0:	eb45 0303 	adc.w	r3, r5, r3
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046c2:	4629      	mov	r1, r5
 80046c4:	028b      	lsls	r3, r1, #10
 80046c6:	4621      	mov	r1, r4
 80046c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046cc:	4621      	mov	r1, r4
 80046ce:	028a      	lsls	r2, r1, #10
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d6:	2200      	movs	r2, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	61fa      	str	r2, [r7, #28]
 80046dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e0:	f7fc f9ac 	bl	8000a3c <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4613      	mov	r3, r2
 80046ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	3301      	adds	r3, #1
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004706:	e002      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_GetSysClockFreq+0x204>)
 800470a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800470c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004710:	4618      	mov	r0, r3
 8004712:	3750      	adds	r7, #80	; 0x50
 8004714:	46bd      	mov	sp, r7
 8004716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00f42400 	.word	0x00f42400
 8004724:	007a1200 	.word	0x007a1200

08004728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <HAL_RCC_GetHCLKFreq+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000000 	.word	0x20000000

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004744:	f7ff fff0 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	; (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	080058e8 	.word	0x080058e8

08004768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800476c:	f7ff ffdc 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0b5b      	lsrs	r3, r3, #13
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	; (800478c <HAL_RCC_GetPCLK2Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	080058e8 	.word	0x080058e8

08004790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e03f      	b.n	8004822 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff faba 	bl	8003d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	; 0x24
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f929 	bl	8004a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b08a      	sub	sp, #40	; 0x28
 800482e:	af02      	add	r7, sp, #8
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b20      	cmp	r3, #32
 8004848:	d17c      	bne.n	8004944 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_UART_Transmit+0x2c>
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e075      	b.n	8004946 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_UART_Transmit+0x3e>
 8004864:	2302      	movs	r3, #2
 8004866:	e06e      	b.n	8004946 <HAL_UART_Transmit+0x11c>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2221      	movs	r2, #33	; 0x21
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800487e:	f7fc fee7 	bl	8001650 <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004898:	d108      	bne.n	80048ac <HAL_UART_Transmit+0x82>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e003      	b.n	80048b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048bc:	e02a      	b.n	8004914 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2200      	movs	r2, #0
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f840 	bl	800494e <UART_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e036      	b.n	8004946 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	3302      	adds	r3, #2
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e007      	b.n	8004906 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3301      	adds	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1cf      	bne.n	80048be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2200      	movs	r2, #0
 8004926:	2140      	movs	r1, #64	; 0x40
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f810 	bl	800494e <UART_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e006      	b.n	8004946 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	e000      	b.n	8004946 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004944:	2302      	movs	r3, #2
  }
}
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b090      	sub	sp, #64	; 0x40
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	4613      	mov	r3, r2
 800495c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495e:	e050      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d04c      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <UART_WaitOnFlagUntilTimeout+0x30>
 800496e:	f7fc fe6f 	bl	8001650 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800497a:	429a      	cmp	r2, r3
 800497c:	d241      	bcs.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800499e:	637a      	str	r2, [r7, #52]	; 0x34
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	613b      	str	r3, [r7, #16]
   return(result);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049d2:	623a      	str	r2, [r7, #32]
 80049d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	69f9      	ldr	r1, [r7, #28]
 80049d8:	6a3a      	ldr	r2, [r7, #32]
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	61bb      	str	r3, [r7, #24]
   return(result);
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e00f      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d09f      	beq.n	8004960 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3740      	adds	r7, #64	; 0x40
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a30:	b0c0      	sub	sp, #256	; 0x100
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	68d9      	ldr	r1, [r3, #12]
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	ea40 0301 	orr.w	r3, r0, r1
 8004a54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a84:	f021 010c 	bic.w	r1, r1, #12
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a92:	430b      	orrs	r3, r1
 8004a94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	6999      	ldr	r1, [r3, #24]
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	ea40 0301 	orr.w	r3, r0, r1
 8004ab2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b8f      	ldr	r3, [pc, #572]	; (8004cf8 <UART_SetConfig+0x2cc>)
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d005      	beq.n	8004acc <UART_SetConfig+0xa0>
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b8d      	ldr	r3, [pc, #564]	; (8004cfc <UART_SetConfig+0x2d0>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d104      	bne.n	8004ad6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004acc:	f7ff fe4c 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 8004ad0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ad4:	e003      	b.n	8004ade <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ad6:	f7ff fe33 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8004ada:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae8:	f040 810c 	bne.w	8004d04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004af6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004afa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004afe:	4622      	mov	r2, r4
 8004b00:	462b      	mov	r3, r5
 8004b02:	1891      	adds	r1, r2, r2
 8004b04:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b06:	415b      	adcs	r3, r3
 8004b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b0e:	4621      	mov	r1, r4
 8004b10:	eb12 0801 	adds.w	r8, r2, r1
 8004b14:	4629      	mov	r1, r5
 8004b16:	eb43 0901 	adc.w	r9, r3, r1
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b2e:	4690      	mov	r8, r2
 8004b30:	4699      	mov	r9, r3
 8004b32:	4623      	mov	r3, r4
 8004b34:	eb18 0303 	adds.w	r3, r8, r3
 8004b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	eb49 0303 	adc.w	r3, r9, r3
 8004b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	18db      	adds	r3, r3, r3
 8004b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b60:	4613      	mov	r3, r2
 8004b62:	eb42 0303 	adc.w	r3, r2, r3
 8004b66:	657b      	str	r3, [r7, #84]	; 0x54
 8004b68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b70:	f7fb ff64 	bl	8000a3c <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4b61      	ldr	r3, [pc, #388]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	011c      	lsls	r4, r3, #4
 8004b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b94:	4642      	mov	r2, r8
 8004b96:	464b      	mov	r3, r9
 8004b98:	1891      	adds	r1, r2, r2
 8004b9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b9c:	415b      	adcs	r3, r3
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	eb12 0a01 	adds.w	sl, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb43 0b01 	adc.w	fp, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bc4:	4692      	mov	sl, r2
 8004bc6:	469b      	mov	fp, r3
 8004bc8:	4643      	mov	r3, r8
 8004bca:	eb1a 0303 	adds.w	r3, sl, r3
 8004bce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004be8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	18db      	adds	r3, r3, r3
 8004bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	eb42 0303 	adc.w	r3, r2, r3
 8004bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004bfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c06:	f7fb ff19 	bl	8000a3c <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004c12:	fba3 2301 	umull	r2, r3, r3, r1
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2264      	movs	r2, #100	; 0x64
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	1acb      	subs	r3, r1, r3
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c26:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004c28:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c34:	441c      	add	r4, r3
 8004c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c48:	4642      	mov	r2, r8
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c50:	415b      	adcs	r3, r3
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c58:	4641      	mov	r1, r8
 8004c5a:	1851      	adds	r1, r2, r1
 8004c5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c5e:	4649      	mov	r1, r9
 8004c60:	414b      	adcs	r3, r1
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c70:	4659      	mov	r1, fp
 8004c72:	00cb      	lsls	r3, r1, #3
 8004c74:	4651      	mov	r1, sl
 8004c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	00ca      	lsls	r2, r1, #3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	4603      	mov	r3, r0
 8004c84:	4642      	mov	r2, r8
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	460a      	mov	r2, r1
 8004c90:	eb42 0303 	adc.w	r3, r2, r3
 8004c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ca4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ca8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cac:	460b      	mov	r3, r1
 8004cae:	18db      	adds	r3, r3, r3
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	eb42 0303 	adc.w	r3, r2, r3
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cc2:	f7fb febb 	bl	8000a3c <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	2164      	movs	r1, #100	; 0x64
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	3332      	adds	r3, #50	; 0x32
 8004cde:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f003 0207 	and.w	r2, r3, #7
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4422      	add	r2, r4
 8004cf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cf4:	e105      	b.n	8004f02 <UART_SetConfig+0x4d6>
 8004cf6:	bf00      	nop
 8004cf8:	40011000 	.word	0x40011000
 8004cfc:	40011400 	.word	0x40011400
 8004d00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d16:	4642      	mov	r2, r8
 8004d18:	464b      	mov	r3, r9
 8004d1a:	1891      	adds	r1, r2, r2
 8004d1c:	6239      	str	r1, [r7, #32]
 8004d1e:	415b      	adcs	r3, r3
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
 8004d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d26:	4641      	mov	r1, r8
 8004d28:	1854      	adds	r4, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb43 0501 	adc.w	r5, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	00eb      	lsls	r3, r5, #3
 8004d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d3e:	00e2      	lsls	r2, r4, #3
 8004d40:	4614      	mov	r4, r2
 8004d42:	461d      	mov	r5, r3
 8004d44:	4643      	mov	r3, r8
 8004d46:	18e3      	adds	r3, r4, r3
 8004d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	eb45 0303 	adc.w	r3, r5, r3
 8004d52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d72:	4629      	mov	r1, r5
 8004d74:	008b      	lsls	r3, r1, #2
 8004d76:	4621      	mov	r1, r4
 8004d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	008a      	lsls	r2, r1, #2
 8004d80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d84:	f7fb fe5a 	bl	8000a3c <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4b60      	ldr	r3, [pc, #384]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	011c      	lsls	r4, r3, #4
 8004d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004da0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004da4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004da8:	4642      	mov	r2, r8
 8004daa:	464b      	mov	r3, r9
 8004dac:	1891      	adds	r1, r2, r2
 8004dae:	61b9      	str	r1, [r7, #24]
 8004db0:	415b      	adcs	r3, r3
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db8:	4641      	mov	r1, r8
 8004dba:	1851      	adds	r1, r2, r1
 8004dbc:	6139      	str	r1, [r7, #16]
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	414b      	adcs	r3, r1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	00cb      	lsls	r3, r1, #3
 8004dd4:	4651      	mov	r1, sl
 8004dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dda:	4651      	mov	r1, sl
 8004ddc:	00ca      	lsls	r2, r1, #3
 8004dde:	4610      	mov	r0, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	4642      	mov	r2, r8
 8004de6:	189b      	adds	r3, r3, r2
 8004de8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dec:	464b      	mov	r3, r9
 8004dee:	460a      	mov	r2, r1
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e10:	4649      	mov	r1, r9
 8004e12:	008b      	lsls	r3, r1, #2
 8004e14:	4641      	mov	r1, r8
 8004e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1a:	4641      	mov	r1, r8
 8004e1c:	008a      	lsls	r2, r1, #2
 8004e1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e22:	f7fb fe0b 	bl	8000a3c <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4b39      	ldr	r3, [pc, #228]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	2164      	movs	r1, #100	; 0x64
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	3332      	adds	r3, #50	; 0x32
 8004e3e:	4a34      	ldr	r2, [pc, #208]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e4a:	441c      	add	r4, r3
 8004e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e50:	2200      	movs	r2, #0
 8004e52:	673b      	str	r3, [r7, #112]	; 0x70
 8004e54:	677a      	str	r2, [r7, #116]	; 0x74
 8004e56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e5a:	4642      	mov	r2, r8
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e6a:	4641      	mov	r1, r8
 8004e6c:	1851      	adds	r1, r2, r1
 8004e6e:	6039      	str	r1, [r7, #0]
 8004e70:	4649      	mov	r1, r9
 8004e72:	414b      	adcs	r3, r1
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e82:	4659      	mov	r1, fp
 8004e84:	00cb      	lsls	r3, r1, #3
 8004e86:	4651      	mov	r1, sl
 8004e88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	00ca      	lsls	r2, r1, #3
 8004e90:	4610      	mov	r0, r2
 8004e92:	4619      	mov	r1, r3
 8004e94:	4603      	mov	r3, r0
 8004e96:	4642      	mov	r2, r8
 8004e98:	189b      	adds	r3, r3, r2
 8004e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	460a      	mov	r2, r1
 8004ea0:	eb42 0303 	adc.w	r3, r2, r3
 8004ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	663b      	str	r3, [r7, #96]	; 0x60
 8004eb0:	667a      	str	r2, [r7, #100]	; 0x64
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	008b      	lsls	r3, r1, #2
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec8:	4641      	mov	r1, r8
 8004eca:	008a      	lsls	r2, r1, #2
 8004ecc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ed0:	f7fb fdb4 	bl	8000a3c <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004eda:	fba3 1302 	umull	r1, r3, r3, r2
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2164      	movs	r1, #100	; 0x64
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	3332      	adds	r3, #50	; 0x32
 8004eec:	4a08      	ldr	r2, [pc, #32]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	f003 020f 	and.w	r2, r3, #15
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4422      	add	r2, r4
 8004f00:	609a      	str	r2, [r3, #8]
}
 8004f02:	bf00      	nop
 8004f04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f0e:	bf00      	nop
 8004f10:	51eb851f 	.word	0x51eb851f

08004f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f18:	e7fe      	b.n	8004f18 <NMI_Handler+0x4>

08004f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f1e:	e7fe      	b.n	8004f1e <HardFault_Handler+0x4>

08004f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f24:	e7fe      	b.n	8004f24 <MemManage_Handler+0x4>

08004f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f26:	b480      	push	{r7}
 8004f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f2a:	e7fe      	b.n	8004f2a <BusFault_Handler+0x4>

08004f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f30:	e7fe      	b.n	8004f30 <UsageFault_Handler+0x4>

08004f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f32:	b480      	push	{r7}
 8004f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f60:	f7fc fb62 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f64:	bf00      	nop
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c);
 8004f6c:	4802      	ldr	r0, [pc, #8]	; (8004f78 <I2C2_EV_IRQHandler+0x10>)
 8004f6e:	f7fd fa49 	bl	8002404 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */
  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	200000a8 	.word	0x200000a8

08004f7c <DEV_TimerInit>:
 * @param
 * 		timer		[I] - Timer definition
 * 		duration 	[I] - Duration of counter
 * @retval ret - Return API value
 */
retType DEV_TimerInit(ttimer_t * timer, tick_t duration){
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]

	retType ret = API_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	73fb      	strb	r3, [r7, #15]

	if(timer == 0 || duration <= 0 || duration > MAX_DELAY) return API_ERROR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <DEV_TimerInit+0x24>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d004      	beq.n	8004fa0 <DEV_TimerInit+0x24>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f247 5230 	movw	r2, #30000	; 0x7530
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <DEV_TimerInit+0x28>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e009      	b.n	8004fb8 <DEV_TimerInit+0x3c>
	//Initialize Timer variables
	timer->startTime = 0;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
	timer->duration = duration;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	605a      	str	r2, [r3, #4]
	timer->running = false;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	721a      	strb	r2, [r3, #8]
	return ret;
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <DEV_TimerRead>:
 * @param
 * 		timer		[I] - Timer definition
 * 		done	 	[O] - Time expired
 * @retval ret - Return API value
 */
retType DEV_TimerRead(ttimer_t * timer, bool_t * done){
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]

	retType ret = API_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
	uint32_t time = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]

	if(timer->running == false){	//Initialization check
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7a1b      	ldrb	r3, [r3, #8]
 8004fda:	f083 0301 	eor.w	r3, r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <DEV_TimerRead+0x32>
		timer->startTime = HAL_GetTick();
 8004fe4:	f7fc fb34 	bl	8001650 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
		timer->running = true;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	721a      	strb	r2, [r3, #8]
 8004ff4:	e013      	b.n	800501e <DEV_TimerRead+0x5a>
	}
	else{
		time = HAL_GetTick() - (timer->startTime);		//Get difference
 8004ff6:	f7fc fb2b 	bl	8001650 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	60bb      	str	r3, [r7, #8]
		if(time >= timer->duration){		//Time control
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d307      	bcc.n	800501e <DEV_TimerRead+0x5a>
			timer->running = false;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	721a      	strb	r2, [r3, #8]
			*done = true;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
			return ret;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	e003      	b.n	8005026 <DEV_TimerRead+0x62>
		}
	}
	*done = false;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
	return ret;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <DEV_UARTSendChar>:
 * @brief  UART Write a Char
 * @param
 * 		pstring		[I] - Data Buffer
 * @retval ret - Return API value
 */
retType DEV_UARTSendChar(uint8_t * pstring){
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]

	//Send a char via UART
	ret |= HAL_UART_Transmit(&huart, pstring, 1, TIME_OUT);
 800503c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005040:	2201      	movs	r2, #1
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4806      	ldr	r0, [pc, #24]	; (8005060 <DEV_UARTSendChar+0x30>)
 8005046:	f7ff fbf0 	bl	800482a <HAL_UART_Transmit>
 800504a:	4603      	mov	r3, r0
 800504c:	461a      	mov	r2, r3
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	4313      	orrs	r3, r2
 8005052:	73fb      	strb	r3, [r7, #15]

	return ret;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000064 	.word	0x20000064

08005064 <DEV_UARTSendStringSize>:
 * @param
 * 		pstring		[I] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType DEV_UARTSendStringSize(uint8_t * pstring, uint16_t size){
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	807b      	strh	r3, [r7, #2]

	retType ret = API_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]

	if(size == 0) return API_ERROR;
 8005074:	887b      	ldrh	r3, [r7, #2]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <DEV_UARTSendStringSize+0x1a>
 800507a:	2301      	movs	r3, #1
 800507c:	e00c      	b.n	8005098 <DEV_UARTSendStringSize+0x34>
	//Send a word via UART
	ret |= HAL_UART_Transmit(&huart, pstring, size, TIME_OUT);
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4806      	ldr	r0, [pc, #24]	; (80050a0 <DEV_UARTSendStringSize+0x3c>)
 8005088:	f7ff fbcf 	bl	800482a <HAL_UART_Transmit>
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	4313      	orrs	r3, r2
 8005094:	73fb      	strb	r3, [r7, #15]

	return ret;
 8005096:	7bfb      	ldrb	r3, [r7, #15]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000064 	.word	0x20000064

080050a4 <DEV_UARTInit>:
 * @brief  UART Initializer function
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType DEV_UARTInit(void){
 80050a4:	b5b0      	push	{r4, r5, r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	75fb      	strb	r3, [r7, #23]
	uint8_t str[] = "UART INITIALIZED:\n";
 80050ae:	4b1e      	ldr	r3, [pc, #120]	; (8005128 <DEV_UARTInit+0x84>)
 80050b0:	1d3c      	adds	r4, r7, #4
 80050b2:	461d      	mov	r5, r3
 80050b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	8022      	strh	r2, [r4, #0]
 80050be:	3402      	adds	r4, #2
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	7023      	strb	r3, [r4, #0]

	//Define UART variable configuration
	huart.Instance = USARTx;
 80050c4:	4b19      	ldr	r3, [pc, #100]	; (800512c <DEV_UARTInit+0x88>)
 80050c6:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <DEV_UARTInit+0x8c>)
 80050c8:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate= UART_BAUDRATE;
 80050ca:	4b18      	ldr	r3, [pc, #96]	; (800512c <DEV_UARTInit+0x88>)
 80050cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80050d0:	605a      	str	r2, [r3, #4]
	huart.Init.HwFlowCtl = UART_HWFLOWCTL;
 80050d2:	4b16      	ldr	r3, [pc, #88]	; (800512c <DEV_UARTInit+0x88>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE;
 80050d8:	4b14      	ldr	r3, [pc, #80]	; (800512c <DEV_UARTInit+0x88>)
 80050da:	220c      	movs	r2, #12
 80050dc:	615a      	str	r2, [r3, #20]
	huart.Init.OverSampling = UART_OVERSAMPLING;
 80050de:	4b13      	ldr	r3, [pc, #76]	; (800512c <DEV_UARTInit+0x88>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	61da      	str	r2, [r3, #28]
	huart.Init.Parity = UART_PARITY;
 80050e4:	4b11      	ldr	r3, [pc, #68]	; (800512c <DEV_UARTInit+0x88>)
 80050e6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80050ea:	611a      	str	r2, [r3, #16]
	huart.Init.StopBits = UART_STOPBITS;
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <DEV_UARTInit+0x88>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	60da      	str	r2, [r3, #12]
	huart.Init.WordLength = UART_WORDLENGTH;
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <DEV_UARTInit+0x88>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	609a      	str	r2, [r3, #8]

	//Set configuration and initialize
	ret |= HAL_UART_Init(&huart);
 80050f8:	480c      	ldr	r0, [pc, #48]	; (800512c <DEV_UARTInit+0x88>)
 80050fa:	f7ff fb49 	bl	8004790 <HAL_UART_Init>
 80050fe:	4603      	mov	r3, r0
 8005100:	461a      	mov	r2, r3
 8005102:	7dfb      	ldrb	r3, [r7, #23]
 8005104:	4313      	orrs	r3, r2
 8005106:	75fb      	strb	r3, [r7, #23]
	if(ret != API_OK) return ret;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <DEV_UARTInit+0x6e>
 800510e:	7dfb      	ldrb	r3, [r7, #23]
 8005110:	e005      	b.n	800511e <DEV_UARTInit+0x7a>
	//Print a little msg with UART state
	else DEV_UARTSendStringSize(str, sizeof(str));
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	2113      	movs	r1, #19
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ffa4 	bl	8005064 <DEV_UARTSendStringSize>
	return ret;
 800511c:	7dfb      	ldrb	r3, [r7, #23]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bdb0      	pop	{r4, r5, r7, pc}
 8005126:	bf00      	nop
 8005128:	080058c4 	.word	0x080058c4
 800512c:	20000064 	.word	0x20000064
 8005130:	40004800 	.word	0x40004800

08005134 <APP_MPU9250Write>:
 * 		addr2write	[I] - MPU Slave address
 * 		pdata 		[I] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType APP_MPU9250Write(uint8_t addr2write, uint8_t * pdata, uint16_t size){
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	6039      	str	r1, [r7, #0]
 800513e:	71fb      	strb	r3, [r7, #7]
 8005140:	4613      	mov	r3, r2
 8005142:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	73fb      	strb	r3, [r7, #15]

	if(size <= 0) ret = API_ERROR;
 8005148:	88bb      	ldrh	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <APP_MPU9250Write+0x1e>
 800514e:	2301      	movs	r3, #1
 8005150:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <APP_MPU9250Write+0x28>
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	e016      	b.n	800518a <APP_MPU9250Write+0x56>

	//Write a word on MPU9250 device
	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2write, 1);
 800515c:	1dfb      	adds	r3, r7, #7
 800515e:	2201      	movs	r2, #1
 8005160:	4619      	mov	r1, r3
 8005162:	20d0      	movs	r0, #208	; 0xd0
 8005164:	f000 fa50 	bl	8005608 <DEV_I2CWrite>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	4313      	orrs	r3, r2
 8005170:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, pdata, size);
 8005172:	88bb      	ldrh	r3, [r7, #4]
 8005174:	461a      	mov	r2, r3
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	20d0      	movs	r0, #208	; 0xd0
 800517a:	f000 fa45 	bl	8005608 <DEV_I2CWrite>
 800517e:	4603      	mov	r3, r0
 8005180:	461a      	mov	r2, r3
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	4313      	orrs	r3, r2
 8005186:	73fb      	strb	r3, [r7, #15]

	return ret;
 8005188:	7bfb      	ldrb	r3, [r7, #15]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <APP_MPU9250Read>:
 * 		addr2read	[I] - MPU Slave address
 * 		pdata 		[O] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType APP_MPU9250Read(uint8_t addr2read, uint8_t * pdata, uint16_t size){
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	4603      	mov	r3, r0
 800519a:	6039      	str	r1, [r7, #0]
 800519c:	71fb      	strb	r3, [r7, #7]
 800519e:	4613      	mov	r3, r2
 80051a0:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]

	if(size == 0) ret = API_ERROR;
 80051a6:	88bb      	ldrh	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <APP_MPU9250Read+0x1e>
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <APP_MPU9250Read+0x28>
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	e016      	b.n	80051e8 <APP_MPU9250Read+0x56>

	//Read a word from MPU9250 device
	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2read, 1);
 80051ba:	1dfb      	adds	r3, r7, #7
 80051bc:	2201      	movs	r2, #1
 80051be:	4619      	mov	r1, r3
 80051c0:	20d0      	movs	r0, #208	; 0xd0
 80051c2:	f000 fa21 	bl	8005608 <DEV_I2CWrite>
 80051c6:	4603      	mov	r3, r0
 80051c8:	461a      	mov	r2, r3
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CRead(MPU9250_SLAVEADDR, pdata, size);
 80051d0:	88bb      	ldrh	r3, [r7, #4]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	20d0      	movs	r0, #208	; 0xd0
 80051d8:	f000 fa46 	bl	8005668 <DEV_I2CRead>
 80051dc:	4603      	mov	r3, r0
 80051de:	461a      	mov	r2, r3
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	73fb      	strb	r3, [r7, #15]

	return ret;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]

}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <APP_MPU9250Init>:
 * @brief  MPU9250 Initializer function
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType APP_MPU9250Init(void){
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	71fb      	strb	r3, [r7, #7]

	//Check if MPU communication via I2C is ready
	ret |= DEV_I2CIsReady(MPU9250_SLAVEADDR);
 80051fa:	20d0      	movs	r0, #208	; 0xd0
 80051fc:	f000 fa64 	bl	80056c8 <DEV_I2CIsReady>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	4313      	orrs	r3, r2
 8005208:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <APP_MPU9250Init+0x24>
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	e04b      	b.n	80052ac <APP_MPU9250Init+0xbc>

	//Set MPU configuration
	//General configuration: CLKSEL
	ret |= APP_MPU9250Write(MPU9250_PWR_MGMT_1, (uint8_t*)0x0, 1);
 8005214:	2201      	movs	r2, #1
 8005216:	2100      	movs	r1, #0
 8005218:	206b      	movs	r0, #107	; 0x6b
 800521a:	f7ff ff8b 	bl	8005134 <APP_MPU9250Write>
 800521e:	4603      	mov	r3, r0
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	4313      	orrs	r3, r2
 8005226:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <APP_MPU9250Init+0x42>
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	e03c      	b.n	80052ac <APP_MPU9250Init+0xbc>
	ret |= APP_MPU9250Write(MPU9250_PWR_MGMT_1, (uint8_t*)0x1, 1);
 8005232:	2201      	movs	r2, #1
 8005234:	2101      	movs	r1, #1
 8005236:	206b      	movs	r0, #107	; 0x6b
 8005238:	f7ff ff7c 	bl	8005134 <APP_MPU9250Write>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	4313      	orrs	r3, r2
 8005244:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <APP_MPU9250Init+0x60>
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	e02d      	b.n	80052ac <APP_MPU9250Init+0xbc>
	//Gyroscope configuration: Scale
	ret |= APP_MPU9250Write(MPU9250_GYRO_CONFIG, (uint8_t*)0x18, 1);
 8005250:	2201      	movs	r2, #1
 8005252:	2118      	movs	r1, #24
 8005254:	201b      	movs	r0, #27
 8005256:	f7ff ff6d 	bl	8005134 <APP_MPU9250Write>
 800525a:	4603      	mov	r3, r0
 800525c:	461a      	mov	r2, r3
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	4313      	orrs	r3, r2
 8005262:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_CONFIG_AD, (uint8_t*)0x7, 1);
 8005264:	2201      	movs	r2, #1
 8005266:	2107      	movs	r1, #7
 8005268:	201a      	movs	r0, #26
 800526a:	f7ff ff63 	bl	8005134 <APP_MPU9250Write>
 800526e:	4603      	mov	r3, r0
 8005270:	461a      	mov	r2, r3
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	4313      	orrs	r3, r2
 8005276:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <APP_MPU9250Init+0x92>
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	e014      	b.n	80052ac <APP_MPU9250Init+0xbc>
	//Accelerometer configuration: Scale
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_1, (uint8_t*)0x18, 1);
 8005282:	2201      	movs	r2, #1
 8005284:	2118      	movs	r1, #24
 8005286:	201c      	movs	r0, #28
 8005288:	f7ff ff54 	bl	8005134 <APP_MPU9250Write>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	4313      	orrs	r3, r2
 8005294:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_2, (uint8_t*)0x7, 1);
 8005296:	2201      	movs	r2, #1
 8005298:	2107      	movs	r1, #7
 800529a:	201d      	movs	r0, #29
 800529c:	f7ff ff4a 	bl	8005134 <APP_MPU9250Write>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	71fb      	strb	r3, [r7, #7]

	return ret;
 80052aa:	79fb      	ldrb	r3, [r7, #7]

}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <APP_MPU9250ReadGyro>:
 * @brief  MPU9250 Read Gyroscope value per Axis
 * @param
 * 		gyro [O] - Gyroscope structure with axes
 * @retval ret - Return API value
 */
retType APP_MPU9250ReadGyro(axis_t * gyro){
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_x = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_y = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	817b      	strh	r3, [r7, #10]
	uint16_t aux_z = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	813b      	strh	r3, [r7, #8]

	//Read Gyroscope values for Axes X, Y and Z
	ret |= APP_MPU9250Read(MPU9250_GYRO_XOUT_H, (uint8_t*)&aux_x, 2);
 80052cc:	f107 030c 	add.w	r3, r7, #12
 80052d0:	2202      	movs	r2, #2
 80052d2:	4619      	mov	r1, r3
 80052d4:	2043      	movs	r0, #67	; 0x43
 80052d6:	f7ff ff5c 	bl	8005192 <APP_MPU9250Read>
 80052da:	4603      	mov	r3, r0
 80052dc:	461a      	mov	r2, r3
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_YOUT_H, (uint8_t*)&aux_y, 2);
 80052e4:	f107 030a 	add.w	r3, r7, #10
 80052e8:	2202      	movs	r2, #2
 80052ea:	4619      	mov	r1, r3
 80052ec:	2045      	movs	r0, #69	; 0x45
 80052ee:	f7ff ff50 	bl	8005192 <APP_MPU9250Read>
 80052f2:	4603      	mov	r3, r0
 80052f4:	461a      	mov	r2, r3
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_ZOUT_H, (uint8_t*)&aux_z, 2);
 80052fc:	f107 0308 	add.w	r3, r7, #8
 8005300:	2202      	movs	r2, #2
 8005302:	4619      	mov	r1, r3
 8005304:	2047      	movs	r0, #71	; 0x47
 8005306:	f7ff ff44 	bl	8005192 <APP_MPU9250Read>
 800530a:	4603      	mov	r3, r0
 800530c:	461a      	mov	r2, r3
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	4313      	orrs	r3, r2
 8005312:	73fb      	strb	r3, [r7, #15]

	//Convert to human scale Gyroscope values for Axes X, Y and Z
	ret |= gyro_convert(aux_x, &(gyro->x));
 8005314:	89bb      	ldrh	r3, [r7, #12]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f89e 	bl	800545c <gyro_convert>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	4313      	orrs	r3, r2
 8005328:	73fb      	strb	r3, [r7, #15]
	ret |= gyro_convert(aux_y, &(gyro->y));
 800532a:	897a      	ldrh	r2, [r7, #10]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f000 f892 	bl	800545c <gyro_convert>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	4313      	orrs	r3, r2
 8005340:	73fb      	strb	r3, [r7, #15]
	ret |= gyro_convert(aux_z, &(gyro->z));
 8005342:	893a      	ldrh	r2, [r7, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3308      	adds	r3, #8
 8005348:	4619      	mov	r1, r3
 800534a:	4610      	mov	r0, r2
 800534c:	f000 f886 	bl	800545c <gyro_convert>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	4313      	orrs	r3, r2
 8005358:	73fb      	strb	r3, [r7, #15]
	return ret;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <APP_MPU9250ReadAccl>:
 * @brief  MPU9250 Read Accelerometer value per Axis
 * @param
 * 		accl [O] - Accelerometer structure with axes
 * @retval ret - Return API value
 */
retType APP_MPU9250ReadAccl(axis_t * accl){
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_x = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_y = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	817b      	strh	r3, [r7, #10]
	uint16_t aux_z = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	813b      	strh	r3, [r7, #8]

	//Read Accelerometer values for Axes X, Y and Z
	ret |= APP_MPU9250Read(MPU9250_ACCEL_XOUT_H, (uint8_t*)&aux_x, 2);
 800537c:	f107 030c 	add.w	r3, r7, #12
 8005380:	2202      	movs	r2, #2
 8005382:	4619      	mov	r1, r3
 8005384:	203b      	movs	r0, #59	; 0x3b
 8005386:	f7ff ff04 	bl	8005192 <APP_MPU9250Read>
 800538a:	4603      	mov	r3, r0
 800538c:	461a      	mov	r2, r3
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	4313      	orrs	r3, r2
 8005392:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_YOUT_H, (uint8_t*)&aux_y, 2);
 8005394:	f107 030a 	add.w	r3, r7, #10
 8005398:	2202      	movs	r2, #2
 800539a:	4619      	mov	r1, r3
 800539c:	203d      	movs	r0, #61	; 0x3d
 800539e:	f7ff fef8 	bl	8005192 <APP_MPU9250Read>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_ZOUT_H, (uint8_t*)&aux_z, 2);
 80053ac:	f107 0308 	add.w	r3, r7, #8
 80053b0:	2202      	movs	r2, #2
 80053b2:	4619      	mov	r1, r3
 80053b4:	203f      	movs	r0, #63	; 0x3f
 80053b6:	f7ff feec 	bl	8005192 <APP_MPU9250Read>
 80053ba:	4603      	mov	r3, r0
 80053bc:	461a      	mov	r2, r3
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	73fb      	strb	r3, [r7, #15]

	//Convert to human scale Accelerometer values for Axes X, Y and Z
	ret |= accl_convert(aux_x, &(accl->x));
 80053c4:	89bb      	ldrh	r3, [r7, #12]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f878 	bl	80054c0 <accl_convert>
 80053d0:	4603      	mov	r3, r0
 80053d2:	461a      	mov	r2, r3
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	73fb      	strb	r3, [r7, #15]
	ret |= accl_convert(aux_y, &(accl->y));
 80053da:	897a      	ldrh	r2, [r7, #10]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f000 f86c 	bl	80054c0 <accl_convert>
 80053e8:	4603      	mov	r3, r0
 80053ea:	461a      	mov	r2, r3
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	73fb      	strb	r3, [r7, #15]
	ret |= accl_convert(aux_z, &(accl->z));
 80053f2:	893a      	ldrh	r2, [r7, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3308      	adds	r3, #8
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f000 f860 	bl	80054c0 <accl_convert>
 8005400:	4603      	mov	r3, r0
 8005402:	461a      	mov	r2, r3
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	4313      	orrs	r3, r2
 8005408:	73fb      	strb	r3, [r7, #15]
	return ret;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <APP_MPU9250ReadTemp>:
 * @brief  MPU9250 Read Temperature value
 * @param
 * 		temp [O] - Temperature value
 * @retval ret - Return API value
 */
retType APP_MPU9250ReadTemp(float * temp){
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_temp = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	81bb      	strh	r3, [r7, #12]

	//Read Temperature value
	ret |= APP_MPU9250Read(MPU9250_TEMP_OUT_H, (uint8_t*)&aux_temp, 2);
 8005424:	f107 030c 	add.w	r3, r7, #12
 8005428:	2202      	movs	r2, #2
 800542a:	4619      	mov	r1, r3
 800542c:	2041      	movs	r0, #65	; 0x41
 800542e:	f7ff feb0 	bl	8005192 <APP_MPU9250Read>
 8005432:	4603      	mov	r3, r0
 8005434:	461a      	mov	r2, r3
 8005436:	7bfb      	ldrb	r3, [r7, #15]
 8005438:	4313      	orrs	r3, r2
 800543a:	73fb      	strb	r3, [r7, #15]

	//Convert to human scale Temperature value
	ret |= temp_convert(aux_temp, temp);
 800543c:	89bb      	ldrh	r3, [r7, #12]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f871 	bl	8005528 <temp_convert>
 8005446:	4603      	mov	r3, r0
 8005448:	461a      	mov	r2, r3
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	4313      	orrs	r3, r2
 800544e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <gyro_convert>:
 * @param
 * 		axis  [I] - Axis value to convert
 * 		paxis [O] - Value converted
 * @retval ret - Return API value
 */
static retType gyro_convert(uint16_t axis, float * paxis){
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	6039      	str	r1, [r7, #0]
 8005466:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	73fb      	strb	r3, [r7, #15]
	uint8_t aux = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	73bb      	strb	r3, [r7, #14]

	//Fix big/little endian
	aux = (axis&(0xff00))>>8;
 8005470:	88fb      	ldrh	r3, [r7, #6]
 8005472:	0a1b      	lsrs	r3, r3, #8
 8005474:	b29b      	uxth	r3, r3
 8005476:	73bb      	strb	r3, [r7, #14]
	axis = (axis&0x00ff)<<8;
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	80fb      	strh	r3, [r7, #6]
	axis |= aux;
 800547e:	7bbb      	ldrb	r3, [r7, #14]
 8005480:	b29a      	uxth	r2, r3
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	4313      	orrs	r3, r2
 8005486:	80fb      	strh	r3, [r7, #6]
	*paxis = axis*GYRO_SCALE;
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fb f80a 	bl	80004a4 <__aeabi_i2d>
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <gyro_convert+0x5c>)
 8005496:	f7fb f86f 	bl	8000578 <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	f7fb fa7b 	bl	800099c <__aeabi_d2f>
 80054a6:	4602      	mov	r2, r0
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	601a      	str	r2, [r3, #0]
	return ret;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	3faf4000 	.word	0x3faf4000
 80054bc:	00000000 	.word	0x00000000

080054c0 <accl_convert>:
 * @param
 * 		axis  [I] - Axis value to convert
 * 		paxis [O] - Value converted
 * @retval ret - Return API value
 */
static retType accl_convert(uint16_t axis, float * paxis){
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	6039      	str	r1, [r7, #0]
 80054ca:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]
	uint8_t aux = 0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	73bb      	strb	r3, [r7, #14]

	//Fix big/little endian
	aux = (axis&(0xff00))>>8;
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	b29b      	uxth	r3, r3
 80054da:	73bb      	strb	r3, [r7, #14]
	axis = (axis&0x00ff)<<8;
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	80fb      	strh	r3, [r7, #6]
	axis |= aux;
 80054e2:	7bbb      	ldrb	r3, [r7, #14]
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	80fb      	strh	r3, [r7, #6]
	*paxis = axis*ACCL_SCALE;
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fa ffd8 	bl	80004a4 <__aeabi_i2d>
 80054f4:	a30a      	add	r3, pc, #40	; (adr r3, 8005520 <accl_convert+0x60>)
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f7fb f83d 	bl	8000578 <__aeabi_dmul>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4610      	mov	r0, r2
 8005504:	4619      	mov	r1, r3
 8005506:	f7fb fa49 	bl	800099c <__aeabi_d2f>
 800550a:	4602      	mov	r2, r0
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	601a      	str	r2, [r3, #0]
	return ret;
 8005510:	7bfb      	ldrb	r3, [r7, #15]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	f3af 8000 	nop.w
 8005520:	51eb851f 	.word	0x51eb851f
 8005524:	3f739eb8 	.word	0x3f739eb8

08005528 <temp_convert>:
 * @param
 * 		temp  [I] - Temperature value to convert
 * 		ptemp [O] - Value converted
 * @retval ret - Return API value
 */
static retType temp_convert(uint16_t temp, float * ptemp){
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	6039      	str	r1, [r7, #0]
 8005532:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	73fb      	strb	r3, [r7, #15]
	uint8_t aux = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	73bb      	strb	r3, [r7, #14]

	//Fix big/little endian
	aux = (temp&(0xff00))>>8;
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	0a1b      	lsrs	r3, r3, #8
 8005540:	b29b      	uxth	r3, r3
 8005542:	73bb      	strb	r3, [r7, #14]
	temp = (temp&0x00ff)<<8;
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	80fb      	strh	r3, [r7, #6]
	temp |= aux;
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	b29a      	uxth	r2, r3
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	4313      	orrs	r3, r2
 8005552:	80fb      	strh	r3, [r7, #6]

	//Apply scale and conversion to °C
	*ptemp = (temp - 0.0)/321.0 + 21.0;
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	4618      	mov	r0, r3
 8005558:	f7fa ffa4 	bl	80004a4 <__aeabi_i2d>
 800555c:	a30f      	add	r3, pc, #60	; (adr r3, 800559c <temp_convert+0x74>)
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f7fb f933 	bl	80007cc <__aeabi_ddiv>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <temp_convert+0x70>)
 8005574:	f7fa fe4a 	bl	800020c <__adddf3>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4610      	mov	r0, r2
 800557e:	4619      	mov	r1, r3
 8005580:	f7fb fa0c 	bl	800099c <__aeabi_d2f>
 8005584:	4602      	mov	r2, r0
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	601a      	str	r2, [r3, #0]
	return ret;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	f3af 8000 	nop.w
 8005598:	40350000 	.word	0x40350000
 800559c:	00000000 	.word	0x00000000
 80055a0:	40741000 	.word	0x40741000

080055a4 <DEV_I2CInit>:
 * @brief  I2C Initialization
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType DEV_I2CInit(void){
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0

	//Define I2C variable configuration
	retType ret = API_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	71fb      	strb	r3, [r7, #7]
	hi2c.Instance = I2C2;
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <DEV_I2CInit+0x58>)
 80055b0:	4a13      	ldr	r2, [pc, #76]	; (8005600 <DEV_I2CInit+0x5c>)
 80055b2:	601a      	str	r2, [r3, #0]
	hi2c.Init.ClockSpeed = I2C_CLOCKSPEED;
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <DEV_I2CInit+0x58>)
 80055b6:	4a13      	ldr	r2, [pc, #76]	; (8005604 <DEV_I2CInit+0x60>)
 80055b8:	605a      	str	r2, [r3, #4]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055ba:	4b10      	ldr	r3, [pc, #64]	; (80055fc <DEV_I2CInit+0x58>)
 80055bc:	2200      	movs	r2, #0
 80055be:	609a      	str	r2, [r3, #8]
	hi2c.Init.OwnAddress1 = I2C_OWNADDRESS1;
 80055c0:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <DEV_I2CInit+0x58>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	60da      	str	r2, [r3, #12]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <DEV_I2CInit+0x58>)
 80055c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055cc:	611a      	str	r2, [r3, #16]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <DEV_I2CInit+0x58>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	615a      	str	r2, [r3, #20]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055d4:	4b09      	ldr	r3, [pc, #36]	; (80055fc <DEV_I2CInit+0x58>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	61da      	str	r2, [r3, #28]
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <DEV_I2CInit+0x58>)
 80055dc:	2200      	movs	r2, #0
 80055de:	621a      	str	r2, [r3, #32]

	//Set configuration and initialize
	ret |= HAL_I2C_Init(&hi2c);
 80055e0:	4806      	ldr	r0, [pc, #24]	; (80055fc <DEV_I2CInit+0x58>)
 80055e2:	f7fc fb49 	bl	8001c78 <HAL_I2C_Init>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	71fb      	strb	r3, [r7, #7]
	return ret;
 80055f0:	79fb      	ldrb	r3, [r7, #7]

}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	200000a8 	.word	0x200000a8
 8005600:	40005800 	.word	0x40005800
 8005604:	000186a0 	.word	0x000186a0

08005608 <DEV_I2CWrite>:
 * 		slave_addr	[I] - I2C device Slave address
 * 		pdata 		[I] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType DEV_I2CWrite(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	80fb      	strh	r3, [r7, #6]
 8005614:	4613      	mov	r3, r2
 8005616:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]

	if(slave_addr==0 || size == 0) return API_ERROR;
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <DEV_I2CWrite+0x20>
 8005622:	88bb      	ldrh	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <DEV_I2CWrite+0x24>
 8005628:	2301      	movs	r3, #1
 800562a:	e017      	b.n	800565c <DEV_I2CWrite+0x54>
	//Send a word via I2C
	ret |= HAL_I2C_Master_Transmit_IT(&hi2c, slave_addr, pdata, size);
 800562c:	88bb      	ldrh	r3, [r7, #4]
 800562e:	88f9      	ldrh	r1, [r7, #6]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	480c      	ldr	r0, [pc, #48]	; (8005664 <DEV_I2CWrite+0x5c>)
 8005634:	f7fc fc64 	bl	8001f00 <HAL_I2C_Master_Transmit_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	461a      	mov	r2, r3
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	4313      	orrs	r3, r2
 8005640:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <DEV_I2CWrite+0x44>
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	e007      	b.n	800565c <DEV_I2CWrite+0x54>

	//Wait for IT. Here you can do anything or just wait
	while(hi2c.State != HAL_I2C_STATE_READY){/**we can do anything*/}
 800564c:	bf00      	nop
 800564e:	4b05      	ldr	r3, [pc, #20]	; (8005664 <DEV_I2CWrite+0x5c>)
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b20      	cmp	r3, #32
 8005658:	d1f9      	bne.n	800564e <DEV_I2CWrite+0x46>
	return ret;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	200000a8 	.word	0x200000a8

08005668 <DEV_I2CRead>:
 * 		slave_addr	[I] - I2C device Slave address
 * 		pdata 		[O] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType DEV_I2CRead(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	6039      	str	r1, [r7, #0]
 8005672:	80fb      	strh	r3, [r7, #6]
 8005674:	4613      	mov	r3, r2
 8005676:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	73fb      	strb	r3, [r7, #15]

	if(slave_addr==0 || size == 0) return API_ERROR;
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <DEV_I2CRead+0x20>
 8005682:	88bb      	ldrh	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <DEV_I2CRead+0x24>
 8005688:	2301      	movs	r3, #1
 800568a:	e017      	b.n	80056bc <DEV_I2CRead+0x54>
	//Receive a word via I2C
	ret |= HAL_I2C_Master_Receive_IT(&hi2c, slave_addr, pdata, size);
 800568c:	88bb      	ldrh	r3, [r7, #4]
 800568e:	88f9      	ldrh	r1, [r7, #6]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	480c      	ldr	r0, [pc, #48]	; (80056c4 <DEV_I2CRead+0x5c>)
 8005694:	f7fc fcda 	bl	800204c <HAL_I2C_Master_Receive_IT>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	4313      	orrs	r3, r2
 80056a0:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <DEV_I2CRead+0x44>
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	e007      	b.n	80056bc <DEV_I2CRead+0x54>

	//Wait for IT. Here you can do anything or just wait
	while(hi2c.State != HAL_I2C_STATE_READY){/**we can do anything*/}
 80056ac:	bf00      	nop
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <DEV_I2CRead+0x5c>)
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d1f9      	bne.n	80056ae <DEV_I2CRead+0x46>
	return ret;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	200000a8 	.word	0x200000a8

080056c8 <DEV_I2CIsReady>:
 * @brief  I2C Checker if communication is ready
 * @param
 * 		slave_addr	[I] - I2C device Slave address
 * @retval ret - Return API value
 */
retType DEV_I2CIsReady(uint16_t slave_addr){
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]

	if(slave_addr==0) return API_ERROR;
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <DEV_I2CIsReady+0x18>
 80056dc:	2301      	movs	r3, #1
 80056de:	e009      	b.n	80056f4 <DEV_I2CIsReady+0x2c>
	//Check if I2C communication is ready
	ret = HAL_I2C_IsDeviceReady(&hi2c, slave_addr, 2, 1000);
 80056e0:	88f9      	ldrh	r1, [r7, #6]
 80056e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056e6:	2202      	movs	r2, #2
 80056e8:	4804      	ldr	r0, [pc, #16]	; (80056fc <DEV_I2CIsReady+0x34>)
 80056ea:	f7fc fd5d 	bl	80021a8 <HAL_I2C_IsDeviceReady>
 80056ee:	4603      	mov	r3, r0
 80056f0:	73fb      	strb	r3, [r7, #15]
	return ret;
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	200000a8 	.word	0x200000a8

08005700 <__libc_init_array>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4d0d      	ldr	r5, [pc, #52]	; (8005738 <__libc_init_array+0x38>)
 8005704:	4c0d      	ldr	r4, [pc, #52]	; (800573c <__libc_init_array+0x3c>)
 8005706:	1b64      	subs	r4, r4, r5
 8005708:	10a4      	asrs	r4, r4, #2
 800570a:	2600      	movs	r6, #0
 800570c:	42a6      	cmp	r6, r4
 800570e:	d109      	bne.n	8005724 <__libc_init_array+0x24>
 8005710:	4d0b      	ldr	r5, [pc, #44]	; (8005740 <__libc_init_array+0x40>)
 8005712:	4c0c      	ldr	r4, [pc, #48]	; (8005744 <__libc_init_array+0x44>)
 8005714:	f000 f88c 	bl	8005830 <_init>
 8005718:	1b64      	subs	r4, r4, r5
 800571a:	10a4      	asrs	r4, r4, #2
 800571c:	2600      	movs	r6, #0
 800571e:	42a6      	cmp	r6, r4
 8005720:	d105      	bne.n	800572e <__libc_init_array+0x2e>
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	f855 3b04 	ldr.w	r3, [r5], #4
 8005728:	4798      	blx	r3
 800572a:	3601      	adds	r6, #1
 800572c:	e7ee      	b.n	800570c <__libc_init_array+0xc>
 800572e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005732:	4798      	blx	r3
 8005734:	3601      	adds	r6, #1
 8005736:	e7f2      	b.n	800571e <__libc_init_array+0x1e>
 8005738:	08005924 	.word	0x08005924
 800573c:	08005924 	.word	0x08005924
 8005740:	08005924 	.word	0x08005924
 8005744:	08005928 	.word	0x08005928

08005748 <__itoa>:
 8005748:	1e93      	subs	r3, r2, #2
 800574a:	2b22      	cmp	r3, #34	; 0x22
 800574c:	b510      	push	{r4, lr}
 800574e:	460c      	mov	r4, r1
 8005750:	d904      	bls.n	800575c <__itoa+0x14>
 8005752:	2300      	movs	r3, #0
 8005754:	700b      	strb	r3, [r1, #0]
 8005756:	461c      	mov	r4, r3
 8005758:	4620      	mov	r0, r4
 800575a:	bd10      	pop	{r4, pc}
 800575c:	2a0a      	cmp	r2, #10
 800575e:	d109      	bne.n	8005774 <__itoa+0x2c>
 8005760:	2800      	cmp	r0, #0
 8005762:	da07      	bge.n	8005774 <__itoa+0x2c>
 8005764:	232d      	movs	r3, #45	; 0x2d
 8005766:	700b      	strb	r3, [r1, #0]
 8005768:	4240      	negs	r0, r0
 800576a:	2101      	movs	r1, #1
 800576c:	4421      	add	r1, r4
 800576e:	f000 f81d 	bl	80057ac <__utoa>
 8005772:	e7f1      	b.n	8005758 <__itoa+0x10>
 8005774:	2100      	movs	r1, #0
 8005776:	e7f9      	b.n	800576c <__itoa+0x24>

08005778 <itoa>:
 8005778:	f7ff bfe6 	b.w	8005748 <__itoa>

0800577c <memset>:
 800577c:	4402      	add	r2, r0
 800577e:	4603      	mov	r3, r0
 8005780:	4293      	cmp	r3, r2
 8005782:	d100      	bne.n	8005786 <memset+0xa>
 8005784:	4770      	bx	lr
 8005786:	f803 1b01 	strb.w	r1, [r3], #1
 800578a:	e7f9      	b.n	8005780 <memset+0x4>

0800578c <strcat>:
 800578c:	b510      	push	{r4, lr}
 800578e:	4602      	mov	r2, r0
 8005790:	7814      	ldrb	r4, [r2, #0]
 8005792:	4613      	mov	r3, r2
 8005794:	3201      	adds	r2, #1
 8005796:	2c00      	cmp	r4, #0
 8005798:	d1fa      	bne.n	8005790 <strcat+0x4>
 800579a:	3b01      	subs	r3, #1
 800579c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	d1f9      	bne.n	800579c <strcat+0x10>
 80057a8:	bd10      	pop	{r4, pc}
	...

080057ac <__utoa>:
 80057ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ae:	4c1f      	ldr	r4, [pc, #124]	; (800582c <__utoa+0x80>)
 80057b0:	b08b      	sub	sp, #44	; 0x2c
 80057b2:	4605      	mov	r5, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	466e      	mov	r6, sp
 80057b8:	f104 0c20 	add.w	ip, r4, #32
 80057bc:	6820      	ldr	r0, [r4, #0]
 80057be:	6861      	ldr	r1, [r4, #4]
 80057c0:	4637      	mov	r7, r6
 80057c2:	c703      	stmia	r7!, {r0, r1}
 80057c4:	3408      	adds	r4, #8
 80057c6:	4564      	cmp	r4, ip
 80057c8:	463e      	mov	r6, r7
 80057ca:	d1f7      	bne.n	80057bc <__utoa+0x10>
 80057cc:	7921      	ldrb	r1, [r4, #4]
 80057ce:	7139      	strb	r1, [r7, #4]
 80057d0:	1e91      	subs	r1, r2, #2
 80057d2:	6820      	ldr	r0, [r4, #0]
 80057d4:	6038      	str	r0, [r7, #0]
 80057d6:	2922      	cmp	r1, #34	; 0x22
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	d904      	bls.n	80057e8 <__utoa+0x3c>
 80057de:	7019      	strb	r1, [r3, #0]
 80057e0:	460b      	mov	r3, r1
 80057e2:	4618      	mov	r0, r3
 80057e4:	b00b      	add	sp, #44	; 0x2c
 80057e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e8:	1e58      	subs	r0, r3, #1
 80057ea:	4684      	mov	ip, r0
 80057ec:	fbb5 f7f2 	udiv	r7, r5, r2
 80057f0:	fb02 5617 	mls	r6, r2, r7, r5
 80057f4:	3628      	adds	r6, #40	; 0x28
 80057f6:	446e      	add	r6, sp
 80057f8:	460c      	mov	r4, r1
 80057fa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80057fe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005802:	462e      	mov	r6, r5
 8005804:	42b2      	cmp	r2, r6
 8005806:	f101 0101 	add.w	r1, r1, #1
 800580a:	463d      	mov	r5, r7
 800580c:	d9ee      	bls.n	80057ec <__utoa+0x40>
 800580e:	2200      	movs	r2, #0
 8005810:	545a      	strb	r2, [r3, r1]
 8005812:	1919      	adds	r1, r3, r4
 8005814:	1aa5      	subs	r5, r4, r2
 8005816:	42aa      	cmp	r2, r5
 8005818:	dae3      	bge.n	80057e2 <__utoa+0x36>
 800581a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800581e:	780e      	ldrb	r6, [r1, #0]
 8005820:	7006      	strb	r6, [r0, #0]
 8005822:	3201      	adds	r2, #1
 8005824:	f801 5901 	strb.w	r5, [r1], #-1
 8005828:	e7f4      	b.n	8005814 <__utoa+0x68>
 800582a:	bf00      	nop
 800582c:	080058f6 	.word	0x080058f6

08005830 <_init>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr

0800583c <_fini>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr
