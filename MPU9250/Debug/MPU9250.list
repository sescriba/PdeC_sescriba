
MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c68  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004edc  08004edc  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ee4  08004ee4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee4  08004ee4  00014ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000d8  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d8d4  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000225d  00000000  00000000  0002d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  0002fb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a68  00000000  00000000  000306c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fac  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001091a  00000000  00000000  000560dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5391  00000000  00000000  000669f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013bd87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002dd4  00000000  00000000  0013bdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004dfc 	.word	0x08004dfc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08004dfc 	.word	0x08004dfc

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <APP_SMInit>:
 * @brief  SM Initialization
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType APP_SMInit(void){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]

	states = SM_INIT;
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <APP_SMInit+0x30>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	ret |= DEV_TimerInit(&idle, READ_TIME);
 8000510:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <APP_SMInit+0x34>)
 8000516:	f004 f88d 	bl	8004634 <DEV_TimerInit>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4313      	orrs	r3, r2
 8000522:	71fb      	strb	r3, [r7, #7]
	return ret;
 8000524:	79fb      	ldrb	r3, [r7, #7]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000034 	.word	0x20000034
 8000534:	20000048 	.word	0x20000048

08000538 <APP_SMProccess>:
 * @brief  SM Set and work according current state
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType APP_SMProccess(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 800053e:	2300      	movs	r3, #0
 8000540:	71fb      	strb	r3, [r7, #7]
	bool_t done = false;
 8000542:	2300      	movs	r3, #0
 8000544:	71bb      	strb	r3, [r7, #6]

	switch(states){
 8000546:	4b5b      	ldr	r3, [pc, #364]	; (80006b4 <APP_SMProccess+0x17c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b05      	cmp	r3, #5
 800054c:	f200 80a7 	bhi.w	800069e <APP_SMProccess+0x166>
 8000550:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <APP_SMProccess+0x20>)
 8000552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000556:	bf00      	nop
 8000558:	08000571 	.word	0x08000571
 800055c:	080005d3 	.word	0x080005d3
 8000560:	080005ff 	.word	0x080005ff
 8000564:	0800062b 	.word	0x0800062b
 8000568:	08000657 	.word	0x08000657
 800056c:	0800067b 	.word	0x0800067b
		case SM_INIT:
			ret |= DEV_UARTInit();
 8000570:	f004 f8f4 	bl	800475c <DEV_UARTInit>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4313      	orrs	r3, r2
 800057c:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d003      	beq.n	800058c <APP_SMProccess+0x54>
				states = SM_ERROR;
 8000584:	4b4b      	ldr	r3, [pc, #300]	; (80006b4 <APP_SMProccess+0x17c>)
 8000586:	2206      	movs	r2, #6
 8000588:	701a      	strb	r2, [r3, #0]
				break;
 800058a:	e08e      	b.n	80006aa <APP_SMProccess+0x172>
			}
			ret |= DEV_I2CInit();
 800058c:	f004 fb04 	bl	8004b98 <DEV_I2CInit>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	4313      	orrs	r3, r2
 8000598:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d003      	beq.n	80005a8 <APP_SMProccess+0x70>
				states = SM_ERROR;
 80005a0:	4b44      	ldr	r3, [pc, #272]	; (80006b4 <APP_SMProccess+0x17c>)
 80005a2:	2206      	movs	r2, #6
 80005a4:	701a      	strb	r2, [r3, #0]
				break;
 80005a6:	e080      	b.n	80006aa <APP_SMProccess+0x172>
			}
			ret |= APP_MPU9250Init();
 80005a8:	f004 f97e 	bl	80048a8 <APP_MPU9250Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	71fb      	strb	r3, [r7, #7]
			if(ret == API_OK){
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d106      	bne.n	80005ca <APP_SMProccess+0x92>
				new_state = SM_READGYRO;
 80005bc:	4b3e      	ldr	r3, [pc, #248]	; (80006b8 <APP_SMProccess+0x180>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
				states = SM_IDLE;
 80005c2:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <APP_SMProccess+0x17c>)
 80005c4:	2205      	movs	r2, #5
 80005c6:	701a      	strb	r2, [r3, #0]
			}
			else{
				states = SM_ERROR;
				break;
			}
			break;
 80005c8:	e06f      	b.n	80006aa <APP_SMProccess+0x172>
				states = SM_ERROR;
 80005ca:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <APP_SMProccess+0x17c>)
 80005cc:	2206      	movs	r2, #6
 80005ce:	701a      	strb	r2, [r3, #0]
				break;
 80005d0:	e06b      	b.n	80006aa <APP_SMProccess+0x172>
		case SM_READGYRO:
			ret |= APP_MPU9250ReadGyro(&read_buff.gyro);
 80005d2:	483a      	ldr	r0, [pc, #232]	; (80006bc <APP_SMProccess+0x184>)
 80005d4:	f004 f9ca 	bl	800496c <APP_MPU9250ReadGyro>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4313      	orrs	r3, r2
 80005e0:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <APP_SMProccess+0xb8>
				states = SM_ERROR;
 80005e8:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <APP_SMProccess+0x17c>)
 80005ea:	2206      	movs	r2, #6
 80005ec:	701a      	strb	r2, [r3, #0]
				break;
 80005ee:	e05c      	b.n	80006aa <APP_SMProccess+0x172>
			}
			new_state = SM_READACCL;
 80005f0:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <APP_SMProccess+0x180>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	701a      	strb	r2, [r3, #0]
			states = SM_IDLE;
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <APP_SMProccess+0x17c>)
 80005f8:	2205      	movs	r2, #5
 80005fa:	701a      	strb	r2, [r3, #0]
			break;
 80005fc:	e055      	b.n	80006aa <APP_SMProccess+0x172>
		case SM_READACCL:
			ret |= APP_MPU9250ReadAccl(&read_buff.accl);
 80005fe:	4830      	ldr	r0, [pc, #192]	; (80006c0 <APP_SMProccess+0x188>)
 8000600:	f004 fa0c 	bl	8004a1c <APP_MPU9250ReadAccl>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	4313      	orrs	r3, r2
 800060c:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <APP_SMProccess+0xe4>
				states = SM_ERROR;
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <APP_SMProccess+0x17c>)
 8000616:	2206      	movs	r2, #6
 8000618:	701a      	strb	r2, [r3, #0]
				break;
 800061a:	e046      	b.n	80006aa <APP_SMProccess+0x172>
			}
			new_state = SM_READTEMP;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <APP_SMProccess+0x180>)
 800061e:	2203      	movs	r2, #3
 8000620:	701a      	strb	r2, [r3, #0]
			states = SM_IDLE;
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <APP_SMProccess+0x17c>)
 8000624:	2205      	movs	r2, #5
 8000626:	701a      	strb	r2, [r3, #0]
			break;
 8000628:	e03f      	b.n	80006aa <APP_SMProccess+0x172>
		case SM_READTEMP:
			ret |= APP_MPU9250ReadTemp(&read_buff.temp);
 800062a:	4826      	ldr	r0, [pc, #152]	; (80006c4 <APP_SMProccess+0x18c>)
 800062c:	f004 fa4e 	bl	8004acc <APP_MPU9250ReadTemp>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4313      	orrs	r3, r2
 8000638:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <APP_SMProccess+0x110>
				states = SM_ERROR;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <APP_SMProccess+0x17c>)
 8000642:	2206      	movs	r2, #6
 8000644:	701a      	strb	r2, [r3, #0]
				break;
 8000646:	e030      	b.n	80006aa <APP_SMProccess+0x172>
			}
			new_state = SM_PRINT;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <APP_SMProccess+0x180>)
 800064a:	2204      	movs	r2, #4
 800064c:	701a      	strb	r2, [r3, #0]
			states = SM_IDLE;
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <APP_SMProccess+0x17c>)
 8000650:	2205      	movs	r2, #5
 8000652:	701a      	strb	r2, [r3, #0]
			break;
 8000654:	e029      	b.n	80006aa <APP_SMProccess+0x172>
		case SM_PRINT:
			ret |= print_string(&read_buff);
 8000656:	4819      	ldr	r0, [pc, #100]	; (80006bc <APP_SMProccess+0x184>)
 8000658:	f000 f838 	bl	80006cc <print_string>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4313      	orrs	r3, r2
 8000664:	71fb      	strb	r3, [r7, #7]
			if(ret == API_OK){
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d11b      	bne.n	80006a4 <APP_SMProccess+0x16c>
				new_state = SM_READGYRO;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <APP_SMProccess+0x180>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
				states = SM_IDLE;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <APP_SMProccess+0x17c>)
 8000674:	2205      	movs	r2, #5
 8000676:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000678:	e014      	b.n	80006a4 <APP_SMProccess+0x16c>
		case SM_IDLE:
			ret |= DEV_TimerRead(&idle, &done);
 800067a:	1dbb      	adds	r3, r7, #6
 800067c:	4619      	mov	r1, r3
 800067e:	4812      	ldr	r0, [pc, #72]	; (80006c8 <APP_SMProccess+0x190>)
 8000680:	f003 fffc 	bl	800467c <DEV_TimerRead>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4313      	orrs	r3, r2
 800068c:	71fb      	strb	r3, [r7, #7]
			if(done == true){
 800068e:	79bb      	ldrb	r3, [r7, #6]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d009      	beq.n	80006a8 <APP_SMProccess+0x170>
				states = new_state;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <APP_SMProccess+0x180>)
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <APP_SMProccess+0x17c>)
 800069a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800069c:	e004      	b.n	80006a8 <APP_SMProccess+0x170>
		case SM_ERROR:
		default:
			ret = API_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
			break;
 80006a2:	e002      	b.n	80006aa <APP_SMProccess+0x172>
			break;
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <APP_SMProccess+0x172>
			break;
 80006a8:	bf00      	nop
	}
	return ret;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000034 	.word	0x20000034
 80006b8:	20000035 	.word	0x20000035
 80006bc:	20000038 	.word	0x20000038
 80006c0:	2000003e 	.word	0x2000003e
 80006c4:	20000044 	.word	0x20000044
 80006c8:	20000048 	.word	0x20000048

080006cc <print_string>:
 * @brief  Print a string with MPU9250 information via UART
 * @param
 * 		data	[I] - MPU9250 Data to print
 * @retval ret - Return API value
 */
static retType print_string(MPU9250_t * data){
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b0e0      	sub	sp, #384	; 0x180
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80006d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80006da:	6018      	str	r0, [r3, #0]

	retType ret = API_OK;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
	uint8_t buff[256] = {0};
 80006e2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80006e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	3304      	adds	r3, #4
 80006f0:	22fc      	movs	r2, #252	; 0xfc
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fb27 	bl	8004d48 <memset>
	uint8_t value[5] = {0};
 80006fa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80006fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	711a      	strb	r2, [r3, #4]
	uint8_t str[] = "Data returned: ";
 800070a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800070e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000712:	4aab      	ldr	r2, [pc, #684]	; (80009c0 <print_string+0x2f4>)
 8000714:	461c      	mov	r4, r3
 8000716:	4613      	mov	r3, r2
 8000718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800071a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t str_gyro[] = "\nGyroscope: ";
 800071e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000726:	4aa7      	ldr	r2, [pc, #668]	; (80009c4 <print_string+0x2f8>)
 8000728:	461c      	mov	r4, r3
 800072a:	4613      	mov	r3, r2
 800072c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800072e:	c407      	stmia	r4!, {r0, r1, r2}
 8000730:	7023      	strb	r3, [r4, #0]
	uint8_t str_accl[] = "\nAccelerometer: ";
 8000732:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000736:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800073a:	4aa3      	ldr	r2, [pc, #652]	; (80009c8 <print_string+0x2fc>)
 800073c:	461c      	mov	r4, r3
 800073e:	4615      	mov	r5, r2
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	682b      	ldr	r3, [r5, #0]
 8000746:	7023      	strb	r3, [r4, #0]
	uint8_t str_temp[] = "\nTemperature: ";
 8000748:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800074c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8000750:	4a9e      	ldr	r2, [pc, #632]	; (80009cc <print_string+0x300>)
 8000752:	461c      	mov	r4, r3
 8000754:	4613      	mov	r3, r2
 8000756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000758:	c407      	stmia	r4!, {r0, r1, r2}
 800075a:	8023      	strh	r3, [r4, #0]
 800075c:	3402      	adds	r4, #2
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	7023      	strb	r3, [r4, #0]
	uint8_t str_x[] = "\nAxis X: ";
 8000762:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000766:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800076a:	4a99      	ldr	r2, [pc, #612]	; (80009d0 <print_string+0x304>)
 800076c:	ca07      	ldmia	r2, {r0, r1, r2}
 800076e:	c303      	stmia	r3!, {r0, r1}
 8000770:	801a      	strh	r2, [r3, #0]
	uint8_t str_y[] = "\nAxis Y: ";
 8000772:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000776:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800077a:	4a96      	ldr	r2, [pc, #600]	; (80009d4 <print_string+0x308>)
 800077c:	ca07      	ldmia	r2, {r0, r1, r2}
 800077e:	c303      	stmia	r3!, {r0, r1}
 8000780:	801a      	strh	r2, [r3, #0]
	uint8_t str_z[] = "\nAxis Z: ";
 8000782:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000786:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800078a:	4a93      	ldr	r2, [pc, #588]	; (80009d8 <print_string+0x30c>)
 800078c:	ca07      	ldmia	r2, {r0, r1, r2}
 800078e:	c303      	stmia	r3!, {r0, r1}
 8000790:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	strcat(buff, str);
 8000798:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800079c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fad8 	bl	8004d58 <strcat>
	strcat(buff, str_gyro);
 80007a8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80007ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fad0 	bl	8004d58 <strcat>
	strcat(buff, str_x);
 80007b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 fac8 	bl	8004d58 <strcat>
	itoa(data->gyro.x, value, 10);
 80007c8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80007cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007da:	220a      	movs	r2, #10
 80007dc:	4619      	mov	r1, r3
 80007de:	f004 fab1 	bl	8004d44 <itoa>
	strcat(buff, value);
 80007e2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80007e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 fab3 	bl	8004d58 <strcat>
	strcat(buff, str_y);
 80007f2:	f107 0218 	add.w	r2, r7, #24
 80007f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 faab 	bl	8004d58 <strcat>
	itoa(data->gyro.y, value, 10);
 8000802:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000806:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	885b      	ldrh	r3, [r3, #2]
 800080e:	4618      	mov	r0, r3
 8000810:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000814:	220a      	movs	r2, #10
 8000816:	4619      	mov	r1, r3
 8000818:	f004 fa94 	bl	8004d44 <itoa>
	strcat(buff, value);
 800081c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000820:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fa96 	bl	8004d58 <strcat>
	strcat(buff, str_z);
 800082c:	f107 020c 	add.w	r2, r7, #12
 8000830:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f004 fa8e 	bl	8004d58 <strcat>
	itoa(data->gyro.z, value, 10);
 800083c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000840:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	889b      	ldrh	r3, [r3, #4]
 8000848:	4618      	mov	r0, r3
 800084a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800084e:	220a      	movs	r2, #10
 8000850:	4619      	mov	r1, r3
 8000852:	f004 fa77 	bl	8004d44 <itoa>
	strcat(buff, value);
 8000856:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800085a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f004 fa79 	bl	8004d58 <strcat>

	strcat(buff, str_accl);
 8000866:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800086a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f004 fa71 	bl	8004d58 <strcat>
	strcat(buff, str_x);
 8000876:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800087a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f004 fa69 	bl	8004d58 <strcat>
	itoa(data->accl.x, value, 10);
 8000886:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800088a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	88db      	ldrh	r3, [r3, #6]
 8000892:	4618      	mov	r0, r3
 8000894:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000898:	220a      	movs	r2, #10
 800089a:	4619      	mov	r1, r3
 800089c:	f004 fa52 	bl	8004d44 <itoa>
	strcat(buff, value);
 80008a0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80008a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fa54 	bl	8004d58 <strcat>
	strcat(buff, str_y);
 80008b0:	f107 0218 	add.w	r2, r7, #24
 80008b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fa4c 	bl	8004d58 <strcat>
	itoa(data->accl.y, value, 10);
 80008c0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80008c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	891b      	ldrh	r3, [r3, #8]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008d2:	220a      	movs	r2, #10
 80008d4:	4619      	mov	r1, r3
 80008d6:	f004 fa35 	bl	8004d44 <itoa>
	strcat(buff, value);
 80008da:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80008de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 fa37 	bl	8004d58 <strcat>
	strcat(buff, str_z);
 80008ea:	f107 020c 	add.w	r2, r7, #12
 80008ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fa2f 	bl	8004d58 <strcat>
	itoa(data->accl.z, value, 10);
 80008fa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80008fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	895b      	ldrh	r3, [r3, #10]
 8000906:	4618      	mov	r0, r3
 8000908:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800090c:	220a      	movs	r2, #10
 800090e:	4619      	mov	r1, r3
 8000910:	f004 fa18 	bl	8004d44 <itoa>
	strcat(buff, value);
 8000914:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000918:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f004 fa1a 	bl	8004d58 <strcat>

	strcat(buff, str_temp);
 8000924:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000928:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f004 fa12 	bl	8004d58 <strcat>
	itoa(data->temp, value, 10);
 8000934:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000938:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	899b      	ldrh	r3, [r3, #12]
 8000940:	4618      	mov	r0, r3
 8000942:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000946:	220a      	movs	r2, #10
 8000948:	4619      	mov	r1, r3
 800094a:	f004 f9fb 	bl	8004d44 <itoa>
	strcat(buff, value);
 800094e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000952:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f004 f9fd 	bl	8004d58 <strcat>
	strcat(buff, "*C\n\n");
 800095e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fc42 	bl	80001ec <strlen>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000970:	4413      	add	r3, r2
 8000972:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <print_string+0x310>)
 8000974:	6810      	ldr	r0, [r2, #0]
 8000976:	6018      	str	r0, [r3, #0]
 8000978:	7912      	ldrb	r2, [r2, #4]
 800097a:	711a      	strb	r2, [r3, #4]

	for(i = 0; i<256; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		if(buff[i] == '\0') return ret;
 8000982:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8000986:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800098a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800098e:	5cd3      	ldrb	r3, [r2, r3]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <print_string+0x2ce>
 8000994:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8000998:	e00d      	b.n	80009b6 <print_string+0x2ea>
		DEV_UARTSendChar(&buff[i]);
 800099a:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800099e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80009a2:	4413      	add	r3, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 fe9f 	bl	80046e8 <DEV_UARTSendChar>
	for(i = 0; i<256; i++){
 80009aa:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80009ae:	3301      	adds	r3, #1
 80009b0:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		if(buff[i] == '\0') return ret;
 80009b4:	e7e5      	b.n	8000982 <print_string+0x2b6>
	}
	return ret;
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 80009bc:	46bd      	mov	sp, r7
 80009be:	bdb0      	pop	{r4, r5, r7, pc}
 80009c0:	08004e1c 	.word	0x08004e1c
 80009c4:	08004e2c 	.word	0x08004e2c
 80009c8:	08004e3c 	.word	0x08004e3c
 80009cc:	08004e50 	.word	0x08004e50
 80009d0:	08004e60 	.word	0x08004e60
 80009d4:	08004e6c 	.word	0x08004e6c
 80009d8:	08004e78 	.word	0x08004e78
 80009dc:	08004e14 	.word	0x08004e14

080009e0 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
	retType ret = API_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	71fb      	strb	r3, [r7, #7]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 80009ea:	f000 f927 	bl	8000c3c <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80009ee:	f000 f817 	bl	8000a20 <SystemClock_Config>

	/* Initialize BSP Led for LED1, LED2 and LED3 */
//	BSP_LED_Init(LED1);
	BSP_LED_Init(LED2);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 f8b8 	bl	8000b68 <BSP_LED_Init>
//	/* Initialize BSP BUTTON_USER */
//	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);


	//FSM initialization
	ret |= APP_SMInit();
 80009f8:	f7ff fd82 	bl	8000500 <APP_SMInit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	71fb      	strb	r3, [r7, #7]

	/* Infinite loop */
	while (1)
	{
		//Update FSM
		ret |= APP_SMProccess();
 8000a06:	f7ff fd97 	bl	8000538 <APP_SMProccess>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	71fb      	strb	r3, [r7, #7]
		if(ret != API_OK) Error_Handler();
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0f5      	beq.n	8000a06 <main+0x26>
 8000a1a:	f000 f863 	bl	8000ae4 <Error_Handler>
		ret |= APP_SMProccess();
 8000a1e:	e7f2      	b.n	8000a06 <main+0x26>

08000a20 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <SystemClock_Config+0xbc>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a2b      	ldr	r2, [pc, #172]	; (8000adc <SystemClock_Config+0xbc>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <SystemClock_Config+0xbc>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <SystemClock_Config+0xc0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <SystemClock_Config+0xc0>)
 8000a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <SystemClock_Config+0xc0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a62:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a66:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a72:	2308      	movs	r3, #8
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8000a76:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a80:	2307      	movs	r3, #7
 8000a82:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fd45 	bl	8003518 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8000a94:	f000 f826 	bl	8000ae4 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a98:	f002 fcee 	bl	8003478 <HAL_PWREx_EnableOverDrive>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8000aa2:	f000 f81f 	bl	8000ae4 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000abe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ac2:	2105      	movs	r1, #5
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 ff9f 	bl	8003a08 <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8000ad0:	f000 f808 	bl	8000ae4 <Error_Handler>
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3750      	adds	r7, #80	; 0x50
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 f88d 	bl	8000c08 <BSP_LED_On>
	while (1)
 8000aee:	e7fe      	b.n	8000aee <Error_Handler+0xa>

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b1a:	490e      	ldr	r1, [pc, #56]	; (8000b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b30:	4c0b      	ldr	r4, [pc, #44]	; (8000b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b3e:	f7ff ffd7 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f004 f8c3 	bl	8004ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff ff4b 	bl	80009e0 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b58:	08004eec 	.word	0x08004eec
  ldr r2, =_sbss
 8000b5c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b60:	200000f0 	.word	0x200000f0

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10e      	bne.n	8000b96 <BSP_LED_Init+0x2e>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <BSP_LED_Init+0x94>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <BSP_LED_Init+0x94>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <BSP_LED_Init+0x94>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	e00d      	b.n	8000bb2 <BSP_LED_Init+0x4a>
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <BSP_LED_Init+0x94>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <BSP_LED_Init+0x94>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <BSP_LED_Init+0x94>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <BSP_LED_Init+0x98>)
 8000bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <BSP_LED_Init+0x9c>)
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	f107 0214 	add.w	r2, r7, #20
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f9e4 	bl	8000fa4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <BSP_LED_Init+0x9c>)
 8000be0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <BSP_LED_Init+0x98>)
 8000be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f000 fb84 	bl	80012fc <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	08004eb0 	.word	0x08004eb0
 8000c04:	20000004 	.word	0x20000004

08000c08 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <BSP_LED_On+0x2c>)
 8000c16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <BSP_LED_On+0x30>)
 8000c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c22:	2201      	movs	r2, #1
 8000c24:	4619      	mov	r1, r3
 8000c26:	f000 fb69 	bl	80012fc <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000004 	.word	0x20000004
 8000c38:	08004eb0 	.word	0x08004eb0

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f92b 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f002 fb42 	bl	80032f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f943 	bl	8000f2a <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f90b 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	20000010 	.word	0x20000010

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000014 	.word	0x20000014
 8000d04:	20000054 	.word	0x20000054

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000054 	.word	0x20000054

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff3e 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff31 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffa2 	bl	8000e7c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d004      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e00c      	b.n	8000f7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2205      	movs	r2, #5
 8000f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e177      	b.n	80012b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8166 	bne.w	80012aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d005      	beq.n	8000ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d130      	bne.n	8001058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	f003 0201 	and.w	r2, r3, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b03      	cmp	r3, #3
 8001062:	d017      	beq.n	8001094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d123      	bne.n	80010e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	69b9      	ldr	r1, [r7, #24]
 80010e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0203 	and.w	r2, r3, #3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80c0 	beq.w	80012aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b66      	ldr	r3, [pc, #408]	; (80012c8 <HAL_GPIO_Init+0x324>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a65      	ldr	r2, [pc, #404]	; (80012c8 <HAL_GPIO_Init+0x324>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <HAL_GPIO_Init+0x324>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001146:	4a61      	ldr	r2, [pc, #388]	; (80012cc <HAL_GPIO_Init+0x328>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a58      	ldr	r2, [pc, #352]	; (80012d0 <HAL_GPIO_Init+0x32c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d037      	beq.n	80011e2 <HAL_GPIO_Init+0x23e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a57      	ldr	r2, [pc, #348]	; (80012d4 <HAL_GPIO_Init+0x330>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d031      	beq.n	80011de <HAL_GPIO_Init+0x23a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a56      	ldr	r2, [pc, #344]	; (80012d8 <HAL_GPIO_Init+0x334>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d02b      	beq.n	80011da <HAL_GPIO_Init+0x236>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a55      	ldr	r2, [pc, #340]	; (80012dc <HAL_GPIO_Init+0x338>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x232>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a54      	ldr	r2, [pc, #336]	; (80012e0 <HAL_GPIO_Init+0x33c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x22e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a53      	ldr	r2, [pc, #332]	; (80012e4 <HAL_GPIO_Init+0x340>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x22a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <HAL_GPIO_Init+0x344>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x226>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a51      	ldr	r2, [pc, #324]	; (80012ec <HAL_GPIO_Init+0x348>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x222>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a50      	ldr	r2, [pc, #320]	; (80012f0 <HAL_GPIO_Init+0x34c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x21e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4f      	ldr	r2, [pc, #316]	; (80012f4 <HAL_GPIO_Init+0x350>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x21a>
 80011ba:	2309      	movs	r3, #9
 80011bc:	e012      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011be:	230a      	movs	r3, #10
 80011c0:	e010      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011c2:	2308      	movs	r3, #8
 80011c4:	e00e      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00c      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011ca:	2306      	movs	r3, #6
 80011cc:	e00a      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011ce:	2305      	movs	r3, #5
 80011d0:	e008      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011d2:	2304      	movs	r3, #4
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011e2:	2300      	movs	r3, #0
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f4:	4935      	ldr	r1, [pc, #212]	; (80012cc <HAL_GPIO_Init+0x328>)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <HAL_GPIO_Init+0x354>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001226:	4a34      	ldr	r2, [pc, #208]	; (80012f8 <HAL_GPIO_Init+0x354>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122c:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <HAL_GPIO_Init+0x354>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001250:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <HAL_GPIO_Init+0x354>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <HAL_GPIO_Init+0x354>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127a:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <HAL_GPIO_Init+0x354>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_GPIO_Init+0x354>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <HAL_GPIO_Init+0x354>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	f67f ae84 	bls.w	8000fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40021400 	.word	0x40021400
 80012e8:	40021800 	.word	0x40021800
 80012ec:	40021c00 	.word	0x40021c00
 80012f0:	40022000 	.word	0x40022000
 80012f4:	40022400 	.word	0x40022400
 80012f8:	40013c00 	.word	0x40013c00

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e12b      	b.n	800159a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f001 fff6 	bl	8003348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2224      	movs	r2, #36	; 0x24
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001394:	f002 fd30 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8001398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a81      	ldr	r2, [pc, #516]	; (80015a4 <HAL_I2C_Init+0x274>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d807      	bhi.n	80013b4 <HAL_I2C_Init+0x84>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4a80      	ldr	r2, [pc, #512]	; (80015a8 <HAL_I2C_Init+0x278>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf94      	ite	ls
 80013ac:	2301      	movls	r3, #1
 80013ae:	2300      	movhi	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	e006      	b.n	80013c2 <HAL_I2C_Init+0x92>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a7d      	ldr	r2, [pc, #500]	; (80015ac <HAL_I2C_Init+0x27c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bf94      	ite	ls
 80013bc:	2301      	movls	r3, #1
 80013be:	2300      	movhi	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0e7      	b.n	800159a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a78      	ldr	r2, [pc, #480]	; (80015b0 <HAL_I2C_Init+0x280>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0c9b      	lsrs	r3, r3, #18
 80013d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a6a      	ldr	r2, [pc, #424]	; (80015a4 <HAL_I2C_Init+0x274>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d802      	bhi.n	8001404 <HAL_I2C_Init+0xd4>
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3301      	adds	r3, #1
 8001402:	e009      	b.n	8001418 <HAL_I2C_Init+0xe8>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	4a69      	ldr	r2, [pc, #420]	; (80015b4 <HAL_I2C_Init+0x284>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	3301      	adds	r3, #1
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	430b      	orrs	r3, r1
 800141e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800142a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	495c      	ldr	r1, [pc, #368]	; (80015a4 <HAL_I2C_Init+0x274>)
 8001434:	428b      	cmp	r3, r1
 8001436:	d819      	bhi.n	800146c <HAL_I2C_Init+0x13c>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1e59      	subs	r1, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fbb1 f3f3 	udiv	r3, r1, r3
 8001446:	1c59      	adds	r1, r3, #1
 8001448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800144c:	400b      	ands	r3, r1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00a      	beq.n	8001468 <HAL_I2C_Init+0x138>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1e59      	subs	r1, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001460:	3301      	adds	r3, #1
 8001462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001466:	e051      	b.n	800150c <HAL_I2C_Init+0x1dc>
 8001468:	2304      	movs	r3, #4
 800146a:	e04f      	b.n	800150c <HAL_I2C_Init+0x1dc>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d111      	bne.n	8001498 <HAL_I2C_Init+0x168>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e58      	subs	r0, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	440b      	add	r3, r1
 8001482:	fbb0 f3f3 	udiv	r3, r0, r3
 8001486:	3301      	adds	r3, #1
 8001488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	e012      	b.n	80014be <HAL_I2C_Init+0x18e>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1e58      	subs	r0, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	0099      	lsls	r1, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_I2C_Init+0x196>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e022      	b.n	800150c <HAL_I2C_Init+0x1dc>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10e      	bne.n	80014ec <HAL_I2C_Init+0x1bc>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1e58      	subs	r0, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6859      	ldr	r1, [r3, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	440b      	add	r3, r1
 80014dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ea:	e00f      	b.n	800150c <HAL_I2C_Init+0x1dc>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e58      	subs	r0, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	0099      	lsls	r1, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001502:	3301      	adds	r3, #1
 8001504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	6809      	ldr	r1, [r1, #0]
 8001510:	4313      	orrs	r3, r2
 8001512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69da      	ldr	r2, [r3, #28]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800153a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6911      	ldr	r1, [r2, #16]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68d2      	ldr	r2, [r2, #12]
 8001546:	4311      	orrs	r1, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	430b      	orrs	r3, r1
 800154e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2220      	movs	r2, #32
 8001586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	000186a0 	.word	0x000186a0
 80015a8:	001e847f 	.word	0x001e847f
 80015ac:	003d08ff 	.word	0x003d08ff
 80015b0:	431bde83 	.word	0x431bde83
 80015b4:	10624dd3 	.word	0x10624dd3

080015b8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	817b      	strh	r3, [r7, #10]
 80015c8:	4613      	mov	r3, r2
 80015ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b20      	cmp	r3, #32
 80015da:	f040 8085 	bne.w	80016e8 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <HAL_I2C_Master_Transmit_IT+0x140>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	4a45      	ldr	r2, [pc, #276]	; (80016fc <HAL_I2C_Master_Transmit_IT+0x144>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	0a1a      	lsrs	r2, r3, #8
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009a      	lsls	r2, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d116      	bne.n	8001632 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f043 0220 	orr.w	r2, r3, #32
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e05b      	b.n	80016ea <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b02      	cmp	r3, #2
 800163e:	d0db      	beq.n	80015f8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_I2C_Master_Transmit_IT+0x96>
 800164a:	2302      	movs	r3, #2
 800164c:	e04d      	b.n	80016ea <HAL_I2C_Master_Transmit_IT+0x132>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d007      	beq.n	8001674 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2221      	movs	r2, #33	; 0x21
 8001688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2210      	movs	r2, #16
 8001690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	893a      	ldrh	r2, [r7, #8]
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <HAL_I2C_Master_Transmit_IT+0x148>)
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80016b6:	897a      	ldrh	r2, [r7, #10]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80016d2:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e000      	b.n	80016ea <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80016e8:	2302      	movs	r3, #2
  }
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000000 	.word	0x20000000
 80016fc:	14f8b589 	.word	0x14f8b589
 8001700:	ffff0000 	.word	0xffff0000

08001704 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	461a      	mov	r2, r3
 8001710:	460b      	mov	r3, r1
 8001712:	817b      	strh	r3, [r7, #10]
 8001714:	4613      	mov	r3, r2
 8001716:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b20      	cmp	r3, #32
 8001726:	f040 808d 	bne.w	8001844 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_I2C_Master_Receive_IT+0x150>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	4a49      	ldr	r2, [pc, #292]	; (8001858 <HAL_I2C_Master_Receive_IT+0x154>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0a1a      	lsrs	r2, r3, #8
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009a      	lsls	r2, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3b01      	subs	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d116      	bne.n	800177e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2220      	movs	r2, #32
 800175a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f043 0220 	orr.w	r2, r3, #32
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e063      	b.n	8001846 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b02      	cmp	r3, #2
 800178a:	d0db      	beq.n	8001744 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_I2C_Master_Receive_IT+0x96>
 8001796:	2302      	movs	r3, #2
 8001798:	e055      	b.n	8001846 <HAL_I2C_Master_Receive_IT+0x142>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d007      	beq.n	80017c0 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2222      	movs	r2, #34	; 0x22
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2210      	movs	r2, #16
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	893a      	ldrh	r2, [r7, #8]
 80017f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_I2C_Master_Receive_IT+0x158>)
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001802:	897a      	ldrh	r2, [r7, #10]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800181e:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800182e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800183e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e000      	b.n	8001846 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8001844:	2302      	movs	r3, #2
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000000 	.word	0x20000000
 8001858:	14f8b589 	.word	0x14f8b589
 800185c:	ffff0000 	.word	0xffff0000

08001860 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	460b      	mov	r3, r1
 800186e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff fa4a 	bl	8000d08 <HAL_GetTick>
 8001874:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b20      	cmp	r3, #32
 8001884:	f040 8111 	bne.w	8001aaa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2319      	movs	r3, #25
 800188e:	2201      	movs	r2, #1
 8001890:	4988      	ldr	r1, [pc, #544]	; (8001ab4 <HAL_I2C_IsDeviceReady+0x254>)
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f001 fc8a 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800189e:	2302      	movs	r3, #2
 80018a0:	e104      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_I2C_IsDeviceReady+0x50>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e0fd      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x24c>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d007      	beq.n	80018d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0201 	orr.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2224      	movs	r2, #36	; 0x24
 80018ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a70      	ldr	r2, [pc, #448]	; (8001ab8 <HAL_I2C_IsDeviceReady+0x258>)
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001908:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2200      	movs	r2, #0
 8001912:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f001 fc48 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00d      	beq.n	800193e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001930:	d103      	bne.n	800193a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0b6      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800194c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff f9db 	bl	8000d08 <HAL_GetTick>
 8001952:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b02      	cmp	r3, #2
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001978:	bf0c      	ite	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	2300      	movne	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001982:	e025      	b.n	80019d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001984:	f7ff f9c0 	bl	8000d08 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d302      	bcc.n	800199a <HAL_I2C_IsDeviceReady+0x13a>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	22a0      	movs	r2, #160	; 0xa0
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2ba0      	cmp	r3, #160	; 0xa0
 80019da:	d005      	beq.n	80019e8 <HAL_I2C_IsDeviceReady+0x188>
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_I2C_IsDeviceReady+0x188>
 80019e2:	7dbb      	ldrb	r3, [r7, #22]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0cd      	beq.n	8001984 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d129      	bne.n	8001a52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2319      	movs	r3, #25
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4921      	ldr	r1, [pc, #132]	; (8001ab4 <HAL_I2C_IsDeviceReady+0x254>)
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f001 fbbc 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e036      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e02c      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2319      	movs	r3, #25
 8001a72:	2201      	movs	r2, #1
 8001a74:	490f      	ldr	r1, [pc, #60]	; (8001ab4 <HAL_I2C_IsDeviceReady+0x254>)
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f001 fb98 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e012      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f4ff af32 	bcc.w	80018fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	00100002 	.word	0x00100002
 8001ab8:	ffff0000 	.word	0xffff0000

08001abc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001adc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d003      	beq.n	8001af4 <HAL_I2C_EV_IRQHandler+0x38>
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	f040 80c1 	bne.w	8001c76 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10d      	bne.n	8001b2a <HAL_I2C_EV_IRQHandler+0x6e>
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001b14:	d003      	beq.n	8001b1e <HAL_I2C_EV_IRQHandler+0x62>
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001b1c:	d101      	bne.n	8001b22 <HAL_I2C_EV_IRQHandler+0x66>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_I2C_EV_IRQHandler+0x68>
 8001b22:	2300      	movs	r3, #0
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	f000 8132 	beq.w	8001d8e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00c      	beq.n	8001b4e <HAL_I2C_EV_IRQHandler+0x92>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	0a5b      	lsrs	r3, r3, #9
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f001 fbbd 	bl	80032c0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fcdc 	bl	8002504 <I2C_Master_SB>
 8001b4c:	e092      	b.n	8001c74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_I2C_EV_IRQHandler+0xb2>
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	0a5b      	lsrs	r3, r3, #9
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fd52 	bl	8002610 <I2C_Master_ADD10>
 8001b6c:	e082      	b.n	8001c74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	085b      	lsrs	r3, r3, #1
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_I2C_EV_IRQHandler+0xd2>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	0a5b      	lsrs	r3, r3, #9
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fd6c 	bl	8002664 <I2C_Master_ADDR>
 8001b8c:	e072      	b.n	8001c74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d03b      	beq.n	8001c12 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ba8:	f000 80f3 	beq.w	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	09db      	lsrs	r3, r3, #7
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00f      	beq.n	8001bd8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d009      	beq.n	8001bd8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d103      	bne.n	8001bd8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f94c 	bl	8001e6e <I2C_MasterTransmit_TXE>
 8001bd6:	e04d      	b.n	8001c74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80d6 	beq.w	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	0a5b      	lsrs	r3, r3, #9
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80cf 	beq.w	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001bf4:	7bbb      	ldrb	r3, [r7, #14]
 8001bf6:	2b21      	cmp	r3, #33	; 0x21
 8001bf8:	d103      	bne.n	8001c02 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f9d3 	bl	8001fa6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c00:	e0c7      	b.n	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b40      	cmp	r3, #64	; 0x40
 8001c06:	f040 80c4 	bne.w	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fa41 	bl	8002092 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c10:	e0bf      	b.n	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c20:	f000 80b7 	beq.w	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00f      	beq.n	8001c50 <HAL_I2C_EV_IRQHandler+0x194>
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <HAL_I2C_EV_IRQHandler+0x194>
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d103      	bne.n	8001c50 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fab6 	bl	80021ba <I2C_MasterReceive_RXNE>
 8001c4e:	e011      	b.n	8001c74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 809a 	beq.w	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	0a5b      	lsrs	r3, r3, #9
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8093 	beq.w	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fb5f 	bl	8002330 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c72:	e08e      	b.n	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c74:	e08d      	b.n	8001d92 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d004      	beq.n	8001c88 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e007      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d012      	beq.n	8001cca <HAL_I2C_EV_IRQHandler+0x20e>
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	0a5b      	lsrs	r3, r3, #9
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00c      	beq.n	8001cca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001cc0:	69b9      	ldr	r1, [r7, #24]
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 ff1d 	bl	8002b02 <I2C_Slave_ADDR>
 8001cc8:	e066      	b.n	8001d98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_I2C_EV_IRQHandler+0x22e>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	0a5b      	lsrs	r3, r3, #9
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 ff58 	bl	8002b98 <I2C_Slave_STOPF>
 8001ce8:	e056      	b.n	8001d98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001cea:	7bbb      	ldrb	r3, [r7, #14]
 8001cec:	2b21      	cmp	r3, #33	; 0x21
 8001cee:	d002      	beq.n	8001cf6 <HAL_I2C_EV_IRQHandler+0x23a>
 8001cf0:	7bbb      	ldrb	r3, [r7, #14]
 8001cf2:	2b29      	cmp	r3, #41	; 0x29
 8001cf4:	d125      	bne.n	8001d42 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	09db      	lsrs	r3, r3, #7
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00f      	beq.n	8001d22 <HAL_I2C_EV_IRQHandler+0x266>
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	0a9b      	lsrs	r3, r3, #10
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_I2C_EV_IRQHandler+0x266>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fe33 	bl	8002986 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d20:	e039      	b.n	8001d96 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d033      	beq.n	8001d96 <HAL_I2C_EV_IRQHandler+0x2da>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	0a5b      	lsrs	r3, r3, #9
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02d      	beq.n	8001d96 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fe60 	bl	8002a00 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d40:	e029      	b.n	8001d96 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00f      	beq.n	8001d6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	0a9b      	lsrs	r3, r3, #10
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fe6b 	bl	8002a42 <I2C_SlaveReceive_RXNE>
 8001d6c:	e014      	b.n	8001d98 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00e      	beq.n	8001d98 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	0a5b      	lsrs	r3, r3, #9
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fe99 	bl	8002abe <I2C_SlaveReceive_BTF>
 8001d8c:	e004      	b.n	8001d98 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001d8e:	bf00      	nop
 8001d90:	e002      	b.n	8001d98 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d92:	bf00      	nop
 8001d94:	e000      	b.n	8001d98 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d96:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e84:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d150      	bne.n	8001f36 <I2C_MasterTransmit_TXE+0xc8>
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	2b21      	cmp	r3, #33	; 0x21
 8001e98:	d14d      	bne.n	8001f36 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d01d      	beq.n	8001edc <I2C_MasterTransmit_TXE+0x6e>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d01a      	beq.n	8001edc <I2C_MasterTransmit_TXE+0x6e>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eac:	d016      	beq.n	8001edc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ebc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2211      	movs	r2, #17
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff62 	bl	8001d9e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001eda:	e060      	b.n	8001f9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001eea:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d107      	bne.n	8001f26 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ff7d 	bl	8001e1e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f24:	e03b      	b.n	8001f9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff35 	bl	8001d9e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f34:	e033      	b.n	8001f9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b21      	cmp	r3, #33	; 0x21
 8001f3a:	d005      	beq.n	8001f48 <I2C_MasterTransmit_TXE+0xda>
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	d12d      	bne.n	8001f9e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b22      	cmp	r3, #34	; 0x22
 8001f46:	d12a      	bne.n	8001f9e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d108      	bne.n	8001f64 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f60:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001f62:	e01c      	b.n	8001f9e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d103      	bne.n	8001f78 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f88e 	bl	8002092 <I2C_MemoryTransmit_TXE_BTF>
}
 8001f76:	e012      	b.n	8001f9e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f9c:	e7ff      	b.n	8001f9e <I2C_MasterTransmit_TXE+0x130>
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b21      	cmp	r3, #33	; 0x21
 8001fbe:	d164      	bne.n	800208a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001fee:	e04c      	b.n	800208a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d01d      	beq.n	8002032 <I2C_MasterTransmit_BTF+0x8c>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d01a      	beq.n	8002032 <I2C_MasterTransmit_BTF+0x8c>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002002:	d016      	beq.n	8002032 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002012:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2211      	movs	r2, #17
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff feb7 	bl	8001d9e <HAL_I2C_MasterTxCpltCallback>
}
 8002030:	e02b      	b.n	800208a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002040:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002050:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d107      	bne.n	800207c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fed2 	bl	8001e1e <HAL_I2C_MemTxCpltCallback>
}
 800207a:	e006      	b.n	800208a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fe8a 	bl	8001d9e <HAL_I2C_MasterTxCpltCallback>
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11d      	bne.n	80020e6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d10b      	bne.n	80020ca <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c2:	1c9a      	adds	r2, r3, #2
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80020c8:	e073      	b.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	121b      	asrs	r3, r3, #8
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80020e4:	e065      	b.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10b      	bne.n	8002106 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002104:	e055      	b.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210a:	2b02      	cmp	r3, #2
 800210c:	d151      	bne.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b22      	cmp	r3, #34	; 0x22
 8002112:	d10d      	bne.n	8002130 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002122:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800212e:	e040      	b.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d015      	beq.n	8002166 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b21      	cmp	r3, #33	; 0x21
 800213e:	d112      	bne.n	8002166 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002164:	e025      	b.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d120      	bne.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	2b21      	cmp	r3, #33	; 0x21
 8002174:	d11d      	bne.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002184:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002194:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fe36 	bl	8001e1e <HAL_I2C_MemTxCpltCallback>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b22      	cmp	r3, #34	; 0x22
 80021cc:	f040 80ac 	bne.w	8002328 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d921      	bls.n	8002222 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b03      	cmp	r3, #3
 800220c:	f040 808c 	bne.w	8002328 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002220:	e082      	b.n	8002328 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	2b02      	cmp	r3, #2
 8002228:	d075      	beq.n	8002316 <I2C_MasterReceive_RXNE+0x15c>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d002      	beq.n	8002236 <I2C_MasterReceive_RXNE+0x7c>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d16f      	bne.n	8002316 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f001 f810 	bl	800325c <I2C_WaitOnSTOPRequestThroughIT>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d142      	bne.n	80022c8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002250:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002260:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d10a      	bne.n	80022b2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fdc1 	bl	8001e32 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80022b0:	e03a      	b.n	8002328 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2212      	movs	r2, #18
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff fd76 	bl	8001db2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80022c6:	e02f      	b.n	8002328 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fd99 	bl	8001e46 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002314:	e008      	b.n	8002328 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002324:	605a      	str	r2, [r3, #4]
}
 8002326:	e7ff      	b.n	8002328 <I2C_MasterReceive_RXNE+0x16e>
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b04      	cmp	r3, #4
 8002346:	d11b      	bne.n	8002380 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002356:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800237e:	e0bd      	b.n	80024fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b03      	cmp	r3, #3
 8002388:	d129      	bne.n	80023de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002398:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d00a      	beq.n	80023b6 <I2C_MasterReceive_BTF+0x86>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d007      	beq.n	80023b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023dc:	e08e      	b.n	80024fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d176      	bne.n	80024d6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d002      	beq.n	80023f4 <I2C_MasterReceive_BTF+0xc4>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d108      	bne.n	8002406 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e019      	b.n	800243a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b04      	cmp	r3, #4
 800240a:	d002      	beq.n	8002412 <I2C_MasterReceive_BTF+0xe2>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d108      	bne.n	8002424 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e00a      	b.n	800243a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b10      	cmp	r3, #16
 8002428:	d007      	beq.n	800243a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002438:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002494:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d10a      	bne.n	80024c0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff fcba 	bl	8001e32 <HAL_I2C_MemRxCpltCallback>
}
 80024be:	e01d      	b.n	80024fc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2212      	movs	r2, #18
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff fc6f 	bl	8001db2 <HAL_I2C_MasterRxCpltCallback>
}
 80024d4:	e012      	b.n	80024fc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d117      	bne.n	8002548 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002530:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002532:	e067      	b.n	8002604 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	b2da      	uxtb	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	611a      	str	r2, [r3, #16]
}
 8002546:	e05d      	b.n	8002604 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002550:	d133      	bne.n	80025ba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b21      	cmp	r3, #33	; 0x21
 800255c:	d109      	bne.n	8002572 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	b2db      	uxtb	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800256e:	611a      	str	r2, [r3, #16]
 8002570:	e008      	b.n	8002584 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <I2C_Master_SB+0x92>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	2b00      	cmp	r3, #0
 800259c:	d032      	beq.n	8002604 <I2C_Master_SB+0x100>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d02d      	beq.n	8002604 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b6:	605a      	str	r2, [r3, #4]
}
 80025b8:	e024      	b.n	8002604 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10e      	bne.n	80025e0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	11db      	asrs	r3, r3, #7
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f003 0306 	and.w	r3, r3, #6
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f063 030f 	orn	r3, r3, #15
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	611a      	str	r2, [r3, #16]
}
 80025de:	e011      	b.n	8002604 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10d      	bne.n	8002604 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	11db      	asrs	r3, r3, #7
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f003 0306 	and.w	r3, r3, #6
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f063 030e 	orn	r3, r3, #14
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	611a      	str	r2, [r3, #16]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	b2da      	uxtb	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <I2C_Master_ADD10+0x26>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <I2C_Master_ADD10+0x48>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002656:	605a      	str	r2, [r3, #4]
  }
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002664:	b480      	push	{r7}
 8002666:	b091      	sub	sp, #68	; 0x44
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002672:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b22      	cmp	r3, #34	; 0x22
 800268c:	f040 8169 	bne.w	8002962 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <I2C_Master_ADDR+0x54>
 8002698:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d10b      	bne.n	80026b8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a0:	2300      	movs	r3, #0
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	e160      	b.n	800297a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d11d      	bne.n	80026fc <I2C_Master_ADDR+0x98>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80026c8:	d118      	bne.n	80026fc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	651a      	str	r2, [r3, #80]	; 0x50
 80026fa:	e13e      	b.n	800297a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d113      	bne.n	800272e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e115      	b.n	800295a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	f040 808a 	bne.w	800284e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002740:	d137      	bne.n	80027b2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002750:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002760:	d113      	bne.n	800278a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002770:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	e0e7      	b.n	800295a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	623b      	str	r3, [r7, #32]
 800279e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e0d3      	b.n	800295a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d02e      	beq.n	8002816 <I2C_Master_ADDR+0x1b2>
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d02b      	beq.n	8002816 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80027be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c0:	2b12      	cmp	r3, #18
 80027c2:	d102      	bne.n	80027ca <I2C_Master_ADDR+0x166>
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d125      	bne.n	8002816 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d00e      	beq.n	80027ee <I2C_Master_ADDR+0x18a>
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d00b      	beq.n	80027ee <I2C_Master_ADDR+0x18a>
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d008      	beq.n	80027ee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e007      	b.n	80027fe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	e0a1      	b.n	800295a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002824:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e085      	b.n	800295a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d14d      	bne.n	80028f4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	2b04      	cmp	r3, #4
 800285c:	d016      	beq.n	800288c <I2C_Master_ADDR+0x228>
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	2b02      	cmp	r3, #2
 8002862:	d013      	beq.n	800288c <I2C_Master_ADDR+0x228>
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	2b10      	cmp	r3, #16
 8002868:	d010      	beq.n	800288c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002878:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e007      	b.n	800289c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800289a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028aa:	d117      	bne.n	80028dc <I2C_Master_ADDR+0x278>
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b2:	d00b      	beq.n	80028cc <I2C_Master_ADDR+0x268>
 80028b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d008      	beq.n	80028cc <I2C_Master_ADDR+0x268>
 80028ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d005      	beq.n	80028cc <I2C_Master_ADDR+0x268>
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d002      	beq.n	80028cc <I2C_Master_ADDR+0x268>
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d107      	bne.n	80028dc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	e032      	b.n	800295a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002902:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800290e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002912:	d117      	bne.n	8002944 <I2C_Master_ADDR+0x2e0>
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800291a:	d00b      	beq.n	8002934 <I2C_Master_ADDR+0x2d0>
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	2b01      	cmp	r3, #1
 8002920:	d008      	beq.n	8002934 <I2C_Master_ADDR+0x2d0>
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	2b08      	cmp	r3, #8
 8002926:	d005      	beq.n	8002934 <I2C_Master_ADDR+0x2d0>
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	2b10      	cmp	r3, #16
 800292c:	d002      	beq.n	8002934 <I2C_Master_ADDR+0x2d0>
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	2b20      	cmp	r3, #32
 8002932:	d107      	bne.n	8002944 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002942:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002960:	e00b      	b.n	800297a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
}
 8002978:	e7ff      	b.n	800297a <I2C_Master_ADDR+0x316>
 800297a:	bf00      	nop
 800297c:	3744      	adds	r7, #68	; 0x44
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02b      	beq.n	80029f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d114      	bne.n	80029f8 <I2C_SlaveTransmit_TXE+0x72>
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b29      	cmp	r3, #41	; 0x29
 80029d2:	d111      	bne.n	80029f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2221      	movs	r2, #33	; 0x21
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2228      	movs	r2, #40	; 0x28
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff f9e7 	bl	8001dc6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d011      	beq.n	8002a36 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d02c      	beq.n	8002ab6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d114      	bne.n	8002ab6 <I2C_SlaveReceive_RXNE+0x74>
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a90:	d111      	bne.n	8002ab6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2222      	movs	r2, #34	; 0x22
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2228      	movs	r2, #40	; 0x28
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff f992 	bl	8001dda <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b1c:	2b28      	cmp	r3, #40	; 0x28
 8002b1e:	d127      	bne.n	8002b70 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b2e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	09db      	lsrs	r3, r3, #7
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	81bb      	strh	r3, [r7, #12]
 8002b52:	e002      	b.n	8002b5a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002b62:	89ba      	ldrh	r2, [r7, #12]
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff f940 	bl	8001dee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b6e:	e00e      	b.n	8002b8e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bb6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf4:	d172      	bne.n	8002cdc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b22      	cmp	r3, #34	; 0x22
 8002bfa:	d002      	beq.n	8002c02 <I2C_Slave_STOPF+0x6a>
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8002c00:	d135      	bne.n	8002c6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f043 0204 	orr.w	r2, r3, #4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe f9a3 	bl	8000f86 <HAL_DMA_GetState>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d049      	beq.n	8002cda <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <I2C_Slave_STOPF+0x258>)
 8002c4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe f975 	bl	8000f42 <HAL_DMA_Abort_IT>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d03d      	beq.n	8002cda <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c6c:	e035      	b.n	8002cda <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f043 0204 	orr.w	r2, r3, #4
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f96d 	bl	8000f86 <HAL_DMA_GetState>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d014      	beq.n	8002cdc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb6:	4a4e      	ldr	r2, [pc, #312]	; (8002df0 <I2C_Slave_STOPF+0x258>)
 8002cb8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe f93f 	bl	8000f42 <HAL_DMA_Abort_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4798      	blx	r3
 8002cd8:	e000      	b.n	8002cdc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cda:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d03e      	beq.n	8002d64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d112      	bne.n	8002d1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d24:	2b40      	cmp	r3, #64	; 0x40
 8002d26:	d112      	bne.n	8002d4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f843 	bl	8002df8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002d72:	e039      	b.n	8002de8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b2a      	cmp	r3, #42	; 0x2a
 8002d78:	d109      	bne.n	8002d8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2228      	movs	r2, #40	; 0x28
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff f826 	bl	8001dda <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b28      	cmp	r3, #40	; 0x28
 8002d98:	d111      	bne.n	8002dbe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <I2C_Slave_STOPF+0x25c>)
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff f827 	bl	8001e0a <HAL_I2C_ListenCpltCallback>
}
 8002dbc:	e014      	b.n	8002de8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	2b22      	cmp	r3, #34	; 0x22
 8002dc4:	d002      	beq.n	8002dcc <I2C_Slave_STOPF+0x234>
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b22      	cmp	r3, #34	; 0x22
 8002dca:	d10d      	bne.n	8002de8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fff9 	bl	8001dda <HAL_I2C_SlaveRxCpltCallback>
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	0800305d 	.word	0x0800305d
 8002df4:	ffff0000 	.word	0xffff0000

08002df8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d002      	beq.n	8002e1c <I2C_ITError+0x24>
 8002e16:	7bbb      	ldrb	r3, [r7, #14]
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d10a      	bne.n	8002e32 <I2C_ITError+0x3a>
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b22      	cmp	r3, #34	; 0x22
 8002e20:	d107      	bne.n	8002e32 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e38:	2b28      	cmp	r3, #40	; 0x28
 8002e3a:	d107      	bne.n	8002e4c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2228      	movs	r2, #40	; 0x28
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e4a:	e015      	b.n	8002e78 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5a:	d00a      	beq.n	8002e72 <I2C_ITError+0x7a>
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b60      	cmp	r3, #96	; 0x60
 8002e60:	d007      	beq.n	8002e72 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e86:	d162      	bne.n	8002f4e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d020      	beq.n	8002ee8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	4a6a      	ldr	r2, [pc, #424]	; (8003054 <I2C_ITError+0x25c>)
 8002eac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f845 	bl	8000f42 <HAL_DMA_Abort_IT>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8089 	beq.w	8002fd2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4798      	blx	r3
 8002ee6:	e074      	b.n	8002fd2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	4a59      	ldr	r2, [pc, #356]	; (8003054 <I2C_ITError+0x25c>)
 8002eee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe f824 	bl	8000f42 <HAL_DMA_Abort_IT>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d068      	beq.n	8002fd2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d10b      	bne.n	8002f26 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0201 	bic.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4798      	blx	r3
 8002f4c:	e041      	b.n	8002fd2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b60      	cmp	r3, #96	; 0x60
 8002f58:	d125      	bne.n	8002fa6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b40      	cmp	r3, #64	; 0x40
 8002f74:	d10b      	bne.n	8002f8e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe ff5b 	bl	8001e5a <HAL_I2C_AbortCpltCallback>
 8002fa4:	e015      	b.n	8002fd2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d10b      	bne.n	8002fcc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7fe ff3a 	bl	8001e46 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10e      	bne.n	8003000 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800300e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b04      	cmp	r3, #4
 8003022:	d113      	bne.n	800304c <I2C_ITError+0x254>
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b28      	cmp	r3, #40	; 0x28
 8003028:	d110      	bne.n	800304c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <I2C_ITError+0x260>)
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fedf 	bl	8001e0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	0800305d 	.word	0x0800305d
 8003058:	ffff0000 	.word	0xffff0000

0800305c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003076:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <I2C_DMAAbort+0x148>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	08db      	lsrs	r3, r3, #3
 800307c:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <I2C_DMAAbort+0x14c>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0a1a      	lsrs	r2, r3, #8
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00da      	lsls	r2, r3, #3
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80030a2:	e00a      	b.n	80030ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b8:	d0ea      	beq.n	8003090 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	2200      	movs	r2, #0
 80030c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	2200      	movs	r2, #0
 80030d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fc:	2200      	movs	r2, #0
 80030fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	2200      	movs	r2, #0
 800310e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b60      	cmp	r3, #96	; 0x60
 800312a:	d10e      	bne.n	800314a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2200      	movs	r2, #0
 8003140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003142:	6978      	ldr	r0, [r7, #20]
 8003144:	f7fe fe89 	bl	8001e5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003148:	e027      	b.n	800319a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003150:	2b28      	cmp	r3, #40	; 0x28
 8003152:	d117      	bne.n	8003184 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003172:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2228      	movs	r2, #40	; 0x28
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003182:	e007      	b.n	8003194 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003194:	6978      	ldr	r0, [r7, #20]
 8003196:	f7fe fe56 	bl	8001e46 <HAL_I2C_ErrorCallback>
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000000 	.word	0x20000000
 80031a8:	14f8b589 	.word	0x14f8b589

080031ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031bc:	e025      	b.n	800320a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d021      	beq.n	800320a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7fd fd9f 	bl	8000d08 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d116      	bne.n	800320a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e023      	b.n	8003252 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10d      	bne.n	8003230 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	e00c      	b.n	800324a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	429a      	cmp	r2, r3
 800324e:	d0b6      	beq.n	80031be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	08db      	lsrs	r3, r3, #3
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	0a1a      	lsrs	r2, r3, #8
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3b01      	subs	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d107      	bne.n	800329a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e008      	b.n	80032ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a8:	d0e9      	beq.n	800327e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	20000000 	.word	0x20000000
 80032bc:	14f8b589 	.word	0x14f8b589

080032c0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032d0:	d103      	bne.n	80032da <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80032d8:	e007      	b.n	80032ea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032e2:	d102      	bne.n	80032ea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2208      	movs	r2, #8
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <HAL_MspInit+0x4c>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	4a0f      	ldr	r2, [pc, #60]	; (8003344 <HAL_MspInit+0x4c>)
 8003308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330c:	6453      	str	r3, [r2, #68]	; 0x44
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_MspInit+0x4c>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_MspInit+0x4c>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a08      	ldr	r2, [pc, #32]	; (8003344 <HAL_MspInit+0x4c>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_MspInit+0x4c>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_I2C_MspInit+0x94>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d133      	bne.n	80033d2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_I2C_MspInit+0x98>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <HAL_I2C_MspInit+0x98>)
 8003374:	f043 0320 	orr.w	r3, r3, #32
 8003378:	6313      	str	r3, [r2, #48]	; 0x30
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_I2C_MspInit+0x98>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003386:	2303      	movs	r3, #3
 8003388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800338a:	2312      	movs	r3, #18
 800338c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003392:	2303      	movs	r3, #3
 8003394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003396:	2304      	movs	r3, #4
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	4619      	mov	r1, r3
 80033a0:	4810      	ldr	r0, [pc, #64]	; (80033e4 <HAL_I2C_MspInit+0x9c>)
 80033a2:	f7fd fdff 	bl	8000fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_I2C_MspInit+0x98>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <HAL_I2C_MspInit+0x98>)
 80033b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033b4:	6413      	str	r3, [r2, #64]	; 0x40
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_I2C_MspInit+0x98>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	2021      	movs	r0, #33	; 0x21
 80033c8:	f7fd fd85 	bl	8000ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80033cc:	2021      	movs	r0, #33	; 0x21
 80033ce:	f7fd fd9e 	bl	8000f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80033d2:	bf00      	nop
 80033d4:	3728      	adds	r7, #40	; 0x28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40005800 	.word	0x40005800
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40021400 	.word	0x40021400

080033e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_UART_MspInit+0x84>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d12c      	bne.n	8003464 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	4b18      	ldr	r3, [pc, #96]	; (8003470 <HAL_UART_MspInit+0x88>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_UART_MspInit+0x88>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_UART_MspInit+0x88>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_UART_MspInit+0x88>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a10      	ldr	r2, [pc, #64]	; (8003470 <HAL_UART_MspInit+0x88>)
 8003430:	f043 0308 	orr.w	r3, r3, #8
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_UART_MspInit+0x88>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003442:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003450:	2303      	movs	r3, #3
 8003452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003454:	2307      	movs	r3, #7
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	4619      	mov	r1, r3
 800345e:	4805      	ldr	r0, [pc, #20]	; (8003474 <HAL_UART_MspInit+0x8c>)
 8003460:	f7fd fda0 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003464:	bf00      	nop
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40004800 	.word	0x40004800
 8003470:	40023800 	.word	0x40023800
 8003474:	40020c00 	.word	0x40020c00

08003478 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_PWREx_EnableOverDrive+0x90>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_PWREx_EnableOverDrive+0x90>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_PWREx_EnableOverDrive+0x90>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_PWREx_EnableOverDrive+0x94>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a4:	f7fd fc30 	bl	8000d08 <HAL_GetTick>
 80034a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034aa:	e009      	b.n	80034c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034ac:	f7fd fc2c 	bl	8000d08 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ba:	d901      	bls.n	80034c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e01f      	b.n	8003500 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_PWREx_EnableOverDrive+0x98>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d1ee      	bne.n	80034ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d4:	f7fd fc18 	bl	8000d08 <HAL_GetTick>
 80034d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034da:	e009      	b.n	80034f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034dc:	f7fd fc14 	bl	8000d08 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ea:	d901      	bls.n	80034f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e007      	b.n	8003500 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034f0:	4b07      	ldr	r3, [pc, #28]	; (8003510 <HAL_PWREx_EnableOverDrive+0x98>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034fc:	d1ee      	bne.n	80034dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	420e0040 	.word	0x420e0040
 8003510:	40007000 	.word	0x40007000
 8003514:	420e0044 	.word	0x420e0044

08003518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e267      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d075      	beq.n	8003622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003536:	4b88      	ldr	r3, [pc, #544]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b04      	cmp	r3, #4
 8003540:	d00c      	beq.n	800355c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b85      	ldr	r3, [pc, #532]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354a:	2b08      	cmp	r3, #8
 800354c:	d112      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	4b82      	ldr	r3, [pc, #520]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355a:	d10b      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	4b7e      	ldr	r3, [pc, #504]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d05b      	beq.n	8003620 <HAL_RCC_OscConfig+0x108>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d157      	bne.n	8003620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e242      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d106      	bne.n	800358c <HAL_RCC_OscConfig+0x74>
 800357e:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a75      	ldr	r2, [pc, #468]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e01d      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x98>
 8003596:	4b70      	ldr	r3, [pc, #448]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6f      	ldr	r2, [pc, #444]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6c      	ldr	r2, [pc, #432]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 80035b0:	4b69      	ldr	r3, [pc, #420]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a68      	ldr	r2, [pc, #416]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a65      	ldr	r2, [pc, #404]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fd fb9a 	bl	8000d08 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fd fb96 	bl	8000d08 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e207      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b5b      	ldr	r3, [pc, #364]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0xc0>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fd fb86 	bl	8000d08 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7fd fb82 	bl	8000d08 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1f3      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0xe8>
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d063      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003642:	2b08      	cmp	r3, #8
 8003644:	d11c      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003646:	4b44      	ldr	r3, [pc, #272]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d116      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e1c7      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366a:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4937      	ldr	r1, [pc, #220]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	e03a      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003688:	4b34      	ldr	r3, [pc, #208]	; (800375c <HAL_RCC_OscConfig+0x244>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fd fb3b 	bl	8000d08 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003696:	f7fd fb37 	bl	8000d08 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1a8      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4925      	ldr	r1, [pc, #148]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RCC_OscConfig+0x244>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd fb1a 	bl	8000d08 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d8:	f7fd fb16 	bl	8000d08 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e187      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d036      	beq.n	8003770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_RCC_OscConfig+0x248>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fd fafa 	bl	8000d08 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003718:	f7fd faf6 	bl	8000d08 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e167      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800372c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x200>
 8003736:	e01b      	b.n	8003770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCC_OscConfig+0x248>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7fd fae3 	bl	8000d08 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	e00e      	b.n	8003764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003746:	f7fd fadf 	bl	8000d08 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d907      	bls.n	8003764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e150      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
 8003758:	40023800 	.word	0x40023800
 800375c:	42470000 	.word	0x42470000
 8003760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ea      	bne.n	8003746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8097 	beq.w	80038ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003782:	4b81      	ldr	r3, [pc, #516]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	4b7d      	ldr	r3, [pc, #500]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	4a7c      	ldr	r2, [pc, #496]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
 800379e:	4b7a      	ldr	r3, [pc, #488]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ae:	4b77      	ldr	r3, [pc, #476]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d118      	bne.n	80037ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ba:	4b74      	ldr	r3, [pc, #464]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a73      	ldr	r2, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7fd fa9f 	bl	8000d08 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fd fa9b 	bl	8000d08 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e10c      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x2ea>
 80037f4:	4b64      	ldr	r3, [pc, #400]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a63      	ldr	r2, [pc, #396]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	e01c      	b.n	800383c <HAL_RCC_OscConfig+0x324>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x30c>
 800380a:	4b5f      	ldr	r3, [pc, #380]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a5e      	ldr	r2, [pc, #376]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	4b5c      	ldr	r3, [pc, #368]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	4a5b      	ldr	r2, [pc, #364]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6713      	str	r3, [r2, #112]	; 0x70
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0x324>
 8003824:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a57      	ldr	r2, [pc, #348]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	4b55      	ldr	r3, [pc, #340]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a54      	ldr	r2, [pc, #336]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003836:	f023 0304 	bic.w	r3, r3, #4
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d015      	beq.n	8003870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fd fa60 	bl	8000d08 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fd fa5c 	bl	8000d08 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0cb      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003862:	4b49      	ldr	r3, [pc, #292]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ee      	beq.n	800384c <HAL_RCC_OscConfig+0x334>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003870:	f7fd fa4a 	bl	8000d08 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fd fa46 	bl	8000d08 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e0b5      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388e:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ee      	bne.n	8003878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a38      	ldr	r2, [pc, #224]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80a1 	beq.w	80039f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b6:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d05c      	beq.n	800397c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d141      	bne.n	800394e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fd fa1a 	bl	8000d08 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fd fa16 	bl	8000d08 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e087      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	4b27      	ldr	r3, [pc, #156]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	019b      	lsls	r3, r3, #6
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	3b01      	subs	r3, #1
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	491b      	ldr	r1, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fd f9ef 	bl	8000d08 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fd f9eb 	bl	8000d08 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e05c      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x416>
 800394c:	e054      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fd f9d8 	bl	8000d08 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395c:	f7fd f9d4 	bl	8000d08 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e045      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x444>
 800397a:	e03d      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e038      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000
 8003990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCC_OscConfig+0x4ec>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d028      	beq.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d121      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d11a      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d111      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d90c      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d044      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d119      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e067      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4934      	ldr	r1, [pc, #208]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af8:	f7fd f906 	bl	8000d08 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fd f902 	bl	8000d08 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d20c      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	5ccb      	ldrb	r3, [r1, r3]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fd f866 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08004e98 	.word	0x08004e98
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	20000010 	.word	0x20000010

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b094      	sub	sp, #80	; 0x50
 8003bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	647b      	str	r3, [r7, #68]	; 0x44
 8003be0:	2300      	movs	r3, #0
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be4:	2300      	movs	r3, #0
 8003be6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bec:	4b79      	ldr	r3, [pc, #484]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d00d      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	f200 80e1 	bhi.w	8003dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x34>
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c06:	e0db      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c0c:	e0db      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0e:	4b73      	ldr	r3, [pc, #460]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8003c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c12:	e0d8      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c14:	4b6f      	ldr	r3, [pc, #444]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d063      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2a:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	2200      	movs	r2, #0
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3e:	2300      	movs	r3, #0
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
 8003c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c46:	4622      	mov	r2, r4
 8003c48:	462b      	mov	r3, r5
 8003c4a:	f04f 0000 	mov.w	r0, #0
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	0159      	lsls	r1, r3, #5
 8003c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c58:	0150      	lsls	r0, r2, #5
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4621      	mov	r1, r4
 8003c60:	1a51      	subs	r1, r2, r1
 8003c62:	6139      	str	r1, [r7, #16]
 8003c64:	4629      	mov	r1, r5
 8003c66:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c78:	4659      	mov	r1, fp
 8003c7a:	018b      	lsls	r3, r1, #6
 8003c7c:	4651      	mov	r1, sl
 8003c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c82:	4651      	mov	r1, sl
 8003c84:	018a      	lsls	r2, r1, #6
 8003c86:	4651      	mov	r1, sl
 8003c88:	ebb2 0801 	subs.w	r8, r2, r1
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca6:	4690      	mov	r8, r2
 8003ca8:	4699      	mov	r9, r3
 8003caa:	4623      	mov	r3, r4
 8003cac:	eb18 0303 	adds.w	r3, r8, r3
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	462b      	mov	r3, r5
 8003cb4:	eb49 0303 	adc.w	r3, r9, r3
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	024b      	lsls	r3, r1, #9
 8003cca:	4621      	mov	r1, r4
 8003ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	024a      	lsls	r2, r1, #9
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cda:	2200      	movs	r2, #0
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ce4:	f7fc fa8a 	bl	80001fc <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4613      	mov	r3, r2
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf0:	e058      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf2:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	099b      	lsrs	r3, r3, #6
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	2300      	movs	r3, #0
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
 8003d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	464b      	mov	r3, r9
 8003d10:	f04f 0000 	mov.w	r0, #0
 8003d14:	f04f 0100 	mov.w	r1, #0
 8003d18:	0159      	lsls	r1, r3, #5
 8003d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d1e:	0150      	lsls	r0, r2, #5
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4641      	mov	r1, r8
 8003d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d44:	ebb2 040a 	subs.w	r4, r2, sl
 8003d48:	eb63 050b 	sbc.w	r5, r3, fp
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	00eb      	lsls	r3, r5, #3
 8003d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d5a:	00e2      	lsls	r2, r4, #3
 8003d5c:	4614      	mov	r4, r2
 8003d5e:	461d      	mov	r5, r3
 8003d60:	4643      	mov	r3, r8
 8003d62:	18e3      	adds	r3, r4, r3
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	464b      	mov	r3, r9
 8003d68:	eb45 0303 	adc.w	r3, r5, r3
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	028b      	lsls	r3, r1, #10
 8003d7e:	4621      	mov	r1, r4
 8003d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d84:	4621      	mov	r1, r4
 8003d86:	028a      	lsls	r2, r1, #10
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8e:	2200      	movs	r2, #0
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	61fa      	str	r2, [r7, #28]
 8003d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d98:	f7fc fa30 	bl	80001fc <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4613      	mov	r3, r2
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dbe:	e002      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3750      	adds	r7, #80	; 0x50
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200

08003de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000000 	.word	0x20000000

08003df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dfc:	f7ff fff0 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0a9b      	lsrs	r3, r3, #10
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4903      	ldr	r1, [pc, #12]	; (8003e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	08004ea8 	.word	0x08004ea8

08003e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e24:	f7ff ffdc 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	0b5b      	lsrs	r3, r3, #13
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4903      	ldr	r1, [pc, #12]	; (8003e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40023800 	.word	0x40023800
 8003e44:	08004ea8 	.word	0x08004ea8

08003e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e03f      	b.n	8003eda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff faba 	bl	80033e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2224      	movs	r2, #36	; 0x24
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f929 	bl	80040e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08a      	sub	sp, #40	; 0x28
 8003ee6:	af02      	add	r7, sp, #8
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	603b      	str	r3, [r7, #0]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d17c      	bne.n	8003ffc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_UART_Transmit+0x2c>
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e075      	b.n	8003ffe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_UART_Transmit+0x3e>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e06e      	b.n	8003ffe <HAL_UART_Transmit+0x11c>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2221      	movs	r2, #33	; 0x21
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f36:	f7fc fee7 	bl	8000d08 <HAL_GetTick>
 8003f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	88fa      	ldrh	r2, [r7, #6]
 8003f46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f50:	d108      	bne.n	8003f64 <HAL_UART_Transmit+0x82>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d104      	bne.n	8003f64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e003      	b.n	8003f6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f74:	e02a      	b.n	8003fcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2180      	movs	r1, #128	; 0x80
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f840 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e036      	b.n	8003ffe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10b      	bne.n	8003fae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	3302      	adds	r3, #2
 8003faa:	61bb      	str	r3, [r7, #24]
 8003fac:	e007      	b.n	8003fbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1cf      	bne.n	8003f76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2140      	movs	r1, #64	; 0x40
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f810 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e006      	b.n	8003ffe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b090      	sub	sp, #64	; 0x40
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4613      	mov	r3, r2
 8004014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004016:	e050      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d04c      	beq.n	80040ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <UART_WaitOnFlagUntilTimeout+0x30>
 8004026:	f7fc fe6f 	bl	8000d08 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004032:	429a      	cmp	r2, r3
 8004034:	d241      	bcs.n	80040ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004056:	637a      	str	r2, [r7, #52]	; 0x34
 8004058:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800405c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e5      	bne.n	8004036 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	613b      	str	r3, [r7, #16]
   return(result);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3314      	adds	r3, #20
 8004088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800408a:	623a      	str	r2, [r7, #32]
 800408c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	69f9      	ldr	r1, [r7, #28]
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	61bb      	str	r3, [r7, #24]
   return(result);
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e00f      	b.n	80040da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4013      	ands	r3, r2
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d09f      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3740      	adds	r7, #64	; 0x40
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e8:	b0c0      	sub	sp, #256	; 0x100
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	68d9      	ldr	r1, [r3, #12]
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	ea40 0301 	orr.w	r3, r0, r1
 800410c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	431a      	orrs	r2, r3
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	431a      	orrs	r2, r3
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800413c:	f021 010c 	bic.w	r1, r1, #12
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800414a:	430b      	orrs	r3, r1
 800414c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415e:	6999      	ldr	r1, [r3, #24]
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	ea40 0301 	orr.w	r3, r0, r1
 800416a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b8f      	ldr	r3, [pc, #572]	; (80043b0 <UART_SetConfig+0x2cc>)
 8004174:	429a      	cmp	r2, r3
 8004176:	d005      	beq.n	8004184 <UART_SetConfig+0xa0>
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4b8d      	ldr	r3, [pc, #564]	; (80043b4 <UART_SetConfig+0x2d0>)
 8004180:	429a      	cmp	r2, r3
 8004182:	d104      	bne.n	800418e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004184:	f7ff fe4c 	bl	8003e20 <HAL_RCC_GetPCLK2Freq>
 8004188:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800418c:	e003      	b.n	8004196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800418e:	f7ff fe33 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004192:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a0:	f040 810c 	bne.w	80043bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	1891      	adds	r1, r2, r2
 80041bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80041be:	415b      	adcs	r3, r3
 80041c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041c6:	4621      	mov	r1, r4
 80041c8:	eb12 0801 	adds.w	r8, r2, r1
 80041cc:	4629      	mov	r1, r5
 80041ce:	eb43 0901 	adc.w	r9, r3, r1
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041e6:	4690      	mov	r8, r2
 80041e8:	4699      	mov	r9, r3
 80041ea:	4623      	mov	r3, r4
 80041ec:	eb18 0303 	adds.w	r3, r8, r3
 80041f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041f4:	462b      	mov	r3, r5
 80041f6:	eb49 0303 	adc.w	r3, r9, r3
 80041fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800420a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800420e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004212:	460b      	mov	r3, r1
 8004214:	18db      	adds	r3, r3, r3
 8004216:	653b      	str	r3, [r7, #80]	; 0x50
 8004218:	4613      	mov	r3, r2
 800421a:	eb42 0303 	adc.w	r3, r2, r3
 800421e:	657b      	str	r3, [r7, #84]	; 0x54
 8004220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004228:	f7fb ffe8 	bl	80001fc <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4b61      	ldr	r3, [pc, #388]	; (80043b8 <UART_SetConfig+0x2d4>)
 8004232:	fba3 2302 	umull	r2, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	011c      	lsls	r4, r3, #4
 800423a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800423e:	2200      	movs	r2, #0
 8004240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004244:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800424c:	4642      	mov	r2, r8
 800424e:	464b      	mov	r3, r9
 8004250:	1891      	adds	r1, r2, r2
 8004252:	64b9      	str	r1, [r7, #72]	; 0x48
 8004254:	415b      	adcs	r3, r3
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800425c:	4641      	mov	r1, r8
 800425e:	eb12 0a01 	adds.w	sl, r2, r1
 8004262:	4649      	mov	r1, r9
 8004264:	eb43 0b01 	adc.w	fp, r3, r1
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800427c:	4692      	mov	sl, r2
 800427e:	469b      	mov	fp, r3
 8004280:	4643      	mov	r3, r8
 8004282:	eb1a 0303 	adds.w	r3, sl, r3
 8004286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800428a:	464b      	mov	r3, r9
 800428c:	eb4b 0303 	adc.w	r3, fp, r3
 8004290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042a8:	460b      	mov	r3, r1
 80042aa:	18db      	adds	r3, r3, r3
 80042ac:	643b      	str	r3, [r7, #64]	; 0x40
 80042ae:	4613      	mov	r3, r2
 80042b0:	eb42 0303 	adc.w	r3, r2, r3
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
 80042b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042be:	f7fb ff9d 	bl	80001fc <__aeabi_uldivmod>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <UART_SetConfig+0x2d4>)
 80042ca:	fba3 2301 	umull	r2, r3, r3, r1
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2264      	movs	r2, #100	; 0x64
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	1acb      	subs	r3, r1, r3
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042de:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <UART_SetConfig+0x2d4>)
 80042e0:	fba3 2302 	umull	r2, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ec:	441c      	add	r4, r3
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	63b9      	str	r1, [r7, #56]	; 0x38
 8004308:	415b      	adcs	r3, r3
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6339      	str	r1, [r7, #48]	; 0x30
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	637b      	str	r3, [r7, #52]	; 0x34
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004344:	464b      	mov	r3, r9
 8004346:	460a      	mov	r2, r1
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800435c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004364:	460b      	mov	r3, r1
 8004366:	18db      	adds	r3, r3, r3
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
 800436a:	4613      	mov	r3, r2
 800436c:	eb42 0303 	adc.w	r3, r2, r3
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800437a:	f7fb ff3f 	bl	80001fc <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <UART_SetConfig+0x2d4>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	2164      	movs	r1, #100	; 0x64
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	3332      	adds	r3, #50	; 0x32
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <UART_SetConfig+0x2d4>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 0207 	and.w	r2, r3, #7
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4422      	add	r2, r4
 80043aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043ac:	e105      	b.n	80045ba <UART_SetConfig+0x4d6>
 80043ae:	bf00      	nop
 80043b0:	40011000 	.word	0x40011000
 80043b4:	40011400 	.word	0x40011400
 80043b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043ce:	4642      	mov	r2, r8
 80043d0:	464b      	mov	r3, r9
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	6239      	str	r1, [r7, #32]
 80043d6:	415b      	adcs	r3, r3
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043de:	4641      	mov	r1, r8
 80043e0:	1854      	adds	r4, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb43 0501 	adc.w	r5, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	00eb      	lsls	r3, r5, #3
 80043f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f6:	00e2      	lsls	r2, r4, #3
 80043f8:	4614      	mov	r4, r2
 80043fa:	461d      	mov	r5, r3
 80043fc:	4643      	mov	r3, r8
 80043fe:	18e3      	adds	r3, r4, r3
 8004400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004404:	464b      	mov	r3, r9
 8004406:	eb45 0303 	adc.w	r3, r5, r3
 800440a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800441a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800442a:	4629      	mov	r1, r5
 800442c:	008b      	lsls	r3, r1, #2
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004434:	4621      	mov	r1, r4
 8004436:	008a      	lsls	r2, r1, #2
 8004438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800443c:	f7fb fede 	bl	80001fc <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4b60      	ldr	r3, [pc, #384]	; (80045c8 <UART_SetConfig+0x4e4>)
 8004446:	fba3 2302 	umull	r2, r3, r3, r2
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	011c      	lsls	r4, r3, #4
 800444e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004452:	2200      	movs	r2, #0
 8004454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800445c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004460:	4642      	mov	r2, r8
 8004462:	464b      	mov	r3, r9
 8004464:	1891      	adds	r1, r2, r2
 8004466:	61b9      	str	r1, [r7, #24]
 8004468:	415b      	adcs	r3, r3
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004470:	4641      	mov	r1, r8
 8004472:	1851      	adds	r1, r2, r1
 8004474:	6139      	str	r1, [r7, #16]
 8004476:	4649      	mov	r1, r9
 8004478:	414b      	adcs	r3, r1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004488:	4659      	mov	r1, fp
 800448a:	00cb      	lsls	r3, r1, #3
 800448c:	4651      	mov	r1, sl
 800448e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004492:	4651      	mov	r1, sl
 8004494:	00ca      	lsls	r2, r1, #3
 8004496:	4610      	mov	r0, r2
 8004498:	4619      	mov	r1, r3
 800449a:	4603      	mov	r3, r0
 800449c:	4642      	mov	r2, r8
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044a4:	464b      	mov	r3, r9
 80044a6:	460a      	mov	r2, r1
 80044a8:	eb42 0303 	adc.w	r3, r2, r3
 80044ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044c8:	4649      	mov	r1, r9
 80044ca:	008b      	lsls	r3, r1, #2
 80044cc:	4641      	mov	r1, r8
 80044ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d2:	4641      	mov	r1, r8
 80044d4:	008a      	lsls	r2, r1, #2
 80044d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044da:	f7fb fe8f 	bl	80001fc <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <UART_SetConfig+0x4e4>)
 80044e4:	fba3 1302 	umull	r1, r3, r3, r2
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	2164      	movs	r1, #100	; 0x64
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	3332      	adds	r3, #50	; 0x32
 80044f6:	4a34      	ldr	r2, [pc, #208]	; (80045c8 <UART_SetConfig+0x4e4>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004502:	441c      	add	r4, r3
 8004504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004508:	2200      	movs	r2, #0
 800450a:	673b      	str	r3, [r7, #112]	; 0x70
 800450c:	677a      	str	r2, [r7, #116]	; 0x74
 800450e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004512:	4642      	mov	r2, r8
 8004514:	464b      	mov	r3, r9
 8004516:	1891      	adds	r1, r2, r2
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	415b      	adcs	r3, r3
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004522:	4641      	mov	r1, r8
 8004524:	1851      	adds	r1, r2, r1
 8004526:	6039      	str	r1, [r7, #0]
 8004528:	4649      	mov	r1, r9
 800452a:	414b      	adcs	r3, r1
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800453a:	4659      	mov	r1, fp
 800453c:	00cb      	lsls	r3, r1, #3
 800453e:	4651      	mov	r1, sl
 8004540:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004544:	4651      	mov	r1, sl
 8004546:	00ca      	lsls	r2, r1, #3
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	4603      	mov	r3, r0
 800454e:	4642      	mov	r2, r8
 8004550:	189b      	adds	r3, r3, r2
 8004552:	66bb      	str	r3, [r7, #104]	; 0x68
 8004554:	464b      	mov	r3, r9
 8004556:	460a      	mov	r2, r1
 8004558:	eb42 0303 	adc.w	r3, r2, r3
 800455c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	663b      	str	r3, [r7, #96]	; 0x60
 8004568:	667a      	str	r2, [r7, #100]	; 0x64
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004576:	4649      	mov	r1, r9
 8004578:	008b      	lsls	r3, r1, #2
 800457a:	4641      	mov	r1, r8
 800457c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004580:	4641      	mov	r1, r8
 8004582:	008a      	lsls	r2, r1, #2
 8004584:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004588:	f7fb fe38 	bl	80001fc <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <UART_SetConfig+0x4e4>)
 8004592:	fba3 1302 	umull	r1, r3, r3, r2
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2164      	movs	r1, #100	; 0x64
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	3332      	adds	r3, #50	; 0x32
 80045a4:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <UART_SetConfig+0x4e4>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	f003 020f 	and.w	r2, r3, #15
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4422      	add	r2, r4
 80045b8:	609a      	str	r2, [r3, #8]
}
 80045ba:	bf00      	nop
 80045bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045c0:	46bd      	mov	sp, r7
 80045c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c6:	bf00      	nop
 80045c8:	51eb851f 	.word	0x51eb851f

080045cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045d0:	e7fe      	b.n	80045d0 <NMI_Handler+0x4>

080045d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045d2:	b480      	push	{r7}
 80045d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045d6:	e7fe      	b.n	80045d6 <HardFault_Handler+0x4>

080045d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045dc:	e7fe      	b.n	80045dc <MemManage_Handler+0x4>

080045de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045de:	b480      	push	{r7}
 80045e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045e2:	e7fe      	b.n	80045e2 <BusFault_Handler+0x4>

080045e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045e8:	e7fe      	b.n	80045e8 <UsageFault_Handler+0x4>

080045ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800460a:	bf00      	nop
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004618:	f7fc fb62 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800461c:	bf00      	nop
 800461e:	bd80      	pop	{r7, pc}

08004620 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c);
 8004624:	4802      	ldr	r0, [pc, #8]	; (8004630 <I2C2_EV_IRQHandler+0x10>)
 8004626:	f7fd fa49 	bl	8001abc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */
  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800462a:	bf00      	nop
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	2000009c 	.word	0x2000009c

08004634 <DEV_TimerInit>:
 * @param
 * 		timer		[I] - Timer definition
 * 		duration 	[I] - Duration of counter
 * @retval ret - Return API value
 */
retType DEV_TimerInit(ttimer_t * timer, tick_t duration){
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]

	retType ret = API_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]

	if(timer == 0 || duration <= 0 || duration > MAX_DELAY) return API_ERROR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <DEV_TimerInit+0x24>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <DEV_TimerInit+0x24>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	f247 5230 	movw	r2, #30000	; 0x7530
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <DEV_TimerInit+0x28>
 8004658:	2301      	movs	r3, #1
 800465a:	e009      	b.n	8004670 <DEV_TimerInit+0x3c>
	timer->startTime = 0;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
	timer->duration = duration;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	605a      	str	r2, [r3, #4]
	timer->running = false;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	721a      	strb	r2, [r3, #8]
	return ret;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <DEV_TimerRead>:
 * @param
 * 		timer		[I] - Timer definition
 * 		done	 	[O] - Time expired
 * @retval ret - Return API value
 */
retType DEV_TimerRead(ttimer_t * timer, bool_t * done){
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]

	retType ret = API_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
	uint32_t time = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]

	if(timer->running == false){	//Initialization check
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	7a1b      	ldrb	r3, [r3, #8]
 8004692:	f083 0301 	eor.w	r3, r3, #1
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <DEV_TimerRead+0x32>
		timer->startTime = HAL_GetTick();
 800469c:	f7fc fb34 	bl	8000d08 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
		timer->running = true;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	721a      	strb	r2, [r3, #8]
 80046ac:	e013      	b.n	80046d6 <DEV_TimerRead+0x5a>
	}
	else{
		time = HAL_GetTick() - (timer->startTime);		//Get difference
 80046ae:	f7fc fb2b 	bl	8000d08 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	60bb      	str	r3, [r7, #8]
		if(time >= timer->duration){		//Time control
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d307      	bcc.n	80046d6 <DEV_TimerRead+0x5a>
			timer->running = false;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	721a      	strb	r2, [r3, #8]
			*done = true;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
			return ret;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	e003      	b.n	80046de <DEV_TimerRead+0x62>
		}
	}
	*done = false;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
	return ret;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <DEV_UARTSendChar>:
 * @brief  UART Write a Char
 * @param
 * 		pstring		[I] - Data Buffer
 * @retval ret - Return API value
 */
retType DEV_UARTSendChar(uint8_t * pstring){
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	73fb      	strb	r3, [r7, #15]

	ret |= HAL_UART_Transmit(&huart, pstring, 1, TIME_OUT);
 80046f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f8:	2201      	movs	r2, #1
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4806      	ldr	r0, [pc, #24]	; (8004718 <DEV_UARTSendChar+0x30>)
 80046fe:	f7ff fbf0 	bl	8003ee2 <HAL_UART_Transmit>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	4313      	orrs	r3, r2
 800470a:	73fb      	strb	r3, [r7, #15]

	return ret;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000058 	.word	0x20000058

0800471c <DEV_UARTSendStringSize>:
 * @param
 * 		pstring		[I] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType DEV_UARTSendStringSize(uint8_t * pstring, uint16_t size){
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]

	retType ret = API_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	73fb      	strb	r3, [r7, #15]

	if(size == 0) return API_ERROR;
 800472c:	887b      	ldrh	r3, [r7, #2]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <DEV_UARTSendStringSize+0x1a>
 8004732:	2301      	movs	r3, #1
 8004734:	e00c      	b.n	8004750 <DEV_UARTSendStringSize+0x34>
	ret |= HAL_UART_Transmit(&huart, pstring, size, TIME_OUT);
 8004736:	887a      	ldrh	r2, [r7, #2]
 8004738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4806      	ldr	r0, [pc, #24]	; (8004758 <DEV_UARTSendStringSize+0x3c>)
 8004740:	f7ff fbcf 	bl	8003ee2 <HAL_UART_Transmit>
 8004744:	4603      	mov	r3, r0
 8004746:	461a      	mov	r2, r3
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	4313      	orrs	r3, r2
 800474c:	73fb      	strb	r3, [r7, #15]

	return ret;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000058 	.word	0x20000058

0800475c <DEV_UARTInit>:
 * @brief  UART Initializer function
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType DEV_UARTInit(void){
 800475c:	b5b0      	push	{r4, r5, r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]
	uint8_t str[] = "UART INITIALIZED:\n";
 8004766:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <DEV_UARTInit+0x84>)
 8004768:	1d3c      	adds	r4, r7, #4
 800476a:	461d      	mov	r5, r3
 800476c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800476e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	8022      	strh	r2, [r4, #0]
 8004776:	3402      	adds	r4, #2
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	7023      	strb	r3, [r4, #0]

	huart.Instance = USARTx;
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <DEV_UARTInit+0x88>)
 800477e:	4a1a      	ldr	r2, [pc, #104]	; (80047e8 <DEV_UARTInit+0x8c>)
 8004780:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate= UART_BAUDRATE;
 8004782:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <DEV_UARTInit+0x88>)
 8004784:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004788:	605a      	str	r2, [r3, #4]
	huart.Init.HwFlowCtl = UART_HWFLOWCTL;
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <DEV_UARTInit+0x88>)
 800478c:	2200      	movs	r2, #0
 800478e:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE;
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <DEV_UARTInit+0x88>)
 8004792:	220c      	movs	r2, #12
 8004794:	615a      	str	r2, [r3, #20]
	huart.Init.OverSampling = UART_OVERSAMPLING;
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <DEV_UARTInit+0x88>)
 8004798:	2200      	movs	r2, #0
 800479a:	61da      	str	r2, [r3, #28]
	huart.Init.Parity = UART_PARITY;
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <DEV_UARTInit+0x88>)
 800479e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80047a2:	611a      	str	r2, [r3, #16]
	huart.Init.StopBits = UART_STOPBITS;
 80047a4:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <DEV_UARTInit+0x88>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	60da      	str	r2, [r3, #12]
	huart.Init.WordLength = UART_WORDLENGTH;
 80047aa:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <DEV_UARTInit+0x88>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	609a      	str	r2, [r3, #8]

	ret |= HAL_UART_Init(&huart);
 80047b0:	480c      	ldr	r0, [pc, #48]	; (80047e4 <DEV_UARTInit+0x88>)
 80047b2:	f7ff fb49 	bl	8003e48 <HAL_UART_Init>
 80047b6:	4603      	mov	r3, r0
 80047b8:	461a      	mov	r2, r3
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
 80047bc:	4313      	orrs	r3, r2
 80047be:	75fb      	strb	r3, [r7, #23]
	if(ret != API_OK) return ret;
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <DEV_UARTInit+0x6e>
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
 80047c8:	e005      	b.n	80047d6 <DEV_UARTInit+0x7a>
	else DEV_UARTSendStringSize(str, sizeof(str));
 80047ca:	1d3b      	adds	r3, r7, #4
 80047cc:	2113      	movs	r1, #19
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff ffa4 	bl	800471c <DEV_UARTSendStringSize>
	return ret;
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bdb0      	pop	{r4, r5, r7, pc}
 80047de:	bf00      	nop
 80047e0:	08004e84 	.word	0x08004e84
 80047e4:	20000058 	.word	0x20000058
 80047e8:	40004800 	.word	0x40004800

080047ec <APP_MPU9250Write>:
 * 		addr2write	[I] - MPU Slave address
 * 		pdata 		[I] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType APP_MPU9250Write(uint8_t addr2write, uint8_t * pdata, uint16_t size){
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	71fb      	strb	r3, [r7, #7]
 80047f8:	4613      	mov	r3, r2
 80047fa:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]

	if(size <= 0) ret = API_ERROR;
 8004800:	88bb      	ldrh	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <APP_MPU9250Write+0x1e>
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <APP_MPU9250Write+0x28>
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	e016      	b.n	8004842 <APP_MPU9250Write+0x56>

	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2write, 1);
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	2201      	movs	r2, #1
 8004818:	4619      	mov	r1, r3
 800481a:	20d0      	movs	r0, #208	; 0xd0
 800481c:	f000 f9ee 	bl	8004bfc <DEV_I2CWrite>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	4313      	orrs	r3, r2
 8004828:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, pdata, size);
 800482a:	88bb      	ldrh	r3, [r7, #4]
 800482c:	461a      	mov	r2, r3
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	20d0      	movs	r0, #208	; 0xd0
 8004832:	f000 f9e3 	bl	8004bfc <DEV_I2CWrite>
 8004836:	4603      	mov	r3, r0
 8004838:	461a      	mov	r2, r3
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	4313      	orrs	r3, r2
 800483e:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <APP_MPU9250Read>:
 * 		addr2read	[I] - MPU Slave address
 * 		pdata 		[O] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType APP_MPU9250Read(uint8_t addr2read, uint8_t * pdata, uint16_t size){
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	4603      	mov	r3, r0
 8004852:	6039      	str	r1, [r7, #0]
 8004854:	71fb      	strb	r3, [r7, #7]
 8004856:	4613      	mov	r3, r2
 8004858:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]

	if(size <= 0) ret = API_ERROR;
 800485e:	88bb      	ldrh	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <APP_MPU9250Read+0x1e>
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <APP_MPU9250Read+0x28>
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	e016      	b.n	80048a0 <APP_MPU9250Read+0x56>

	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2read, 1);
 8004872:	1dfb      	adds	r3, r7, #7
 8004874:	2201      	movs	r2, #1
 8004876:	4619      	mov	r1, r3
 8004878:	20d0      	movs	r0, #208	; 0xd0
 800487a:	f000 f9bf 	bl	8004bfc <DEV_I2CWrite>
 800487e:	4603      	mov	r3, r0
 8004880:	461a      	mov	r2, r3
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	4313      	orrs	r3, r2
 8004886:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CRead(MPU9250_SLAVEADDR, pdata, size);
 8004888:	88bb      	ldrh	r3, [r7, #4]
 800488a:	461a      	mov	r2, r3
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	20d0      	movs	r0, #208	; 0xd0
 8004890:	f000 f9dc 	bl	8004c4c <DEV_I2CRead>
 8004894:	4603      	mov	r3, r0
 8004896:	461a      	mov	r2, r3
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	4313      	orrs	r3, r2
 800489c:	73fb      	strb	r3, [r7, #15]

	return ret;
 800489e:	7bfb      	ldrb	r3, [r7, #15]

}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <APP_MPU9250Init>:
 * @brief  MPU9250 Initializer function
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType APP_MPU9250Init(void){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	71fb      	strb	r3, [r7, #7]

	ret |= DEV_I2CIsReady(MPU9250_SLAVEADDR);
 80048b2:	20d0      	movs	r0, #208	; 0xd0
 80048b4:	f000 f9f2 	bl	8004c9c <DEV_I2CIsReady>
 80048b8:	4603      	mov	r3, r0
 80048ba:	461a      	mov	r2, r3
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	4313      	orrs	r3, r2
 80048c0:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <APP_MPU9250Init+0x24>
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	e04b      	b.n	8004964 <APP_MPU9250Init+0xbc>

	ret |= APP_MPU9250Write(MPU9250_PWR_MGMT_1, (uint8_t*)0x0, 1);
 80048cc:	2201      	movs	r2, #1
 80048ce:	2100      	movs	r1, #0
 80048d0:	206b      	movs	r0, #107	; 0x6b
 80048d2:	f7ff ff8b 	bl	80047ec <APP_MPU9250Write>
 80048d6:	4603      	mov	r3, r0
 80048d8:	461a      	mov	r2, r3
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	4313      	orrs	r3, r2
 80048de:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <APP_MPU9250Init+0x42>
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	e03c      	b.n	8004964 <APP_MPU9250Init+0xbc>
	ret |= APP_MPU9250Write(MPU9250_PWR_MGMT_1, (uint8_t*)0x1, 1);
 80048ea:	2201      	movs	r2, #1
 80048ec:	2101      	movs	r1, #1
 80048ee:	206b      	movs	r0, #107	; 0x6b
 80048f0:	f7ff ff7c 	bl	80047ec <APP_MPU9250Write>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <APP_MPU9250Init+0x60>
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	e02d      	b.n	8004964 <APP_MPU9250Init+0xbc>
	ret |= APP_MPU9250Write(MPU9250_GYRO_CONFIG, (uint8_t*)0x8, 1);
 8004908:	2201      	movs	r2, #1
 800490a:	2108      	movs	r1, #8
 800490c:	201b      	movs	r0, #27
 800490e:	f7ff ff6d 	bl	80047ec <APP_MPU9250Write>
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	4313      	orrs	r3, r2
 800491a:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_1, (uint8_t*)0x8, 1);
 800491c:	2201      	movs	r2, #1
 800491e:	2108      	movs	r1, #8
 8004920:	201c      	movs	r0, #28
 8004922:	f7ff ff63 	bl	80047ec <APP_MPU9250Write>
 8004926:	4603      	mov	r3, r0
 8004928:	461a      	mov	r2, r3
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	4313      	orrs	r3, r2
 800492e:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_2, (uint8_t*)0x5, 1);
 8004930:	2201      	movs	r2, #1
 8004932:	2105      	movs	r1, #5
 8004934:	201d      	movs	r0, #29
 8004936:	f7ff ff59 	bl	80047ec <APP_MPU9250Write>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	4313      	orrs	r3, r2
 8004942:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <APP_MPU9250Init+0xa6>
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	e00a      	b.n	8004964 <APP_MPU9250Init+0xbc>
	ret |= APP_MPU9250Write(MPU9250_CONFIG_AD, (uint8_t*)0x5, 1);
 800494e:	2201      	movs	r2, #1
 8004950:	2105      	movs	r1, #5
 8004952:	201a      	movs	r0, #26
 8004954:	f7ff ff4a 	bl	80047ec <APP_MPU9250Write>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	4313      	orrs	r3, r2
 8004960:	71fb      	strb	r3, [r7, #7]
	return ret;
 8004962:	79fb      	ldrb	r3, [r7, #7]

}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <APP_MPU9250ReadGyro>:
 * @brief  MPU9250 Read Gyroscope value per Axis
 * @param
 * 		gyro [O] - Gyroscope structure with axes
 * @retval ret - Return API value
 */
retType APP_MPU9250ReadGyro(axis_t * gyro){
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_x = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_y = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	817b      	strh	r3, [r7, #10]
	uint16_t aux_z = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	813b      	strh	r3, [r7, #8]

	ret |= APP_MPU9250Read(MPU9250_GYRO_XOUT_H, (uint8_t*)&aux_x, 2);
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	2202      	movs	r2, #2
 800498a:	4619      	mov	r1, r3
 800498c:	2043      	movs	r0, #67	; 0x43
 800498e:	f7ff ff5c 	bl	800484a <APP_MPU9250Read>
 8004992:	4603      	mov	r3, r0
 8004994:	461a      	mov	r2, r3
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	4313      	orrs	r3, r2
 800499a:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_YOUT_H, (uint8_t*)&aux_y, 2);
 800499c:	f107 030a 	add.w	r3, r7, #10
 80049a0:	2202      	movs	r2, #2
 80049a2:	4619      	mov	r1, r3
 80049a4:	2045      	movs	r0, #69	; 0x45
 80049a6:	f7ff ff50 	bl	800484a <APP_MPU9250Read>
 80049aa:	4603      	mov	r3, r0
 80049ac:	461a      	mov	r2, r3
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_ZOUT_H, (uint8_t*)&aux_z, 2);
 80049b4:	f107 0308 	add.w	r3, r7, #8
 80049b8:	2202      	movs	r2, #2
 80049ba:	4619      	mov	r1, r3
 80049bc:	2047      	movs	r0, #71	; 0x47
 80049be:	f7ff ff44 	bl	800484a <APP_MPU9250Read>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	73fb      	strb	r3, [r7, #15]

	ret |= gyro_convert(aux_x, &(gyro->x));
 80049cc:	89bb      	ldrh	r3, [r7, #12]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f89d 	bl	8004b12 <gyro_convert>
 80049d8:	4603      	mov	r3, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	4313      	orrs	r3, r2
 80049e0:	73fb      	strb	r3, [r7, #15]
	ret |= gyro_convert(aux_y, &(gyro->y));
 80049e2:	897a      	ldrh	r2, [r7, #10]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3302      	adds	r3, #2
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f000 f891 	bl	8004b12 <gyro_convert>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	73fb      	strb	r3, [r7, #15]
	ret |= gyro_convert(aux_z, &(gyro->z));
 80049fa:	893a      	ldrh	r2, [r7, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f000 f885 	bl	8004b12 <gyro_convert>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	73fb      	strb	r3, [r7, #15]
	return ret;
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <APP_MPU9250ReadAccl>:
 * @brief  MPU9250 Read Accelerometer value per Axis
 * @param
 * 		accl [O] - Accelerometer structure with axes
 * @retval ret - Return API value
 */
retType APP_MPU9250ReadAccl(axis_t * accl){
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_x = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_y = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	817b      	strh	r3, [r7, #10]
	uint16_t aux_z = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	813b      	strh	r3, [r7, #8]

	ret |= APP_MPU9250Read(MPU9250_ACCEL_XOUT_H, (uint8_t*)&aux_x, 2);
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	2202      	movs	r2, #2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	203b      	movs	r0, #59	; 0x3b
 8004a3e:	f7ff ff04 	bl	800484a <APP_MPU9250Read>
 8004a42:	4603      	mov	r3, r0
 8004a44:	461a      	mov	r2, r3
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_YOUT_H, (uint8_t*)&aux_y, 2);
 8004a4c:	f107 030a 	add.w	r3, r7, #10
 8004a50:	2202      	movs	r2, #2
 8004a52:	4619      	mov	r1, r3
 8004a54:	203d      	movs	r0, #61	; 0x3d
 8004a56:	f7ff fef8 	bl	800484a <APP_MPU9250Read>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_ZOUT_H, (uint8_t*)&aux_z, 2);
 8004a64:	f107 0308 	add.w	r3, r7, #8
 8004a68:	2202      	movs	r2, #2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	203f      	movs	r0, #63	; 0x3f
 8004a6e:	f7ff feec 	bl	800484a <APP_MPU9250Read>
 8004a72:	4603      	mov	r3, r0
 8004a74:	461a      	mov	r2, r3
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	73fb      	strb	r3, [r7, #15]

	ret |= accl_convert(aux_x, &(accl->x));
 8004a7c:	89bb      	ldrh	r3, [r7, #12]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4611      	mov	r1, r2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f857 	bl	8004b36 <accl_convert>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	73fb      	strb	r3, [r7, #15]
	ret |= accl_convert(aux_y, &(accl->y));
 8004a92:	897a      	ldrh	r2, [r7, #10]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3302      	adds	r3, #2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f000 f84b 	bl	8004b36 <accl_convert>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	73fb      	strb	r3, [r7, #15]
	ret |= accl_convert(aux_z, &(accl->z));
 8004aaa:	893a      	ldrh	r2, [r7, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f000 f83f 	bl	8004b36 <accl_convert>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	73fb      	strb	r3, [r7, #15]
	return ret;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <APP_MPU9250ReadTemp>:
 * @brief  MPU9250 Read Temperature value
 * @param
 * 		temp [O] - Temperature value
 * @retval ret - Return API value
 */
retType APP_MPU9250ReadTemp(uint16_t * temp){
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_temp = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	81bb      	strh	r3, [r7, #12]

	ret |= APP_MPU9250Read(MPU9250_TEMP_OUT_H, (uint8_t*)&aux_temp, 2);
 8004adc:	f107 030c 	add.w	r3, r7, #12
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	2041      	movs	r0, #65	; 0x41
 8004ae6:	f7ff feb0 	bl	800484a <APP_MPU9250Read>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	73fb      	strb	r3, [r7, #15]

	ret |= temp_convert(aux_temp, temp);
 8004af4:	89bb      	ldrh	r3, [r7, #12]
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 f82f 	bl	8004b5c <temp_convert>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	73fb      	strb	r3, [r7, #15]
	return ret;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <gyro_convert>:
 * @param
 * 		axis [I] - Axis value to convert
 * 		paxis [O] - Value converted
 * @retval ret - Return API value
 */
static retType gyro_convert(uint16_t axis, uint16_t * paxis){
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	6039      	str	r1, [r7, #0]
 8004b1c:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]

	*paxis = axis;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	801a      	strh	r2, [r3, #0]
	return ret;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <accl_convert>:
 * @param
 * 		axis [I] - Axis value to convert
 * 		paxis [O] - Value converted
 * @retval ret - Return API value
 */
static retType accl_convert(uint16_t axis, uint16_t * paxis){
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	6039      	str	r1, [r7, #0]
 8004b40:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]

	*paxis = axis;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	801a      	strh	r2, [r3, #0]
	return ret;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <temp_convert>:
 * @param
 * 		axis [I] - Axis value to convert
 * 		paxis [O] - Value converted
 * @retval ret - Return API value
 */
static retType temp_convert(uint16_t temp, uint16_t * ptemp){
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	73fb      	strb	r3, [r7, #15]

	*ptemp = (temp - 0)/321 + 21;
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <temp_convert+0x38>)
 8004b70:	fb82 1203 	smull	r1, r2, r2, r3
 8004b74:	11d2      	asrs	r2, r2, #7
 8004b76:	17db      	asrs	r3, r3, #31
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3315      	adds	r3, #21
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	801a      	strh	r2, [r3, #0]
	return ret;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	6614bc37 	.word	0x6614bc37

08004b98 <DEV_I2CInit>:
 * @brief  I2C Initialization
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType DEV_I2CInit(void){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	71fb      	strb	r3, [r7, #7]
	hi2c.Instance = I2C2;
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <DEV_I2CInit+0x58>)
 8004ba4:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <DEV_I2CInit+0x5c>)
 8004ba6:	601a      	str	r2, [r3, #0]
	hi2c.Init.ClockSpeed = I2C_CLOCKSPEED;
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <DEV_I2CInit+0x58>)
 8004baa:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <DEV_I2CInit+0x60>)
 8004bac:	605a      	str	r2, [r3, #4]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <DEV_I2CInit+0x58>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	609a      	str	r2, [r3, #8]
	hi2c.Init.OwnAddress1 = I2C_OWNADDRESS1;
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <DEV_I2CInit+0x58>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	60da      	str	r2, [r3, #12]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bba:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <DEV_I2CInit+0x58>)
 8004bbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bc0:	611a      	str	r2, [r3, #16]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <DEV_I2CInit+0x58>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	615a      	str	r2, [r3, #20]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <DEV_I2CInit+0x58>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	61da      	str	r2, [r3, #28]
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <DEV_I2CInit+0x58>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	621a      	str	r2, [r3, #32]


	ret |= HAL_I2C_Init(&hi2c);
 8004bd4:	4806      	ldr	r0, [pc, #24]	; (8004bf0 <DEV_I2CInit+0x58>)
 8004bd6:	f7fc fbab 	bl	8001330 <HAL_I2C_Init>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	71fb      	strb	r3, [r7, #7]
	return ret;
 8004be4:	79fb      	ldrb	r3, [r7, #7]

}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	2000009c 	.word	0x2000009c
 8004bf4:	40005800 	.word	0x40005800
 8004bf8:	000186a0 	.word	0x000186a0

08004bfc <DEV_I2CWrite>:
 * 		slave_addr	[I] - I2C device Slave address
 * 		pdata 		[I] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType DEV_I2CWrite(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	6039      	str	r1, [r7, #0]
 8004c06:	80fb      	strh	r3, [r7, #6]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]

	ret |= HAL_I2C_Master_Transmit_IT(&hi2c, slave_addr, pdata, size);
 8004c10:	88bb      	ldrh	r3, [r7, #4]
 8004c12:	88f9      	ldrh	r1, [r7, #6]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	480c      	ldr	r0, [pc, #48]	; (8004c48 <DEV_I2CWrite+0x4c>)
 8004c18:	f7fc fcce 	bl	80015b8 <HAL_I2C_Master_Transmit_IT>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <DEV_I2CWrite+0x34>
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	e007      	b.n	8004c40 <DEV_I2CWrite+0x44>

	while(hi2c.State != HAL_I2C_STATE_READY){/**we can do anything*/}
 8004c30:	bf00      	nop
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <DEV_I2CWrite+0x4c>)
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d1f9      	bne.n	8004c32 <DEV_I2CWrite+0x36>
	return ret;
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	2000009c 	.word	0x2000009c

08004c4c <DEV_I2CRead>:
 * 		slave_addr	[I] - I2C device Slave address
 * 		pdata 		[O] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType DEV_I2CRead(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	6039      	str	r1, [r7, #0]
 8004c56:	80fb      	strh	r3, [r7, #6]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]

	ret |= HAL_I2C_Master_Receive_IT(&hi2c, slave_addr, pdata, size);
 8004c60:	88bb      	ldrh	r3, [r7, #4]
 8004c62:	88f9      	ldrh	r1, [r7, #6]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	480c      	ldr	r0, [pc, #48]	; (8004c98 <DEV_I2CRead+0x4c>)
 8004c68:	f7fc fd4c 	bl	8001704 <HAL_I2C_Master_Receive_IT>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <DEV_I2CRead+0x34>
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	e007      	b.n	8004c90 <DEV_I2CRead+0x44>

	while(hi2c.State != HAL_I2C_STATE_READY){/**we can do anything*/}
 8004c80:	bf00      	nop
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <DEV_I2CRead+0x4c>)
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d1f9      	bne.n	8004c82 <DEV_I2CRead+0x36>
	return ret;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	2000009c 	.word	0x2000009c

08004c9c <DEV_I2CIsReady>:
 * @brief  I2C Checker if communication is ready
 * @param
 * 		slave_addr	[I] - I2C device Slave address
 * @retval ret - Return API value
 */
retType DEV_I2CIsReady(uint16_t slave_addr){
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_IsDeviceReady(&hi2c, slave_addr, 2, 1000);
 8004caa:	88f9      	ldrh	r1, [r7, #6]
 8004cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	4805      	ldr	r0, [pc, #20]	; (8004cc8 <DEV_I2CIsReady+0x2c>)
 8004cb4:	f7fc fdd4 	bl	8001860 <HAL_I2C_IsDeviceReady>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
	return ret;
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	2000009c 	.word	0x2000009c

08004ccc <__libc_init_array>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	4d0d      	ldr	r5, [pc, #52]	; (8004d04 <__libc_init_array+0x38>)
 8004cd0:	4c0d      	ldr	r4, [pc, #52]	; (8004d08 <__libc_init_array+0x3c>)
 8004cd2:	1b64      	subs	r4, r4, r5
 8004cd4:	10a4      	asrs	r4, r4, #2
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	42a6      	cmp	r6, r4
 8004cda:	d109      	bne.n	8004cf0 <__libc_init_array+0x24>
 8004cdc:	4d0b      	ldr	r5, [pc, #44]	; (8004d0c <__libc_init_array+0x40>)
 8004cde:	4c0c      	ldr	r4, [pc, #48]	; (8004d10 <__libc_init_array+0x44>)
 8004ce0:	f000 f88c 	bl	8004dfc <_init>
 8004ce4:	1b64      	subs	r4, r4, r5
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	2600      	movs	r6, #0
 8004cea:	42a6      	cmp	r6, r4
 8004cec:	d105      	bne.n	8004cfa <__libc_init_array+0x2e>
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf4:	4798      	blx	r3
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	e7ee      	b.n	8004cd8 <__libc_init_array+0xc>
 8004cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfe:	4798      	blx	r3
 8004d00:	3601      	adds	r6, #1
 8004d02:	e7f2      	b.n	8004cea <__libc_init_array+0x1e>
 8004d04:	08004ee4 	.word	0x08004ee4
 8004d08:	08004ee4 	.word	0x08004ee4
 8004d0c:	08004ee4 	.word	0x08004ee4
 8004d10:	08004ee8 	.word	0x08004ee8

08004d14 <__itoa>:
 8004d14:	1e93      	subs	r3, r2, #2
 8004d16:	2b22      	cmp	r3, #34	; 0x22
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	d904      	bls.n	8004d28 <__itoa+0x14>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	700b      	strb	r3, [r1, #0]
 8004d22:	461c      	mov	r4, r3
 8004d24:	4620      	mov	r0, r4
 8004d26:	bd10      	pop	{r4, pc}
 8004d28:	2a0a      	cmp	r2, #10
 8004d2a:	d109      	bne.n	8004d40 <__itoa+0x2c>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	da07      	bge.n	8004d40 <__itoa+0x2c>
 8004d30:	232d      	movs	r3, #45	; 0x2d
 8004d32:	700b      	strb	r3, [r1, #0]
 8004d34:	4240      	negs	r0, r0
 8004d36:	2101      	movs	r1, #1
 8004d38:	4421      	add	r1, r4
 8004d3a:	f000 f81d 	bl	8004d78 <__utoa>
 8004d3e:	e7f1      	b.n	8004d24 <__itoa+0x10>
 8004d40:	2100      	movs	r1, #0
 8004d42:	e7f9      	b.n	8004d38 <__itoa+0x24>

08004d44 <itoa>:
 8004d44:	f7ff bfe6 	b.w	8004d14 <__itoa>

08004d48 <memset>:
 8004d48:	4402      	add	r2, r0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <memset+0xa>
 8004d50:	4770      	bx	lr
 8004d52:	f803 1b01 	strb.w	r1, [r3], #1
 8004d56:	e7f9      	b.n	8004d4c <memset+0x4>

08004d58 <strcat>:
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	7814      	ldrb	r4, [r2, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	3201      	adds	r2, #1
 8004d62:	2c00      	cmp	r4, #0
 8004d64:	d1fa      	bne.n	8004d5c <strcat+0x4>
 8004d66:	3b01      	subs	r3, #1
 8004d68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d70:	2a00      	cmp	r2, #0
 8004d72:	d1f9      	bne.n	8004d68 <strcat+0x10>
 8004d74:	bd10      	pop	{r4, pc}
	...

08004d78 <__utoa>:
 8004d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7a:	4c1f      	ldr	r4, [pc, #124]	; (8004df8 <__utoa+0x80>)
 8004d7c:	b08b      	sub	sp, #44	; 0x2c
 8004d7e:	4605      	mov	r5, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	466e      	mov	r6, sp
 8004d84:	f104 0c20 	add.w	ip, r4, #32
 8004d88:	6820      	ldr	r0, [r4, #0]
 8004d8a:	6861      	ldr	r1, [r4, #4]
 8004d8c:	4637      	mov	r7, r6
 8004d8e:	c703      	stmia	r7!, {r0, r1}
 8004d90:	3408      	adds	r4, #8
 8004d92:	4564      	cmp	r4, ip
 8004d94:	463e      	mov	r6, r7
 8004d96:	d1f7      	bne.n	8004d88 <__utoa+0x10>
 8004d98:	7921      	ldrb	r1, [r4, #4]
 8004d9a:	7139      	strb	r1, [r7, #4]
 8004d9c:	1e91      	subs	r1, r2, #2
 8004d9e:	6820      	ldr	r0, [r4, #0]
 8004da0:	6038      	str	r0, [r7, #0]
 8004da2:	2922      	cmp	r1, #34	; 0x22
 8004da4:	f04f 0100 	mov.w	r1, #0
 8004da8:	d904      	bls.n	8004db4 <__utoa+0x3c>
 8004daa:	7019      	strb	r1, [r3, #0]
 8004dac:	460b      	mov	r3, r1
 8004dae:	4618      	mov	r0, r3
 8004db0:	b00b      	add	sp, #44	; 0x2c
 8004db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db4:	1e58      	subs	r0, r3, #1
 8004db6:	4684      	mov	ip, r0
 8004db8:	fbb5 f7f2 	udiv	r7, r5, r2
 8004dbc:	fb02 5617 	mls	r6, r2, r7, r5
 8004dc0:	3628      	adds	r6, #40	; 0x28
 8004dc2:	446e      	add	r6, sp
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004dca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004dce:	462e      	mov	r6, r5
 8004dd0:	42b2      	cmp	r2, r6
 8004dd2:	f101 0101 	add.w	r1, r1, #1
 8004dd6:	463d      	mov	r5, r7
 8004dd8:	d9ee      	bls.n	8004db8 <__utoa+0x40>
 8004dda:	2200      	movs	r2, #0
 8004ddc:	545a      	strb	r2, [r3, r1]
 8004dde:	1919      	adds	r1, r3, r4
 8004de0:	1aa5      	subs	r5, r4, r2
 8004de2:	42aa      	cmp	r2, r5
 8004de4:	dae3      	bge.n	8004dae <__utoa+0x36>
 8004de6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004dea:	780e      	ldrb	r6, [r1, #0]
 8004dec:	7006      	strb	r6, [r0, #0]
 8004dee:	3201      	adds	r2, #1
 8004df0:	f801 5901 	strb.w	r5, [r1], #-1
 8004df4:	e7f4      	b.n	8004de0 <__utoa+0x68>
 8004df6:	bf00      	nop
 8004df8:	08004eb6 	.word	0x08004eb6

08004dfc <_init>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr

08004e08 <_fini>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	bf00      	nop
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr
