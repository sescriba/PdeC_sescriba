
MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005738  08005738  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005740  08005740  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000cc  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5f6  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000214b  00000000  00000000  0002d63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0002f790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a48  00000000  00000000  000302a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024bdb  00000000  00000000  00030cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000febd  00000000  00000000  000558cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52d7  00000000  00000000  00065788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013aa5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d50  00000000  00000000  0013aab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005664 	.word	0x08005664

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08005664 	.word	0x08005664

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <APP_SMInit>:
bool_t it_i2c;
bool_t first_time;

static retType print_string(MPU9250_t * data);

retType APP_SMInit(void){
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]

	states = SM_INIT;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <APP_SMInit+0x20>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	return ret;
 8000510:	79fb      	ldrb	r3, [r7, #7]
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000034 	.word	0x20000034

08000524 <APP_SMProccess>:

retType APP_SMProccess(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 800052a:	2300      	movs	r3, #0
 800052c:	71fb      	strb	r3, [r7, #7]
	uint8_t * str;

	switch(states){
 800052e:	4b7b      	ldr	r3, [pc, #492]	; (800071c <APP_SMProccess+0x1f8>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b05      	cmp	r3, #5
 8000534:	f200 80e6 	bhi.w	8000704 <APP_SMProccess+0x1e0>
 8000538:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <APP_SMProccess+0x1c>)
 800053a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053e:	bf00      	nop
 8000540:	08000559 	.word	0x08000559
 8000544:	080005c1 	.word	0x080005c1
 8000548:	08000619 	.word	0x08000619
 800054c:	08000671 	.word	0x08000671
 8000550:	080006c9 	.word	0x080006c9
 8000554:	080006e7 	.word	0x080006e7
		case SM_INIT:
			ret |= DEV_UARTInit();
 8000558:	f004 fd44 	bl	8004fe4 <DEV_UARTInit>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4313      	orrs	r3, r2
 8000564:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d003      	beq.n	8000574 <APP_SMProccess+0x50>
				states = SM_ERROR;
 800056c:	4b6b      	ldr	r3, [pc, #428]	; (800071c <APP_SMProccess+0x1f8>)
 800056e:	2206      	movs	r2, #6
 8000570:	701a      	strb	r2, [r3, #0]
				break;
 8000572:	e0cd      	b.n	8000710 <APP_SMProccess+0x1ec>
			}
			ret |= DEV_I2CInit();
 8000574:	f004 ff54 	bl	8005420 <DEV_I2CInit>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4313      	orrs	r3, r2
 8000580:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d003      	beq.n	8000590 <APP_SMProccess+0x6c>
				states = SM_ERROR;
 8000588:	4b64      	ldr	r3, [pc, #400]	; (800071c <APP_SMProccess+0x1f8>)
 800058a:	2206      	movs	r2, #6
 800058c:	701a      	strb	r2, [r3, #0]
				break;
 800058e:	e0bf      	b.n	8000710 <APP_SMProccess+0x1ec>
			}
			ret |= APP_MPU9250Init();
 8000590:	f004 fdce 	bl	8005130 <APP_MPU9250Init>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4313      	orrs	r3, r2
 800059c:	71fb      	strb	r3, [r7, #7]
			if(ret == API_OK){
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d109      	bne.n	80005b8 <APP_SMProccess+0x94>
				states = SM_READGYRO;
 80005a4:	4b5d      	ldr	r3, [pc, #372]	; (800071c <APP_SMProccess+0x1f8>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
				it_i2c = false;
 80005aa:	4b5d      	ldr	r3, [pc, #372]	; (8000720 <APP_SMProccess+0x1fc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
				first_time = true;
 80005b0:	4b5c      	ldr	r3, [pc, #368]	; (8000724 <APP_SMProccess+0x200>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
			}
			else{
				states = SM_ERROR;
				break;
			}
			break;
 80005b6:	e0ab      	b.n	8000710 <APP_SMProccess+0x1ec>
				states = SM_ERROR;
 80005b8:	4b58      	ldr	r3, [pc, #352]	; (800071c <APP_SMProccess+0x1f8>)
 80005ba:	2206      	movs	r2, #6
 80005bc:	701a      	strb	r2, [r3, #0]
				break;
 80005be:	e0a7      	b.n	8000710 <APP_SMProccess+0x1ec>
		case SM_READGYRO:
			if(first_time){
 80005c0:	4b58      	ldr	r3, [pc, #352]	; (8000724 <APP_SMProccess+0x200>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d011      	beq.n	80005ec <APP_SMProccess+0xc8>
				ret |= APP_MPU9250ReadGyro(&read_buff.gyro);
 80005c8:	4857      	ldr	r0, [pc, #348]	; (8000728 <APP_SMProccess+0x204>)
 80005ca:	f004 fe13 	bl	80051f4 <APP_MPU9250ReadGyro>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	71fb      	strb	r3, [r7, #7]
				if(ret != API_OK){
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d003      	beq.n	80005e6 <APP_SMProccess+0xc2>
					states = SM_ERROR;
 80005de:	4b4f      	ldr	r3, [pc, #316]	; (800071c <APP_SMProccess+0x1f8>)
 80005e0:	2206      	movs	r2, #6
 80005e2:	701a      	strb	r2, [r3, #0]
					break;
 80005e4:	e094      	b.n	8000710 <APP_SMProccess+0x1ec>
				}
				first_time = false;
 80005e6:	4b4f      	ldr	r3, [pc, #316]	; (8000724 <APP_SMProccess+0x200>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
			}
			if(it_i2c == true){
 80005ec:	4b4c      	ldr	r3, [pc, #304]	; (8000720 <APP_SMProccess+0x1fc>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d009      	beq.n	8000608 <APP_SMProccess+0xe4>
				states = SM_READACCL;
 80005f4:	4b49      	ldr	r3, [pc, #292]	; (800071c <APP_SMProccess+0x1f8>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]
				it_i2c = false;
 80005fa:	4b49      	ldr	r3, [pc, #292]	; (8000720 <APP_SMProccess+0x1fc>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
				first_time = true;
 8000600:	4b48      	ldr	r3, [pc, #288]	; (8000724 <APP_SMProccess+0x200>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
			}
			else{
				prv_state = states;
				states = SM_IDLE;
			}
			break;
 8000606:	e083      	b.n	8000710 <APP_SMProccess+0x1ec>
				prv_state = states;
 8000608:	4b44      	ldr	r3, [pc, #272]	; (800071c <APP_SMProccess+0x1f8>)
 800060a:	781a      	ldrb	r2, [r3, #0]
 800060c:	4b47      	ldr	r3, [pc, #284]	; (800072c <APP_SMProccess+0x208>)
 800060e:	701a      	strb	r2, [r3, #0]
				states = SM_IDLE;
 8000610:	4b42      	ldr	r3, [pc, #264]	; (800071c <APP_SMProccess+0x1f8>)
 8000612:	2205      	movs	r2, #5
 8000614:	701a      	strb	r2, [r3, #0]
			break;
 8000616:	e07b      	b.n	8000710 <APP_SMProccess+0x1ec>
		case SM_READACCL:
			if(first_time){
 8000618:	4b42      	ldr	r3, [pc, #264]	; (8000724 <APP_SMProccess+0x200>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d011      	beq.n	8000644 <APP_SMProccess+0x120>
				ret |= APP_MPU9250ReadAccl(&read_buff.accl);
 8000620:	4843      	ldr	r0, [pc, #268]	; (8000730 <APP_SMProccess+0x20c>)
 8000622:	f004 fe3f 	bl	80052a4 <APP_MPU9250ReadAccl>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4313      	orrs	r3, r2
 800062e:	71fb      	strb	r3, [r7, #7]
				if(ret != API_OK){
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <APP_SMProccess+0x11a>
					states = SM_ERROR;
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <APP_SMProccess+0x1f8>)
 8000638:	2206      	movs	r2, #6
 800063a:	701a      	strb	r2, [r3, #0]
					break;
 800063c:	e068      	b.n	8000710 <APP_SMProccess+0x1ec>
				}
				first_time = false;
 800063e:	4b39      	ldr	r3, [pc, #228]	; (8000724 <APP_SMProccess+0x200>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
			}
			if(it_i2c == true){
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <APP_SMProccess+0x1fc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d009      	beq.n	8000660 <APP_SMProccess+0x13c>
				states = SM_READTEMP;
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <APP_SMProccess+0x1f8>)
 800064e:	2203      	movs	r2, #3
 8000650:	701a      	strb	r2, [r3, #0]
				it_i2c = false;
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <APP_SMProccess+0x1fc>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
				first_time = true;
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <APP_SMProccess+0x200>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
			}
			else{
				prv_state = states;
				states = SM_IDLE;
			}
			break;
 800065e:	e057      	b.n	8000710 <APP_SMProccess+0x1ec>
				prv_state = states;
 8000660:	4b2e      	ldr	r3, [pc, #184]	; (800071c <APP_SMProccess+0x1f8>)
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <APP_SMProccess+0x208>)
 8000666:	701a      	strb	r2, [r3, #0]
				states = SM_IDLE;
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <APP_SMProccess+0x1f8>)
 800066a:	2205      	movs	r2, #5
 800066c:	701a      	strb	r2, [r3, #0]
			break;
 800066e:	e04f      	b.n	8000710 <APP_SMProccess+0x1ec>
		case SM_READTEMP:
			if(first_time){
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <APP_SMProccess+0x200>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d011      	beq.n	800069c <APP_SMProccess+0x178>
				ret |= APP_MPU9250ReadTemp(&read_buff.temp);
 8000678:	482e      	ldr	r0, [pc, #184]	; (8000734 <APP_SMProccess+0x210>)
 800067a:	f004 fe6b 	bl	8005354 <APP_MPU9250ReadTemp>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4313      	orrs	r3, r2
 8000686:	71fb      	strb	r3, [r7, #7]
				if(ret != API_OK){
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <APP_SMProccess+0x172>
					states = SM_ERROR;
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <APP_SMProccess+0x1f8>)
 8000690:	2206      	movs	r2, #6
 8000692:	701a      	strb	r2, [r3, #0]
					break;
 8000694:	e03c      	b.n	8000710 <APP_SMProccess+0x1ec>
				}
				first_time = false;
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <APP_SMProccess+0x200>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
			}
			if(it_i2c == true){
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <APP_SMProccess+0x1fc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d009      	beq.n	80006b8 <APP_SMProccess+0x194>
				states = SM_PRINT;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <APP_SMProccess+0x1f8>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	701a      	strb	r2, [r3, #0]
				it_i2c = false;
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <APP_SMProccess+0x1fc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				first_time = true;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <APP_SMProccess+0x200>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
			}
			else{
				prv_state = states;
				states = SM_IDLE;
			}
			break;
 80006b6:	e02b      	b.n	8000710 <APP_SMProccess+0x1ec>
				prv_state = states;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <APP_SMProccess+0x1f8>)
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <APP_SMProccess+0x208>)
 80006be:	701a      	strb	r2, [r3, #0]
				states = SM_IDLE;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <APP_SMProccess+0x1f8>)
 80006c2:	2205      	movs	r2, #5
 80006c4:	701a      	strb	r2, [r3, #0]
			break;
 80006c6:	e023      	b.n	8000710 <APP_SMProccess+0x1ec>
		case SM_PRINT:
			ret |= print_string(&read_buff);
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <APP_SMProccess+0x204>)
 80006ca:	f000 f835 	bl	8000738 <print_string>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	71fb      	strb	r3, [r7, #7]
			if(ret == API_OK) states = SM_READGYRO;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d115      	bne.n	800070a <APP_SMProccess+0x1e6>
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <APP_SMProccess+0x1f8>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
			break;
 80006e4:	e011      	b.n	800070a <APP_SMProccess+0x1e6>
		case SM_IDLE:
			it_i2c = true;	//debug
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <APP_SMProccess+0x1fc>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
			if(it_i2c == true){
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <APP_SMProccess+0x1fc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00c      	beq.n	800070e <APP_SMProccess+0x1ea>
				states = prv_state;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <APP_SMProccess+0x208>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <APP_SMProccess+0x1f8>)
 80006fa:	701a      	strb	r2, [r3, #0]
				it_i2c = false;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <APP_SMProccess+0x1fc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000702:	e004      	b.n	800070e <APP_SMProccess+0x1ea>
		case SM_ERROR:
		default:
			ret = API_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	71fb      	strb	r3, [r7, #7]
			break;
 8000708:	e002      	b.n	8000710 <APP_SMProccess+0x1ec>
			break;
 800070a:	bf00      	nop
 800070c:	e000      	b.n	8000710 <APP_SMProccess+0x1ec>
			break;
 800070e:	bf00      	nop
	}
	return ret;
 8000710:	79fb      	ldrb	r3, [r7, #7]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000034 	.word	0x20000034
 8000720:	20000046 	.word	0x20000046
 8000724:	20000047 	.word	0x20000047
 8000728:	20000038 	.word	0x20000038
 800072c:	20000035 	.word	0x20000035
 8000730:	2000003e 	.word	0x2000003e
 8000734:	20000044 	.word	0x20000044

08000738 <print_string>:

static retType print_string(MPU9250_t * data){
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b0bf      	sub	sp, #252	; 0xfc
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8000740:	2300      	movs	r3, #0
 8000742:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
	uint8_t buff[128] = {0};
 8000746:	2300      	movs	r3, #0
 8000748:	677b      	str	r3, [r7, #116]	; 0x74
 800074a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800074e:	227c      	movs	r2, #124	; 0x7c
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f004 ff2c 	bl	80055b0 <memset>
	uint8_t value[5] = {0};
 8000758:	2300      	movs	r3, #0
 800075a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800075c:	2300      	movs	r3, #0
 800075e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	uint8_t str[] = "Data returned: ";
 8000762:	4b94      	ldr	r3, [pc, #592]	; (80009b4 <print_string+0x27c>)
 8000764:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800076a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t str_gyro[] = "\nGyroscope:";
 800076e:	4a92      	ldr	r2, [pc, #584]	; (80009b8 <print_string+0x280>)
 8000770:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000774:	ca07      	ldmia	r2, {r0, r1, r2}
 8000776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t str_accl[] = "\nAccelerometer:";
 800077a:	4b90      	ldr	r3, [pc, #576]	; (80009bc <print_string+0x284>)
 800077c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t str_temp[] = "\nTemperature:";
 8000786:	4b8e      	ldr	r3, [pc, #568]	; (80009c0 <print_string+0x288>)
 8000788:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800078c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800078e:	c407      	stmia	r4!, {r0, r1, r2}
 8000790:	8023      	strh	r3, [r4, #0]
	uint8_t str_x[] = "\nAxis X: ";
 8000792:	4a8c      	ldr	r2, [pc, #560]	; (80009c4 <print_string+0x28c>)
 8000794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000798:	ca07      	ldmia	r2, {r0, r1, r2}
 800079a:	c303      	stmia	r3!, {r0, r1}
 800079c:	801a      	strh	r2, [r3, #0]
	uint8_t str_y[] = "\nAxis Y: ";
 800079e:	4a8a      	ldr	r2, [pc, #552]	; (80009c8 <print_string+0x290>)
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a6:	c303      	stmia	r3!, {r0, r1}
 80007a8:	801a      	strh	r2, [r3, #0]
	uint8_t str_z[] = "\nAxis Z: ";
 80007aa:	4a88      	ldr	r2, [pc, #544]	; (80009cc <print_string+0x294>)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007b2:	c303      	stmia	r3!, {r0, r1}
 80007b4:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

	strcat(buff, str);
 80007bc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80007c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 fefa 	bl	80055c0 <strcat>
	strcat(buff, str_gyro);
 80007cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80007d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fef2 	bl	80055c0 <strcat>
	strcat(buff, str_x);
 80007dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007e4:	4611      	mov	r1, r2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 feea 	bl	80055c0 <strcat>
	itoa(data->gyro.x, value, 10);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007f6:	220a      	movs	r2, #10
 80007f8:	4619      	mov	r1, r3
 80007fa:	f004 fed7 	bl	80055ac <itoa>
	strcat(buff, value);
 80007fe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000802:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f004 fed9 	bl	80055c0 <strcat>
	strcat(buff, str_y);
 800080e:	f107 0218 	add.w	r2, r7, #24
 8000812:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f004 fed1 	bl	80055c0 <strcat>
	itoa(data->gyro.y, value, 10);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	885b      	ldrh	r3, [r3, #2]
 8000822:	4618      	mov	r0, r3
 8000824:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000828:	220a      	movs	r2, #10
 800082a:	4619      	mov	r1, r3
 800082c:	f004 febe 	bl	80055ac <itoa>
	strcat(buff, value);
 8000830:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000834:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f004 fec0 	bl	80055c0 <strcat>
	strcat(buff, str_z);
 8000840:	f107 020c 	add.w	r2, r7, #12
 8000844:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f004 feb8 	bl	80055c0 <strcat>
	itoa(data->gyro.z, value, 10);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	889b      	ldrh	r3, [r3, #4]
 8000854:	4618      	mov	r0, r3
 8000856:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800085a:	220a      	movs	r2, #10
 800085c:	4619      	mov	r1, r3
 800085e:	f004 fea5 	bl	80055ac <itoa>
	strcat(buff, value);
 8000862:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000866:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f004 fea7 	bl	80055c0 <strcat>

	strcat(buff, str_accl);
 8000872:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000876:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f004 fe9f 	bl	80055c0 <strcat>
	strcat(buff, str_x);
 8000882:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000886:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f004 fe97 	bl	80055c0 <strcat>
	itoa(data->accl.x, value, 10);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	88db      	ldrh	r3, [r3, #6]
 8000896:	4618      	mov	r0, r3
 8000898:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800089c:	220a      	movs	r2, #10
 800089e:	4619      	mov	r1, r3
 80008a0:	f004 fe84 	bl	80055ac <itoa>
	strcat(buff, value);
 80008a4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80008a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 fe86 	bl	80055c0 <strcat>
	strcat(buff, str_y);
 80008b4:	f107 0218 	add.w	r2, r7, #24
 80008b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 fe7e 	bl	80055c0 <strcat>
	itoa(data->accl.y, value, 10);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	891b      	ldrh	r3, [r3, #8]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008ce:	220a      	movs	r2, #10
 80008d0:	4619      	mov	r1, r3
 80008d2:	f004 fe6b 	bl	80055ac <itoa>
	strcat(buff, value);
 80008d6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80008da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 fe6d 	bl	80055c0 <strcat>
	strcat(buff, str_z);
 80008e6:	f107 020c 	add.w	r2, r7, #12
 80008ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f004 fe65 	bl	80055c0 <strcat>
	itoa(data->accl.z, value, 10);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	895b      	ldrh	r3, [r3, #10]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000900:	220a      	movs	r2, #10
 8000902:	4619      	mov	r1, r3
 8000904:	f004 fe52 	bl	80055ac <itoa>
	strcat(buff, value);
 8000908:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800090c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fe54 	bl	80055c0 <strcat>

	strcat(buff, str_temp);
 8000918:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800091c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f004 fe4c 	bl	80055c0 <strcat>
	itoa(data->temp, value, 10);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	899b      	ldrh	r3, [r3, #12]
 800092c:	4618      	mov	r0, r3
 800092e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000932:	220a      	movs	r2, #10
 8000934:	4619      	mov	r1, r3
 8000936:	f004 fe39 	bl	80055ac <itoa>
	strcat(buff, value);
 800093a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800093e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f004 fe3b 	bl	80055c0 <strcat>
	strcat(buff, "C");
 800094a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fc4c 	bl	80001ec <strlen>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800095c:	4413      	add	r3, r2
 800095e:	491c      	ldr	r1, [pc, #112]	; (80009d0 <print_string+0x298>)
 8000960:	461a      	mov	r2, r3
 8000962:	460b      	mov	r3, r1
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	8013      	strh	r3, [r2, #0]

	for(i = 0; i<128; i++){
 8000968:	2300      	movs	r3, #0
 800096a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800096e:	e017      	b.n	80009a0 <print_string+0x268>
		if(buff[i] == '\0') return ret;
 8000970:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8000974:	33f8      	adds	r3, #248	; 0xf8
 8000976:	443b      	add	r3, r7
 8000978:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <print_string+0x24e>
 8000980:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8000984:	e012      	b.n	80009ac <print_string+0x274>
		DEV_UARTSendChar(&buff[i]);
 8000986:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800098a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800098e:	4413      	add	r3, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f004 faed 	bl	8004f70 <DEV_UARTSendChar>
	for(i = 0; i<128; i++){
 8000996:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800099a:	3301      	adds	r3, #1
 800099c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 80009a0:	f997 30f7 	ldrsb.w	r3, [r7, #247]	; 0xf7
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dae3      	bge.n	8000970 <print_string+0x238>
	}
	return ret;
 80009a8:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	37fc      	adds	r7, #252	; 0xfc
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	08005680 	.word	0x08005680
 80009b8:	08005690 	.word	0x08005690
 80009bc:	0800569c 	.word	0x0800569c
 80009c0:	080056ac 	.word	0x080056ac
 80009c4:	080056bc 	.word	0x080056bc
 80009c8:	080056c8 	.word	0x080056c8
 80009cc:	080056d4 	.word	0x080056d4
 80009d0:	0800567c 	.word	0x0800567c

080009d4 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
	retType ret = API_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	71fb      	strb	r3, [r7, #7]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 80009de:	f000 f927 	bl	8000c30 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80009e2:	f000 f817 	bl	8000a14 <SystemClock_Config>

	/* Initialize BSP Led for LED1, LED2 and LED3 */
//	BSP_LED_Init(LED1);
	BSP_LED_Init(LED2);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f000 f8b8 	bl	8000b5c <BSP_LED_Init>
//	/* Initialize BSP BUTTON_USER */
//	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);


	//FSM initialization
	ret |= APP_SMInit();
 80009ec:	f7ff fd88 	bl	8000500 <APP_SMInit>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	71fb      	strb	r3, [r7, #7]

	/* Infinite loop */
	while (1)
	{
		//Update FSM
		ret |= APP_SMProccess();
 80009fa:	f7ff fd93 	bl	8000524 <APP_SMProccess>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	71fb      	strb	r3, [r7, #7]
		if(ret != API_OK) Error_Handler();
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f5      	beq.n	80009fa <main+0x26>
 8000a0e:	f000 f863 	bl	8000ad8 <Error_Handler>
		ret |= APP_SMProccess();
 8000a12:	e7f2      	b.n	80009fa <main+0x26>

08000a14 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b094      	sub	sp, #80	; 0x50
 8000a18:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <SystemClock_Config+0xbc>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <SystemClock_Config+0xbc>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <SystemClock_Config+0xbc>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <SystemClock_Config+0xc0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <SystemClock_Config+0xc0>)
 8000a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <SystemClock_Config+0xc0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a52:	2301      	movs	r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a56:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a5a:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a66:	2308      	movs	r3, #8
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8000a6a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 f9e9 	bl	8003e54 <HAL_RCC_OscConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8000a88:	f000 f826 	bl	8000ad8 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a8c:	f003 f992 	bl	8003db4 <HAL_PWREx_EnableOverDrive>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8000a96:	f000 f81f 	bl	8000ad8 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fc43 	bl	8004344 <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8000ac4:	f000 f808 	bl	8000ad8 <Error_Handler>
	}
}
 8000ac8:	bf00      	nop
 8000aca:	3750      	adds	r7, #80	; 0x50
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 f88d 	bl	8000bfc <BSP_LED_On>
	while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <Error_Handler+0xa>

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f004 fcfd 	bl	8005534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff ff4b 	bl	80009d4 <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b4c:	08005748 	.word	0x08005748
  ldr r2, =_sbss
 8000b50:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b54:	200000e4 	.word	0x200000e4

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>
	...

08000b5c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d10e      	bne.n	8000b8a <BSP_LED_Init+0x2e>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <BSP_LED_Init+0x94>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <BSP_LED_Init+0x94>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <BSP_LED_Init+0x94>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	e00d      	b.n	8000ba6 <BSP_LED_Init+0x4a>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <BSP_LED_Init+0x94>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <BSP_LED_Init+0x94>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <BSP_LED_Init+0x94>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <BSP_LED_Init+0x98>)
 8000baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <BSP_LED_Init+0x9c>)
 8000bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc4:	f107 0214 	add.w	r2, r7, #20
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f9e4 	bl	8000f98 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <BSP_LED_Init+0x9c>)
 8000bd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <BSP_LED_Init+0x98>)
 8000bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	f000 fb84 	bl	80012f0 <HAL_GPIO_WritePin>
}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	0800570c 	.word	0x0800570c
 8000bf8:	20000004 	.word	0x20000004

08000bfc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <BSP_LED_On+0x2c>)
 8000c0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <BSP_LED_On+0x30>)
 8000c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c16:	2201      	movs	r2, #1
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f000 fb69 	bl	80012f0 <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000004 	.word	0x20000004
 8000c2c:	0800570c 	.word	0x0800570c

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f92b 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f002 ffe6 	bl	8003c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f943 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f90b 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000014 	.word	0x20000014
 8000cd0:	20000010 	.word	0x20000010

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000014 	.word	0x20000014
 8000cf8:	20000048 	.word	0x20000048

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000048 	.word	0x20000048

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff3e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff31 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d004      	beq.n	8000f54 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e00c      	b.n	8000f6e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2205      	movs	r2, #5
 8000f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f88:	b2db      	uxtb	r3, r3
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e177      	b.n	80012a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 8166 	bne.w	800129e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d005      	beq.n	8000fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d130      	bne.n	800104c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	091b      	lsrs	r3, r3, #4
 8001036:	f003 0201 	and.w	r2, r3, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b03      	cmp	r3, #3
 8001056:	d017      	beq.n	8001088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d123      	bne.n	80010dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	69b9      	ldr	r1, [r7, #24]
 80010d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80c0 	beq.w	800129e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b66      	ldr	r3, [pc, #408]	; (80012bc <HAL_GPIO_Init+0x324>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a65      	ldr	r2, [pc, #404]	; (80012bc <HAL_GPIO_Init+0x324>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_GPIO_Init+0x324>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113a:	4a61      	ldr	r2, [pc, #388]	; (80012c0 <HAL_GPIO_Init+0x328>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a58      	ldr	r2, [pc, #352]	; (80012c4 <HAL_GPIO_Init+0x32c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d037      	beq.n	80011d6 <HAL_GPIO_Init+0x23e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a57      	ldr	r2, [pc, #348]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d031      	beq.n	80011d2 <HAL_GPIO_Init+0x23a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a56      	ldr	r2, [pc, #344]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d02b      	beq.n	80011ce <HAL_GPIO_Init+0x236>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a55      	ldr	r2, [pc, #340]	; (80012d0 <HAL_GPIO_Init+0x338>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d025      	beq.n	80011ca <HAL_GPIO_Init+0x232>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a54      	ldr	r2, [pc, #336]	; (80012d4 <HAL_GPIO_Init+0x33c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01f      	beq.n	80011c6 <HAL_GPIO_Init+0x22e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a53      	ldr	r2, [pc, #332]	; (80012d8 <HAL_GPIO_Init+0x340>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x22a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x344>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x226>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_GPIO_Init+0x348>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x222>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_GPIO_Init+0x34c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x21e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	; (80012e8 <HAL_GPIO_Init+0x350>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x21a>
 80011ae:	2309      	movs	r3, #9
 80011b0:	e012      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011b2:	230a      	movs	r3, #10
 80011b4:	e010      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011b6:	2308      	movs	r3, #8
 80011b8:	e00e      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011be:	2306      	movs	r3, #6
 80011c0:	e00a      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x328>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <HAL_GPIO_Init+0x354>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a34      	ldr	r2, [pc, #208]	; (80012ec <HAL_GPIO_Init+0x354>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <HAL_GPIO_Init+0x354>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a29      	ldr	r2, [pc, #164]	; (80012ec <HAL_GPIO_Init+0x354>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124a:	4b28      	ldr	r3, [pc, #160]	; (80012ec <HAL_GPIO_Init+0x354>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126e:	4a1f      	ldr	r2, [pc, #124]	; (80012ec <HAL_GPIO_Init+0x354>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_GPIO_Init+0x354>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_GPIO_Init+0x354>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f ae84 	bls.w	8000fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021c00 	.word	0x40021c00
 80012e4:	40022000 	.word	0x40022000
 80012e8:	40022400 	.word	0x40022400
 80012ec:	40013c00 	.word	0x40013c00

080012f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
 80012fc:	4613      	mov	r3, r2
 80012fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800130c:	e003      	b.n	8001316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	041a      	lsls	r2, r3, #16
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	619a      	str	r2, [r3, #24]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e12b      	b.n	800158e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f002 fc9a 	bl	8003c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2224      	movs	r2, #36	; 0x24
 8001354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001388:	f003 f9d4 	bl	8004734 <HAL_RCC_GetPCLK1Freq>
 800138c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a81      	ldr	r2, [pc, #516]	; (8001598 <HAL_I2C_Init+0x274>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d807      	bhi.n	80013a8 <HAL_I2C_Init+0x84>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4a80      	ldr	r2, [pc, #512]	; (800159c <HAL_I2C_Init+0x278>)
 800139c:	4293      	cmp	r3, r2
 800139e:	bf94      	ite	ls
 80013a0:	2301      	movls	r3, #1
 80013a2:	2300      	movhi	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	e006      	b.n	80013b6 <HAL_I2C_Init+0x92>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4a7d      	ldr	r2, [pc, #500]	; (80015a0 <HAL_I2C_Init+0x27c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	bf94      	ite	ls
 80013b0:	2301      	movls	r3, #1
 80013b2:	2300      	movhi	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0e7      	b.n	800158e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4a78      	ldr	r2, [pc, #480]	; (80015a4 <HAL_I2C_Init+0x280>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a6a      	ldr	r2, [pc, #424]	; (8001598 <HAL_I2C_Init+0x274>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d802      	bhi.n	80013f8 <HAL_I2C_Init+0xd4>
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3301      	adds	r3, #1
 80013f6:	e009      	b.n	800140c <HAL_I2C_Init+0xe8>
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	4a69      	ldr	r2, [pc, #420]	; (80015a8 <HAL_I2C_Init+0x284>)
 8001404:	fba2 2303 	umull	r2, r3, r2, r3
 8001408:	099b      	lsrs	r3, r3, #6
 800140a:	3301      	adds	r3, #1
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	430b      	orrs	r3, r1
 8001412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800141e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	495c      	ldr	r1, [pc, #368]	; (8001598 <HAL_I2C_Init+0x274>)
 8001428:	428b      	cmp	r3, r1
 800142a:	d819      	bhi.n	8001460 <HAL_I2C_Init+0x13c>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e59      	subs	r1, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fbb1 f3f3 	udiv	r3, r1, r3
 800143a:	1c59      	adds	r1, r3, #1
 800143c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001440:	400b      	ands	r3, r1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00a      	beq.n	800145c <HAL_I2C_Init+0x138>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1e59      	subs	r1, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fbb1 f3f3 	udiv	r3, r1, r3
 8001454:	3301      	adds	r3, #1
 8001456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800145a:	e051      	b.n	8001500 <HAL_I2C_Init+0x1dc>
 800145c:	2304      	movs	r3, #4
 800145e:	e04f      	b.n	8001500 <HAL_I2C_Init+0x1dc>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d111      	bne.n	800148c <HAL_I2C_Init+0x168>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e58      	subs	r0, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	440b      	add	r3, r1
 8001476:	fbb0 f3f3 	udiv	r3, r0, r3
 800147a:	3301      	adds	r3, #1
 800147c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	e012      	b.n	80014b2 <HAL_I2C_Init+0x18e>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	1e58      	subs	r0, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	0099      	lsls	r1, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf0c      	ite	eq
 80014ac:	2301      	moveq	r3, #1
 80014ae:	2300      	movne	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_Init+0x196>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e022      	b.n	8001500 <HAL_I2C_Init+0x1dc>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10e      	bne.n	80014e0 <HAL_I2C_Init+0x1bc>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1e58      	subs	r0, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6859      	ldr	r1, [r3, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	440b      	add	r3, r1
 80014d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014de:	e00f      	b.n	8001500 <HAL_I2C_Init+0x1dc>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1e58      	subs	r0, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	0099      	lsls	r1, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	6809      	ldr	r1, [r1, #0]
 8001504:	4313      	orrs	r3, r2
 8001506:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69da      	ldr	r2, [r3, #28]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800152e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6911      	ldr	r1, [r2, #16]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68d2      	ldr	r2, [r2, #12]
 800153a:	4311      	orrs	r1, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	430b      	orrs	r3, r1
 8001542:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0201 	orr.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2220      	movs	r2, #32
 800157a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	000186a0 	.word	0x000186a0
 800159c:	001e847f 	.word	0x001e847f
 80015a0:	003d08ff 	.word	0x003d08ff
 80015a4:	431bde83 	.word	0x431bde83
 80015a8:	10624dd3 	.word	0x10624dd3

080015ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	461a      	mov	r2, r3
 80015b8:	460b      	mov	r3, r1
 80015ba:	817b      	strh	r3, [r7, #10]
 80015bc:	4613      	mov	r3, r2
 80015be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff fb9c 	bl	8000cfc <HAL_GetTick>
 80015c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	f040 80e0 	bne.w	8001794 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2319      	movs	r3, #25
 80015da:	2201      	movs	r2, #1
 80015dc:	4970      	ldr	r1, [pc, #448]	; (80017a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f002 f8fe 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ea:	2302      	movs	r3, #2
 80015ec:	e0d3      	b.n	8001796 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_I2C_Master_Transmit+0x50>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e0cc      	b.n	8001796 <HAL_I2C_Master_Transmit+0x1ea>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d007      	beq.n	8001622 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0201 	orr.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001630:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2221      	movs	r2, #33	; 0x21
 8001636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2210      	movs	r2, #16
 800163e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	893a      	ldrh	r2, [r7, #8]
 8001652:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4a50      	ldr	r2, [pc, #320]	; (80017a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001664:	8979      	ldrh	r1, [r7, #10]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	6a3a      	ldr	r2, [r7, #32]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f001 fec0 	bl	80033f0 <I2C_MasterRequestWrite>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e08d      	b.n	8001796 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001690:	e066      	b.n	8001760 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	6a39      	ldr	r1, [r7, #32]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f002 f978 	bl	800398c <I2C_WaitOnTXEFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00d      	beq.n	80016be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d107      	bne.n	80016ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06b      	b.n	8001796 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d11b      	bne.n	8001734 <HAL_I2C_Master_Transmit+0x188>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001700:	2b00      	cmp	r3, #0
 8001702:	d017      	beq.n	8001734 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	3b01      	subs	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172c:	3b01      	subs	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	6a39      	ldr	r1, [r7, #32]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f002 f968 	bl	8003a0e <I2C_WaitOnBTFFlagUntilTimeout>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2b04      	cmp	r3, #4
 800174a:	d107      	bne.n	800175c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800175a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e01a      	b.n	8001796 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d194      	bne.n	8001692 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2220      	movs	r2, #32
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	e000      	b.n	8001796 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001794:	2302      	movs	r3, #2
  }
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	00100002 	.word	0x00100002
 80017a4:	ffff0000 	.word	0xffff0000

080017a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08c      	sub	sp, #48	; 0x30
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	461a      	mov	r2, r3
 80017b4:	460b      	mov	r3, r1
 80017b6:	817b      	strh	r3, [r7, #10]
 80017b8:	4613      	mov	r3, r2
 80017ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fa9e 	bl	8000cfc <HAL_GetTick>
 80017c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	f040 820b 	bne.w	8001be6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2319      	movs	r3, #25
 80017d6:	2201      	movs	r2, #1
 80017d8:	497c      	ldr	r1, [pc, #496]	; (80019cc <HAL_I2C_Master_Receive+0x224>)
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f002 f800 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80017e6:	2302      	movs	r3, #2
 80017e8:	e1fe      	b.n	8001be8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_I2C_Master_Receive+0x50>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e1f7      	b.n	8001be8 <HAL_I2C_Master_Receive+0x440>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d007      	beq.n	800181e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2222      	movs	r2, #34	; 0x22
 8001832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2210      	movs	r2, #16
 800183a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	893a      	ldrh	r2, [r7, #8]
 800184e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4a5c      	ldr	r2, [pc, #368]	; (80019d0 <HAL_I2C_Master_Receive+0x228>)
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001860:	8979      	ldrh	r1, [r7, #10]
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f001 fe44 	bl	80034f4 <I2C_MasterRequestRead>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1b8      	b.n	8001be8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187a:	2b00      	cmp	r3, #0
 800187c:	d113      	bne.n	80018a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	623b      	str	r3, [r7, #32]
 8001892:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e18c      	b.n	8001bc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d11b      	bne.n	80018e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e16c      	b.n	8001bc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d11b      	bne.n	8001926 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800190c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	e14c      	b.n	8001bc0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001934:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800194c:	e138      	b.n	8001bc0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001952:	2b03      	cmp	r3, #3
 8001954:	f200 80f1 	bhi.w	8001b3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195c:	2b01      	cmp	r3, #1
 800195e:	d123      	bne.n	80019a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001962:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f002 f8c5 	bl	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e139      	b.n	8001be8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019a6:	e10b      	b.n	8001bc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d14e      	bne.n	8001a4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b6:	2200      	movs	r2, #0
 80019b8:	4906      	ldr	r1, [pc, #24]	; (80019d4 <HAL_I2C_Master_Receive+0x22c>)
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f001 ff10 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e10e      	b.n	8001be8 <HAL_I2C_Master_Receive+0x440>
 80019ca:	bf00      	nop
 80019cc:	00100002 	.word	0x00100002
 80019d0:	ffff0000 	.word	0xffff0000
 80019d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a4c:	e0b8      	b.n	8001bc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	2200      	movs	r2, #0
 8001a56:	4966      	ldr	r1, [pc, #408]	; (8001bf0 <HAL_I2C_Master_Receive+0x448>)
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f001 fec1 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0bf      	b.n	8001be8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	494f      	ldr	r1, [pc, #316]	; (8001bf0 <HAL_I2C_Master_Receive+0x448>)
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f001 fe93 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e091      	b.n	8001be8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b38:	e042      	b.n	8001bc0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f001 ffd8 	bl	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e04c      	b.n	8001be8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d118      	bne.n	8001bc0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f47f aec2 	bne.w	800194e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	00010004 	.word	0x00010004

08001bf4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	460b      	mov	r3, r1
 8001c02:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff f87a 	bl	8000cfc <HAL_GetTick>
 8001c08:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	f040 8111 	bne.w	8001e3e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2319      	movs	r3, #25
 8001c22:	2201      	movs	r2, #1
 8001c24:	4988      	ldr	r1, [pc, #544]	; (8001e48 <HAL_I2C_IsDeviceReady+0x254>)
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f001 fdda 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
 8001c34:	e104      	b.n	8001e40 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_I2C_IsDeviceReady+0x50>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e0fd      	b.n	8001e40 <HAL_I2C_IsDeviceReady+0x24c>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d007      	beq.n	8001c6a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2224      	movs	r2, #36	; 0x24
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a70      	ldr	r2, [pc, #448]	; (8001e4c <HAL_I2C_IsDeviceReady+0x258>)
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f001 fd98 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc4:	d103      	bne.n	8001cce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0b6      	b.n	8001e40 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cd2:	897b      	ldrh	r3, [r7, #10]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ce0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f80b 	bl	8000cfc <HAL_GetTick>
 8001ce6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2301      	moveq	r3, #1
 8001d10:	2300      	movne	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d16:	e025      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d18:	f7fe fff0 	bl	8000cfc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d302      	bcc.n	8001d2e <HAL_I2C_IsDeviceReady+0x13a>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	22a0      	movs	r2, #160	; 0xa0
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2ba0      	cmp	r3, #160	; 0xa0
 8001d6e:	d005      	beq.n	8001d7c <HAL_I2C_IsDeviceReady+0x188>
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <HAL_I2C_IsDeviceReady+0x188>
 8001d76:	7dbb      	ldrb	r3, [r7, #22]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0cd      	beq.n	8001d18 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d129      	bne.n	8001de6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2319      	movs	r3, #25
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4921      	ldr	r1, [pc, #132]	; (8001e48 <HAL_I2C_IsDeviceReady+0x254>)
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f001 fd0c 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e036      	b.n	8001e40 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e02c      	b.n	8001e40 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dfe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2319      	movs	r3, #25
 8001e06:	2201      	movs	r2, #1
 8001e08:	490f      	ldr	r1, [pc, #60]	; (8001e48 <HAL_I2C_IsDeviceReady+0x254>)
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f001 fce8 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e012      	b.n	8001e40 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f4ff af32 	bcc.w	8001c8e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
  }
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	00100002 	.word	0x00100002
 8001e4c:	ffff0000 	.word	0xffff0000

08001e50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d003      	beq.n	8001e88 <HAL_I2C_EV_IRQHandler+0x38>
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	f040 80c1 	bne.w	800200a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10d      	bne.n	8001ebe <HAL_I2C_EV_IRQHandler+0x6e>
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001ea8:	d003      	beq.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x62>
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2C_EV_IRQHandler+0x66>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x68>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f000 8132 	beq.w	8002122 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_I2C_EV_IRQHandler+0x92>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	0a5b      	lsrs	r3, r3, #9
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f001 fe92 	bl	8003bfe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fcdc 	bl	8002898 <I2C_Master_SB>
 8001ee0:	e092      	b.n	8002008 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_I2C_EV_IRQHandler+0xb2>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	0a5b      	lsrs	r3, r3, #9
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fd52 	bl	80029a4 <I2C_Master_ADD10>
 8001f00:	e082      	b.n	8002008 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_I2C_EV_IRQHandler+0xd2>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	0a5b      	lsrs	r3, r3, #9
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fd6c 	bl	80029f8 <I2C_Master_ADDR>
 8001f20:	e072      	b.n	8002008 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d03b      	beq.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f3c:	f000 80f3 	beq.w	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	09db      	lsrs	r3, r3, #7
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00f      	beq.n	8001f6c <HAL_I2C_EV_IRQHandler+0x11c>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	0a9b      	lsrs	r3, r3, #10
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d009      	beq.n	8001f6c <HAL_I2C_EV_IRQHandler+0x11c>
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f94c 	bl	8002202 <I2C_MasterTransmit_TXE>
 8001f6a:	e04d      	b.n	8002008 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80d6 	beq.w	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	0a5b      	lsrs	r3, r3, #9
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80cf 	beq.w	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	2b21      	cmp	r3, #33	; 0x21
 8001f8c:	d103      	bne.n	8001f96 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f9d3 	bl	800233a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f94:	e0c7      	b.n	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	2b40      	cmp	r3, #64	; 0x40
 8001f9a:	f040 80c4 	bne.w	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fa41 	bl	8002426 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fa4:	e0bf      	b.n	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb4:	f000 80b7 	beq.w	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	099b      	lsrs	r3, r3, #6
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00f      	beq.n	8001fe4 <HAL_I2C_EV_IRQHandler+0x194>
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_I2C_EV_IRQHandler+0x194>
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fab6 	bl	800254e <I2C_MasterReceive_RXNE>
 8001fe2:	e011      	b.n	8002008 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 809a 	beq.w	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	0a5b      	lsrs	r3, r3, #9
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8093 	beq.w	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fb5f 	bl	80026c4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002006:	e08e      	b.n	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002008:	e08d      	b.n	8002126 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e007      	b.n	800202c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	085b      	lsrs	r3, r3, #1
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d012      	beq.n	800205e <HAL_I2C_EV_IRQHandler+0x20e>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	0a5b      	lsrs	r3, r3, #9
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00c      	beq.n	800205e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002054:	69b9      	ldr	r1, [r7, #24]
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 ff1d 	bl	8002e96 <I2C_Slave_ADDR>
 800205c:	e066      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x22e>
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	0a5b      	lsrs	r3, r3, #9
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 ff58 	bl	8002f2c <I2C_Slave_STOPF>
 800207c:	e056      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800207e:	7bbb      	ldrb	r3, [r7, #14]
 8002080:	2b21      	cmp	r3, #33	; 0x21
 8002082:	d002      	beq.n	800208a <HAL_I2C_EV_IRQHandler+0x23a>
 8002084:	7bbb      	ldrb	r3, [r7, #14]
 8002086:	2b29      	cmp	r3, #41	; 0x29
 8002088:	d125      	bne.n	80020d6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	09db      	lsrs	r3, r3, #7
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00f      	beq.n	80020b6 <HAL_I2C_EV_IRQHandler+0x266>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	0a9b      	lsrs	r3, r3, #10
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_I2C_EV_IRQHandler+0x266>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fe33 	bl	8002d1a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020b4:	e039      	b.n	800212a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d033      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0x2da>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	0a5b      	lsrs	r3, r3, #9
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d02d      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fe60 	bl	8002d94 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020d4:	e029      	b.n	800212a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00f      	beq.n	8002102 <HAL_I2C_EV_IRQHandler+0x2b2>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	0a9b      	lsrs	r3, r3, #10
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_I2C_EV_IRQHandler+0x2b2>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d103      	bne.n	8002102 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fe6b 	bl	8002dd6 <I2C_SlaveReceive_RXNE>
 8002100:	e014      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00e      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x2dc>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	0a5b      	lsrs	r3, r3, #9
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fe99 	bl	8002e52 <I2C_SlaveReceive_BTF>
 8002120:	e004      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002122:	bf00      	nop
 8002124:	e002      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002126:	bf00      	nop
 8002128:	e000      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800212a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	70fb      	strb	r3, [r7, #3]
 800218e:	4613      	mov	r3, r2
 8002190:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002210:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002218:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	d150      	bne.n	80022ca <I2C_MasterTransmit_TXE+0xc8>
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b21      	cmp	r3, #33	; 0x21
 800222c:	d14d      	bne.n	80022ca <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d01d      	beq.n	8002270 <I2C_MasterTransmit_TXE+0x6e>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b20      	cmp	r3, #32
 8002238:	d01a      	beq.n	8002270 <I2C_MasterTransmit_TXE+0x6e>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002240:	d016      	beq.n	8002270 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002250:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2211      	movs	r2, #17
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff62 	bl	8002132 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800226e:	e060      	b.n	8002332 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800227e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d107      	bne.n	80022ba <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff7d 	bl	80021b2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022b8:	e03b      	b.n	8002332 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ff35 	bl	8002132 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022c8:	e033      	b.n	8002332 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b21      	cmp	r3, #33	; 0x21
 80022ce:	d005      	beq.n	80022dc <I2C_MasterTransmit_TXE+0xda>
 80022d0:	7bbb      	ldrb	r3, [r7, #14]
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d12d      	bne.n	8002332 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b22      	cmp	r3, #34	; 0x22
 80022da:	d12a      	bne.n	8002332 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d108      	bne.n	80022f8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022f6:	e01c      	b.n	8002332 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d103      	bne.n	800230c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f88e 	bl	8002426 <I2C_MemoryTransmit_TXE_BTF>
}
 800230a:	e012      	b.n	8002332 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	781a      	ldrb	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002330:	e7ff      	b.n	8002332 <I2C_MasterTransmit_TXE+0x130>
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b21      	cmp	r3, #33	; 0x21
 8002352:	d164      	bne.n	800241e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002382:	e04c      	b.n	800241e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b08      	cmp	r3, #8
 8002388:	d01d      	beq.n	80023c6 <I2C_MasterTransmit_BTF+0x8c>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b20      	cmp	r3, #32
 800238e:	d01a      	beq.n	80023c6 <I2C_MasterTransmit_BTF+0x8c>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002396:	d016      	beq.n	80023c6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023a6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2211      	movs	r2, #17
 80023ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff feb7 	bl	8002132 <HAL_I2C_MasterTxCpltCallback>
}
 80023c4:	e02b      	b.n	800241e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023d4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d107      	bne.n	8002410 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff fed2 	bl	80021b2 <HAL_I2C_MemTxCpltCallback>
}
 800240e:	e006      	b.n	800241e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fe8a 	bl	8002132 <HAL_I2C_MasterTxCpltCallback>
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002434:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11d      	bne.n	800247a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10b      	bne.n	800245e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244a:	b2da      	uxtb	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002456:	1c9a      	adds	r2, r3, #2
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800245c:	e073      	b.n	8002546 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002462:	b29b      	uxth	r3, r3
 8002464:	121b      	asrs	r3, r3, #8
 8002466:	b2da      	uxtb	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002478:	e065      	b.n	8002546 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10b      	bne.n	800249a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002486:	b2da      	uxtb	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002498:	e055      	b.n	8002546 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d151      	bne.n	8002546 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b22      	cmp	r3, #34	; 0x22
 80024a6:	d10d      	bne.n	80024c4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024c2:	e040      	b.n	8002546 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d015      	beq.n	80024fa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b21      	cmp	r3, #33	; 0x21
 80024d2:	d112      	bne.n	80024fa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024f8:	e025      	b.n	8002546 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d120      	bne.n	8002546 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b21      	cmp	r3, #33	; 0x21
 8002508:	d11d      	bne.n	8002546 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002518:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002528:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fe36 	bl	80021b2 <HAL_I2C_MemTxCpltCallback>
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b22      	cmp	r3, #34	; 0x22
 8002560:	f040 80ac 	bne.w	80026bc <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d921      	bls.n	80025b6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b03      	cmp	r3, #3
 80025a0:	f040 808c 	bne.w	80026bc <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80025b4:	e082      	b.n	80026bc <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d075      	beq.n	80026aa <I2C_MasterReceive_RXNE+0x15c>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d002      	beq.n	80025ca <I2C_MasterReceive_RXNE+0x7c>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d16f      	bne.n	80026aa <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f001 fa60 	bl	8003a90 <I2C_WaitOnSTOPRequestThroughIT>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d142      	bne.n	800265c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d10a      	bne.n	8002646 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fdc1 	bl	80021c6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002644:	e03a      	b.n	80026bc <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2212      	movs	r2, #18
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff fd76 	bl	8002146 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800265a:	e02f      	b.n	80026bc <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800266a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fd99 	bl	80021da <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026a8:	e008      	b.n	80026bc <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b8:	605a      	str	r2, [r3, #4]
}
 80026ba:	e7ff      	b.n	80026bc <I2C_MasterReceive_RXNE+0x16e>
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d11b      	bne.n	8002714 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002712:	e0bd      	b.n	8002890 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b03      	cmp	r3, #3
 800271c:	d129      	bne.n	8002772 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d00a      	beq.n	800274a <I2C_MasterReceive_BTF+0x86>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d007      	beq.n	800274a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002748:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002770:	e08e      	b.n	8002890 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d176      	bne.n	800286a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d002      	beq.n	8002788 <I2C_MasterReceive_BTF+0xc4>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b10      	cmp	r3, #16
 8002786:	d108      	bne.n	800279a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e019      	b.n	80027ce <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d002      	beq.n	80027a6 <I2C_MasterReceive_BTF+0xe2>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d108      	bne.n	80027b8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e00a      	b.n	80027ce <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d007      	beq.n	80027ce <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002828:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d10a      	bne.n	8002854 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fcba 	bl	80021c6 <HAL_I2C_MemRxCpltCallback>
}
 8002852:	e01d      	b.n	8002890 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2212      	movs	r2, #18
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fc6f 	bl	8002146 <HAL_I2C_MasterRxCpltCallback>
}
 8002868:	e012      	b.n	8002890 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d117      	bne.n	80028dc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028c4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028c6:	e067      	b.n	8002998 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]
}
 80028da:	e05d      	b.n	8002998 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e4:	d133      	bne.n	800294e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b21      	cmp	r3, #33	; 0x21
 80028f0:	d109      	bne.n	8002906 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002902:	611a      	str	r2, [r3, #16]
 8002904:	e008      	b.n	8002918 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	b2da      	uxtb	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	2b00      	cmp	r3, #0
 800291e:	d004      	beq.n	800292a <I2C_Master_SB+0x92>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d108      	bne.n	800293c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	2b00      	cmp	r3, #0
 8002930:	d032      	beq.n	8002998 <I2C_Master_SB+0x100>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02d      	beq.n	8002998 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294a:	605a      	str	r2, [r3, #4]
}
 800294c:	e024      	b.n	8002998 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10e      	bne.n	8002974 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	b29b      	uxth	r3, r3
 800295c:	11db      	asrs	r3, r3, #7
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f003 0306 	and.w	r3, r3, #6
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f063 030f 	orn	r3, r3, #15
 800296a:	b2da      	uxtb	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	611a      	str	r2, [r3, #16]
}
 8002972:	e011      	b.n	8002998 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10d      	bne.n	8002998 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	b29b      	uxth	r3, r3
 8002982:	11db      	asrs	r3, r3, #7
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f003 0306 	and.w	r3, r3, #6
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f063 030e 	orn	r3, r3, #14
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <I2C_Master_ADD10+0x26>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <I2C_Master_ADD10+0x48>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ea:	605a      	str	r2, [r3, #4]
  }
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b091      	sub	sp, #68	; 0x44
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b22      	cmp	r3, #34	; 0x22
 8002a20:	f040 8169 	bne.w	8002cf6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <I2C_Master_ADDR+0x54>
 8002a2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d10b      	bne.n	8002a4c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a34:	2300      	movs	r3, #0
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	633b      	str	r3, [r7, #48]	; 0x30
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	e160      	b.n	8002d0e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d11d      	bne.n	8002a90 <I2C_Master_ADDR+0x98>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a5c:	d118      	bne.n	8002a90 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a82:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	651a      	str	r2, [r3, #80]	; 0x50
 8002a8e:	e13e      	b.n	8002d0e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d113      	bne.n	8002ac2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e115      	b.n	8002cee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	f040 808a 	bne.w	8002be2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ad4:	d137      	bne.n	8002b46 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af4:	d113      	bne.n	8002b1e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	e0e7      	b.n	8002cee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e0d3      	b.n	8002cee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d02e      	beq.n	8002baa <I2C_Master_ADDR+0x1b2>
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d02b      	beq.n	8002baa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	2b12      	cmp	r3, #18
 8002b56:	d102      	bne.n	8002b5e <I2C_Master_ADDR+0x166>
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d125      	bne.n	8002baa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00e      	beq.n	8002b82 <I2C_Master_ADDR+0x18a>
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d00b      	beq.n	8002b82 <I2C_Master_ADDR+0x18a>
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d008      	beq.n	8002b82 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e007      	b.n	8002b92 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b90:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	e0a1      	b.n	8002cee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e085      	b.n	8002cee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d14d      	bne.n	8002c88 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d016      	beq.n	8002c20 <I2C_Master_ADDR+0x228>
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d013      	beq.n	8002c20 <I2C_Master_ADDR+0x228>
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d010      	beq.n	8002c20 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e007      	b.n	8002c30 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c2e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3e:	d117      	bne.n	8002c70 <I2C_Master_ADDR+0x278>
 8002c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c46:	d00b      	beq.n	8002c60 <I2C_Master_ADDR+0x268>
 8002c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d008      	beq.n	8002c60 <I2C_Master_ADDR+0x268>
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d005      	beq.n	8002c60 <I2C_Master_ADDR+0x268>
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d002      	beq.n	8002c60 <I2C_Master_ADDR+0x268>
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d107      	bne.n	8002c70 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c6e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	e032      	b.n	8002cee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c96:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca6:	d117      	bne.n	8002cd8 <I2C_Master_ADDR+0x2e0>
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002caa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cae:	d00b      	beq.n	8002cc8 <I2C_Master_ADDR+0x2d0>
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d008      	beq.n	8002cc8 <I2C_Master_ADDR+0x2d0>
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d005      	beq.n	8002cc8 <I2C_Master_ADDR+0x2d0>
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d002      	beq.n	8002cc8 <I2C_Master_ADDR+0x2d0>
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d107      	bne.n	8002cd8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cd6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002cf4:	e00b      	b.n	8002d0e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
}
 8002d0c:	e7ff      	b.n	8002d0e <I2C_Master_ADDR+0x316>
 8002d0e:	bf00      	nop
 8002d10:	3744      	adds	r7, #68	; 0x44
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d02b      	beq.n	8002d8c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d114      	bne.n	8002d8c <I2C_SlaveTransmit_TXE+0x72>
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b29      	cmp	r3, #41	; 0x29
 8002d66:	d111      	bne.n	8002d8c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d76:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2221      	movs	r2, #33	; 0x21
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2228      	movs	r2, #40	; 0x28
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff f9e7 	bl	800215a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d011      	beq.n	8002dca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02c      	beq.n	8002e4a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d114      	bne.n	8002e4a <I2C_SlaveReceive_RXNE+0x74>
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b2a      	cmp	r3, #42	; 0x2a
 8002e24:	d111      	bne.n	8002e4a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2222      	movs	r2, #34	; 0x22
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2228      	movs	r2, #40	; 0x28
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff f992 	bl	800216e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d012      	beq.n	8002e8a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002eb0:	2b28      	cmp	r3, #40	; 0x28
 8002eb2:	d127      	bne.n	8002f04 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	09db      	lsrs	r3, r3, #7
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	81bb      	strh	r3, [r7, #12]
 8002ee6:	e002      	b.n	8002eee <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ef6:	89ba      	ldrh	r2, [r7, #12]
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff f940 	bl	8002182 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f02:	e00e      	b.n	8002f22 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f88:	d172      	bne.n	8003070 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b22      	cmp	r3, #34	; 0x22
 8002f8e:	d002      	beq.n	8002f96 <I2C_Slave_STOPF+0x6a>
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b2a      	cmp	r3, #42	; 0x2a
 8002f94:	d135      	bne.n	8003002 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f043 0204 	orr.w	r2, r3, #4
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd ffd3 	bl	8000f7a <HAL_DMA_GetState>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d049      	beq.n	800306e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	4a69      	ldr	r2, [pc, #420]	; (8003184 <I2C_Slave_STOPF+0x258>)
 8002fe0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd ffa5 	bl	8000f36 <HAL_DMA_Abort_IT>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d03d      	beq.n	800306e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003000:	e035      	b.n	800306e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f043 0204 	orr.w	r2, r3, #4
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003034:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd ff9d 	bl	8000f7a <HAL_DMA_GetState>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d014      	beq.n	8003070 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	4a4e      	ldr	r2, [pc, #312]	; (8003184 <I2C_Slave_STOPF+0x258>)
 800304c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd ff6f 	bl	8000f36 <HAL_DMA_Abort_IT>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003068:	4610      	mov	r0, r2
 800306a:	4798      	blx	r3
 800306c:	e000      	b.n	8003070 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800306e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d03e      	beq.n	80030f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d112      	bne.n	80030ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d112      	bne.n	80030e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f043 0204 	orr.w	r2, r3, #4
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f843 	bl	800318c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003106:	e039      	b.n	800317c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b2a      	cmp	r3, #42	; 0x2a
 800310c:	d109      	bne.n	8003122 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2228      	movs	r2, #40	; 0x28
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff f826 	bl	800216e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b28      	cmp	r3, #40	; 0x28
 800312c:	d111      	bne.n	8003152 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a15      	ldr	r2, [pc, #84]	; (8003188 <I2C_Slave_STOPF+0x25c>)
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff f827 	bl	800219e <HAL_I2C_ListenCpltCallback>
}
 8003150:	e014      	b.n	800317c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	2b22      	cmp	r3, #34	; 0x22
 8003158:	d002      	beq.n	8003160 <I2C_Slave_STOPF+0x234>
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b22      	cmp	r3, #34	; 0x22
 800315e:	d10d      	bne.n	800317c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe fff9 	bl	800216e <HAL_I2C_SlaveRxCpltCallback>
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	08003691 	.word	0x08003691
 8003188:	ffff0000 	.word	0xffff0000

0800318c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031a4:	7bbb      	ldrb	r3, [r7, #14]
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	d002      	beq.n	80031b0 <I2C_ITError+0x24>
 80031aa:	7bbb      	ldrb	r3, [r7, #14]
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d10a      	bne.n	80031c6 <I2C_ITError+0x3a>
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b22      	cmp	r3, #34	; 0x22
 80031b4:	d107      	bne.n	80031c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031cc:	2b28      	cmp	r3, #40	; 0x28
 80031ce:	d107      	bne.n	80031e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2228      	movs	r2, #40	; 0x28
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031de:	e015      	b.n	800320c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ee:	d00a      	beq.n	8003206 <I2C_ITError+0x7a>
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b60      	cmp	r3, #96	; 0x60
 80031f4:	d007      	beq.n	8003206 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800321a:	d162      	bne.n	80032e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d020      	beq.n	800327c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <I2C_ITError+0x25c>)
 8003240:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fe75 	bl	8000f36 <HAL_DMA_Abort_IT>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8089 	beq.w	8003366 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003276:	4610      	mov	r0, r2
 8003278:	4798      	blx	r3
 800327a:	e074      	b.n	8003366 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	4a59      	ldr	r2, [pc, #356]	; (80033e8 <I2C_ITError+0x25c>)
 8003282:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd fe54 	bl	8000f36 <HAL_DMA_Abort_IT>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d068      	beq.n	8003366 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d10b      	bne.n	80032ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032dc:	4610      	mov	r0, r2
 80032de:	4798      	blx	r3
 80032e0:	e041      	b.n	8003366 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b60      	cmp	r3, #96	; 0x60
 80032ec:	d125      	bne.n	800333a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d10b      	bne.n	8003322 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe ff5b 	bl	80021ee <HAL_I2C_AbortCpltCallback>
 8003338:	e015      	b.n	8003366 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d10b      	bne.n	8003360 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fe ff3a 	bl	80021da <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d113      	bne.n	80033e0 <I2C_ITError+0x254>
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b28      	cmp	r3, #40	; 0x28
 80033bc:	d110      	bne.n	80033e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <I2C_ITError+0x260>)
 80033c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fe fedf 	bl	800219e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	08003691 	.word	0x08003691
 80033ec:	ffff0000 	.word	0xffff0000

080033f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	460b      	mov	r3, r1
 80033fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d006      	beq.n	800341a <I2C_MasterRequestWrite+0x2a>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d003      	beq.n	800341a <I2C_MasterRequestWrite+0x2a>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003418:	d108      	bne.n	800342c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e00b      	b.n	8003444 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	2b12      	cmp	r3, #18
 8003432:	d107      	bne.n	8003444 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f9c5 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346a:	d103      	bne.n	8003474 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e035      	b.n	80034e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003480:	d108      	bne.n	8003494 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	e01b      	b.n	80034cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003494:	897b      	ldrh	r3, [r7, #10]
 8003496:	11db      	asrs	r3, r3, #7
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 0306 	and.w	r3, r3, #6
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f063 030f 	orn	r3, r3, #15
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	490e      	ldr	r1, [pc, #56]	; (80034ec <I2C_MasterRequestWrite+0xfc>)
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f9eb 	bl	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e010      	b.n	80034e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034c2:	897b      	ldrh	r3, [r7, #10]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4907      	ldr	r1, [pc, #28]	; (80034f0 <I2C_MasterRequestWrite+0x100>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f9db 	bl	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	00010008 	.word	0x00010008
 80034f0:	00010002 	.word	0x00010002

080034f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	460b      	mov	r3, r1
 8003502:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003518:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d006      	beq.n	800352e <I2C_MasterRequestRead+0x3a>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d003      	beq.n	800352e <I2C_MasterRequestRead+0x3a>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800352c:	d108      	bne.n	8003540 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e00b      	b.n	8003558 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	2b11      	cmp	r3, #17
 8003546:	d107      	bne.n	8003558 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003556:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f93b 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357e:	d103      	bne.n	8003588 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e079      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003594:	d108      	bne.n	80035a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	611a      	str	r2, [r3, #16]
 80035a6:	e05f      	b.n	8003668 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	11db      	asrs	r3, r3, #7
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f003 0306 	and.w	r3, r3, #6
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f063 030f 	orn	r3, r3, #15
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4930      	ldr	r1, [pc, #192]	; (8003688 <I2C_MasterRequestRead+0x194>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f961 	bl	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e054      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035d6:	897b      	ldrh	r3, [r7, #10]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4929      	ldr	r1, [pc, #164]	; (800368c <I2C_MasterRequestRead+0x198>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f951 	bl	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e044      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f8d9 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003642:	d103      	bne.n	800364c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e017      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003650:	897b      	ldrh	r3, [r7, #10]
 8003652:	11db      	asrs	r3, r3, #7
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 0306 	and.w	r3, r3, #6
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f063 030e 	orn	r3, r3, #14
 8003660:	b2da      	uxtb	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4907      	ldr	r1, [pc, #28]	; (800368c <I2C_MasterRequestRead+0x198>)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f90d 	bl	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	00010008 	.word	0x00010008
 800368c:	00010002 	.word	0x00010002

08003690 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036aa:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <I2C_DMAAbort+0x148>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	08db      	lsrs	r3, r3, #3
 80036b0:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <I2C_DMAAbort+0x14c>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0a1a      	lsrs	r2, r3, #8
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00da      	lsls	r2, r3, #3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80036d6:	e00a      	b.n	80036ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ec:	d0ea      	beq.n	80036c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	2200      	movs	r2, #0
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	2200      	movs	r2, #0
 800370c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	2200      	movs	r2, #0
 8003732:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	2200      	movs	r2, #0
 8003742:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d10e      	bne.n	800377e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003776:	6978      	ldr	r0, [r7, #20]
 8003778:	f7fe fd39 	bl	80021ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800377c:	e027      	b.n	80037ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003784:	2b28      	cmp	r3, #40	; 0x28
 8003786:	d117      	bne.n	80037b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2228      	movs	r2, #40	; 0x28
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037b6:	e007      	b.n	80037c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80037c8:	6978      	ldr	r0, [r7, #20]
 80037ca:	f7fe fd06 	bl	80021da <HAL_I2C_ErrorCallback>
}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000000 	.word	0x20000000
 80037dc:	14f8b589 	.word	0x14f8b589

080037e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f0:	e025      	b.n	800383e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d021      	beq.n	800383e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fa:	f7fd fa7f 	bl	8000cfc <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d116      	bne.n	800383e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e023      	b.n	8003886 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	0c1b      	lsrs	r3, r3, #16
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d10d      	bne.n	8003864 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	e00c      	b.n	800387e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	43da      	mvns	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4013      	ands	r3, r2
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	429a      	cmp	r2, r3
 8003882:	d0b6      	beq.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800389c:	e051      	b.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ac:	d123      	bne.n	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f043 0204 	orr.w	r2, r3, #4
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e046      	b.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d021      	beq.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fd f9fd 	bl	8000cfc <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d116      	bne.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e020      	b.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10c      	bne.n	8003966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	43da      	mvns	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4013      	ands	r3, r2
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	e00b      	b.n	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	43da      	mvns	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4013      	ands	r3, r2
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d18d      	bne.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003998:	e02d      	b.n	80039f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f900 	bl	8003ba0 <I2C_IsAcknowledgeFailed>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e02d      	b.n	8003a06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d021      	beq.n	80039f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fd f9a3 	bl	8000cfc <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d116      	bne.n	80039f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e007      	b.n	8003a06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a00:	2b80      	cmp	r3, #128	; 0x80
 8003a02:	d1ca      	bne.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a1a:	e02d      	b.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f8bf 	bl	8003ba0 <I2C_IsAcknowledgeFailed>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e02d      	b.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d021      	beq.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a34:	f7fd f962 	bl	8000cfc <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d302      	bcc.n	8003a4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d116      	bne.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e007      	b.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d1ca      	bne.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	0a1a      	lsrs	r2, r3, #8
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e008      	b.n	8003ae0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003adc:	d0e9      	beq.n	8003ab2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	20000000 	.word	0x20000000
 8003af0:	14f8b589 	.word	0x14f8b589

08003af4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b00:	e042      	b.n	8003b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d119      	bne.n	8003b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0210 	mvn.w	r2, #16
 8003b18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e029      	b.n	8003b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b44:	f7fd f8da 	bl	8000cfc <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d302      	bcc.n	8003b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d116      	bne.n	8003b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e007      	b.n	8003b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d1b5      	bne.n	8003b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb6:	d11b      	bne.n	8003bf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f043 0204 	orr.w	r2, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c0e:	d103      	bne.n	8003c18 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c16:	e007      	b.n	8003c28 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c20:	d102      	bne.n	8003c28 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2208      	movs	r2, #8
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_I2C_MspInit+0x94>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d133      	bne.n	8003d0e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <HAL_I2C_MspInit+0x98>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a1b      	ldr	r2, [pc, #108]	; (8003d1c <HAL_I2C_MspInit+0x98>)
 8003cb0:	f043 0320 	orr.w	r3, r3, #32
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_I2C_MspInit+0x98>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cc6:	2312      	movs	r3, #18
 8003cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cd6:	f107 0314 	add.w	r3, r7, #20
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4810      	ldr	r0, [pc, #64]	; (8003d20 <HAL_I2C_MspInit+0x9c>)
 8003cde:	f7fd f95b 	bl	8000f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_I2C_MspInit+0x98>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <HAL_I2C_MspInit+0x98>)
 8003cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <HAL_I2C_MspInit+0x98>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2100      	movs	r1, #0
 8003d02:	2021      	movs	r0, #33	; 0x21
 8003d04:	f7fd f8e1 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003d08:	2021      	movs	r0, #33	; 0x21
 8003d0a:	f7fd f8fa 	bl	8000f02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003d0e:	bf00      	nop
 8003d10:	3728      	adds	r7, #40	; 0x28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40005800 	.word	0x40005800
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40021400 	.word	0x40021400

08003d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <HAL_UART_MspInit+0x84>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12c      	bne.n	8003da0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <HAL_UART_MspInit+0x88>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a17      	ldr	r2, [pc, #92]	; (8003dac <HAL_UART_MspInit+0x88>)
 8003d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b15      	ldr	r3, [pc, #84]	; (8003dac <HAL_UART_MspInit+0x88>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_UART_MspInit+0x88>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <HAL_UART_MspInit+0x88>)
 8003d6c:	f043 0308 	orr.w	r3, r3, #8
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_UART_MspInit+0x88>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d84:	2302      	movs	r3, #2
 8003d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d90:	2307      	movs	r3, #7
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4805      	ldr	r0, [pc, #20]	; (8003db0 <HAL_UART_MspInit+0x8c>)
 8003d9c:	f7fd f8fc 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003da0:	bf00      	nop
 8003da2:	3728      	adds	r7, #40	; 0x28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40004800 	.word	0x40004800
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40020c00 	.word	0x40020c00

08003db4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003dda:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de0:	f7fc ff8c 	bl	8000cfc <HAL_GetTick>
 8003de4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003de6:	e009      	b.n	8003dfc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003de8:	f7fc ff88 	bl	8000cfc <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df6:	d901      	bls.n	8003dfc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e01f      	b.n	8003e3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d1ee      	bne.n	8003de8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e10:	f7fc ff74 	bl	8000cfc <HAL_GetTick>
 8003e14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e16:	e009      	b.n	8003e2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e18:	f7fc ff70 	bl	8000cfc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e26:	d901      	bls.n	8003e2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e007      	b.n	8003e3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e38:	d1ee      	bne.n	8003e18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40023800 	.word	0x40023800
 8003e48:	420e0040 	.word	0x420e0040
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	420e0044 	.word	0x420e0044

08003e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e267      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d075      	beq.n	8003f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e72:	4b88      	ldr	r3, [pc, #544]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d00c      	beq.n	8003e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7e:	4b85      	ldr	r3, [pc, #532]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d112      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8a:	4b82      	ldr	r3, [pc, #520]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e96:	d10b      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	4b7e      	ldr	r3, [pc, #504]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05b      	beq.n	8003f5c <HAL_RCC_OscConfig+0x108>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d157      	bne.n	8003f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e242      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb8:	d106      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x74>
 8003eba:	4b76      	ldr	r3, [pc, #472]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a75      	ldr	r2, [pc, #468]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e01d      	b.n	8003f04 <HAL_RCC_OscConfig+0xb0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x98>
 8003ed2:	4b70      	ldr	r3, [pc, #448]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6f      	ldr	r2, [pc, #444]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b6d      	ldr	r3, [pc, #436]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6c      	ldr	r2, [pc, #432]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0xb0>
 8003eec:	4b69      	ldr	r3, [pc, #420]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a68      	ldr	r2, [pc, #416]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	4b66      	ldr	r3, [pc, #408]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a65      	ldr	r2, [pc, #404]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fc fef6 	bl	8000cfc <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fc fef2 	bl	8000cfc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e207      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	4b5b      	ldr	r3, [pc, #364]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0xc0>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fc fee2 	bl	8000cfc <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fc fede 	bl	8000cfc <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e1f3      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4e:	4b51      	ldr	r3, [pc, #324]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0xe8>
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d063      	beq.n	8004032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d11c      	bne.n	8003fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f82:	4b44      	ldr	r3, [pc, #272]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d116      	bne.n	8003fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8e:	4b41      	ldr	r3, [pc, #260]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x152>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e1c7      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4937      	ldr	r1, [pc, #220]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	e03a      	b.n	8004032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_OscConfig+0x244>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fc fe97 	bl	8000cfc <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd2:	f7fc fe93 	bl	8000cfc <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e1a8      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4925      	ldr	r1, [pc, #148]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]
 8004004:	e015      	b.n	8004032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004006:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_RCC_OscConfig+0x244>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fc fe76 	bl	8000cfc <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004014:	f7fc fe72 	bl	8000cfc <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e187      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d036      	beq.n	80040ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d016      	beq.n	8004074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <HAL_RCC_OscConfig+0x248>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fc fe56 	bl	8000cfc <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004054:	f7fc fe52 	bl	8000cfc <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e167      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8004068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x200>
 8004072:	e01b      	b.n	80040ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_OscConfig+0x248>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407a:	f7fc fe3f 	bl	8000cfc <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004080:	e00e      	b.n	80040a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004082:	f7fc fe3b 	bl	8000cfc <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d907      	bls.n	80040a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e150      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
 8004094:	40023800 	.word	0x40023800
 8004098:	42470000 	.word	0x42470000
 800409c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a0:	4b88      	ldr	r3, [pc, #544]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ea      	bne.n	8004082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8097 	beq.w	80041e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040be:	4b81      	ldr	r3, [pc, #516]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	4b7d      	ldr	r3, [pc, #500]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4a7c      	ldr	r2, [pc, #496]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6413      	str	r3, [r2, #64]	; 0x40
 80040da:	4b7a      	ldr	r3, [pc, #488]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ea:	4b77      	ldr	r3, [pc, #476]	; (80042c8 <HAL_RCC_OscConfig+0x474>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d118      	bne.n	8004128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f6:	4b74      	ldr	r3, [pc, #464]	; (80042c8 <HAL_RCC_OscConfig+0x474>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a73      	ldr	r2, [pc, #460]	; (80042c8 <HAL_RCC_OscConfig+0x474>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004102:	f7fc fdfb 	bl	8000cfc <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410a:	f7fc fdf7 	bl	8000cfc <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e10c      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	4b6a      	ldr	r3, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x474>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d106      	bne.n	800413e <HAL_RCC_OscConfig+0x2ea>
 8004130:	4b64      	ldr	r3, [pc, #400]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004134:	4a63      	ldr	r2, [pc, #396]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6713      	str	r3, [r2, #112]	; 0x70
 800413c:	e01c      	b.n	8004178 <HAL_RCC_OscConfig+0x324>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b05      	cmp	r3, #5
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0x30c>
 8004146:	4b5f      	ldr	r3, [pc, #380]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	4a5e      	ldr	r2, [pc, #376]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 800414c:	f043 0304 	orr.w	r3, r3, #4
 8004150:	6713      	str	r3, [r2, #112]	; 0x70
 8004152:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4a5b      	ldr	r2, [pc, #364]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6713      	str	r3, [r2, #112]	; 0x70
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0x324>
 8004160:	4b58      	ldr	r3, [pc, #352]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4a57      	ldr	r2, [pc, #348]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	6713      	str	r3, [r2, #112]	; 0x70
 800416c:	4b55      	ldr	r3, [pc, #340]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a54      	ldr	r2, [pc, #336]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004172:	f023 0304 	bic.w	r3, r3, #4
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fc fdbc 	bl	8000cfc <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	e00a      	b.n	800419e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fc fdb8 	bl	8000cfc <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e0cb      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419e:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ee      	beq.n	8004188 <HAL_RCC_OscConfig+0x334>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ac:	f7fc fda6 	bl	8000cfc <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fc fda2 	bl	8000cfc <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0b5      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ca:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1ee      	bne.n	80041b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041dc:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	4a38      	ldr	r2, [pc, #224]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a1 	beq.w	8004334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041f2:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d05c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d141      	bne.n	800428a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004206:	4b31      	ldr	r3, [pc, #196]	; (80042cc <HAL_RCC_OscConfig+0x478>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fc fd76 	bl	8000cfc <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004214:	f7fc fd72 	bl	8000cfc <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e087      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	3b01      	subs	r3, #1
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	061b      	lsls	r3, r3, #24
 8004256:	491b      	ldr	r1, [pc, #108]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <HAL_RCC_OscConfig+0x478>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fc fd4b 	bl	8000cfc <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426a:	f7fc fd47 	bl	8000cfc <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e05c      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x416>
 8004288:	e054      	b.n	8004334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <HAL_RCC_OscConfig+0x478>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fc fd34 	bl	8000cfc <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004298:	f7fc fd30 	bl	8000cfc <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e045      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x444>
 80042b6:	e03d      	b.n	8004334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e038      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40007000 	.word	0x40007000
 80042cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_RCC_OscConfig+0x4ec>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d028      	beq.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d121      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d11a      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004308:	4293      	cmp	r3, r2
 800430a:	d111      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	3b01      	subs	r3, #1
 800431a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0cc      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004358:	4b68      	ldr	r3, [pc, #416]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d90c      	bls.n	8004380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0b8      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a58      	ldr	r2, [pc, #352]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b0:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a52      	ldr	r2, [pc, #328]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	494d      	ldr	r1, [pc, #308]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d044      	beq.n	8004464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d119      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e07f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e06f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e067      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4934      	ldr	r1, [pc, #208]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004434:	f7fc fc62 	bl	8000cfc <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fc fc5e 	bl	8000cfc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e04f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d20c      	bcs.n	800448c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4916      	ldr	r1, [pc, #88]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490e      	ldr	r1, [pc, #56]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ca:	f000 f821 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80044ce:	4602      	mov	r2, r0
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	490a      	ldr	r1, [pc, #40]	; (8004504 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	5ccb      	ldrb	r3, [r1, r3]
 80044de:	fa22 f303 	lsr.w	r3, r2, r3
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fc fbc2 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40023c00 	.word	0x40023c00
 8004500:	40023800 	.word	0x40023800
 8004504:	080056f4 	.word	0x080056f4
 8004508:	20000000 	.word	0x20000000
 800450c:	20000010 	.word	0x20000010

08004510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004514:	b094      	sub	sp, #80	; 0x50
 8004516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	647b      	str	r3, [r7, #68]	; 0x44
 800451c:	2300      	movs	r3, #0
 800451e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004520:	2300      	movs	r3, #0
 8004522:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004528:	4b79      	ldr	r3, [pc, #484]	; (8004710 <HAL_RCC_GetSysClockFreq+0x200>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	2b08      	cmp	r3, #8
 8004532:	d00d      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x40>
 8004534:	2b08      	cmp	r3, #8
 8004536:	f200 80e1 	bhi.w	80046fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x34>
 800453e:	2b04      	cmp	r3, #4
 8004540:	d003      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x3a>
 8004542:	e0db      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b73      	ldr	r3, [pc, #460]	; (8004714 <HAL_RCC_GetSysClockFreq+0x204>)
 8004546:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004548:	e0db      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800454a:	4b73      	ldr	r3, [pc, #460]	; (8004718 <HAL_RCC_GetSysClockFreq+0x208>)
 800454c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800454e:	e0d8      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004550:	4b6f      	ldr	r3, [pc, #444]	; (8004710 <HAL_RCC_GetSysClockFreq+0x200>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004558:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800455a:	4b6d      	ldr	r3, [pc, #436]	; (8004710 <HAL_RCC_GetSysClockFreq+0x200>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d063      	beq.n	800462e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004566:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCC_GetSysClockFreq+0x200>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	2200      	movs	r2, #0
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004570:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
 800457a:	2300      	movs	r3, #0
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
 800457e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004582:	4622      	mov	r2, r4
 8004584:	462b      	mov	r3, r5
 8004586:	f04f 0000 	mov.w	r0, #0
 800458a:	f04f 0100 	mov.w	r1, #0
 800458e:	0159      	lsls	r1, r3, #5
 8004590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004594:	0150      	lsls	r0, r2, #5
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4621      	mov	r1, r4
 800459c:	1a51      	subs	r1, r2, r1
 800459e:	6139      	str	r1, [r7, #16]
 80045a0:	4629      	mov	r1, r5
 80045a2:	eb63 0301 	sbc.w	r3, r3, r1
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b4:	4659      	mov	r1, fp
 80045b6:	018b      	lsls	r3, r1, #6
 80045b8:	4651      	mov	r1, sl
 80045ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045be:	4651      	mov	r1, sl
 80045c0:	018a      	lsls	r2, r1, #6
 80045c2:	4651      	mov	r1, sl
 80045c4:	ebb2 0801 	subs.w	r8, r2, r1
 80045c8:	4659      	mov	r1, fp
 80045ca:	eb63 0901 	sbc.w	r9, r3, r1
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045e2:	4690      	mov	r8, r2
 80045e4:	4699      	mov	r9, r3
 80045e6:	4623      	mov	r3, r4
 80045e8:	eb18 0303 	adds.w	r3, r8, r3
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	462b      	mov	r3, r5
 80045f0:	eb49 0303 	adc.w	r3, r9, r3
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004602:	4629      	mov	r1, r5
 8004604:	024b      	lsls	r3, r1, #9
 8004606:	4621      	mov	r1, r4
 8004608:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800460c:	4621      	mov	r1, r4
 800460e:	024a      	lsls	r2, r1, #9
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004616:	2200      	movs	r2, #0
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
 800461a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800461c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004620:	f7fb fdec 	bl	80001fc <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800462c:	e058      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462e:	4b38      	ldr	r3, [pc, #224]	; (8004710 <HAL_RCC_GetSysClockFreq+0x200>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	099b      	lsrs	r3, r3, #6
 8004634:	2200      	movs	r2, #0
 8004636:	4618      	mov	r0, r3
 8004638:	4611      	mov	r1, r2
 800463a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	2300      	movs	r3, #0
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	f04f 0000 	mov.w	r0, #0
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	0159      	lsls	r1, r3, #5
 8004656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800465a:	0150      	lsls	r0, r2, #5
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4641      	mov	r1, r8
 8004662:	ebb2 0a01 	subs.w	sl, r2, r1
 8004666:	4649      	mov	r1, r9
 8004668:	eb63 0b01 	sbc.w	fp, r3, r1
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004678:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800467c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004680:	ebb2 040a 	subs.w	r4, r2, sl
 8004684:	eb63 050b 	sbc.w	r5, r3, fp
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	00eb      	lsls	r3, r5, #3
 8004692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004696:	00e2      	lsls	r2, r4, #3
 8004698:	4614      	mov	r4, r2
 800469a:	461d      	mov	r5, r3
 800469c:	4643      	mov	r3, r8
 800469e:	18e3      	adds	r3, r4, r3
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	464b      	mov	r3, r9
 80046a4:	eb45 0303 	adc.w	r3, r5, r3
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046b6:	4629      	mov	r1, r5
 80046b8:	028b      	lsls	r3, r1, #10
 80046ba:	4621      	mov	r1, r4
 80046bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046c0:	4621      	mov	r1, r4
 80046c2:	028a      	lsls	r2, r1, #10
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ca:	2200      	movs	r2, #0
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	61fa      	str	r2, [r7, #28]
 80046d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d4:	f7fb fd92 	bl	80001fc <__aeabi_uldivmod>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4613      	mov	r3, r2
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	3301      	adds	r3, #1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046fa:	e002      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCC_GetSysClockFreq+0x204>)
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004704:	4618      	mov	r0, r3
 8004706:	3750      	adds	r7, #80	; 0x50
 8004708:	46bd      	mov	sp, r7
 800470a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800
 8004714:	00f42400 	.word	0x00f42400
 8004718:	007a1200 	.word	0x007a1200

0800471c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <HAL_RCC_GetHCLKFreq+0x14>)
 8004722:	681b      	ldr	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20000000 	.word	0x20000000

08004734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004738:	f7ff fff0 	bl	800471c <HAL_RCC_GetHCLKFreq>
 800473c:	4602      	mov	r2, r0
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	0a9b      	lsrs	r3, r3, #10
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	4903      	ldr	r1, [pc, #12]	; (8004758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800474a:	5ccb      	ldrb	r3, [r1, r3]
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40023800 	.word	0x40023800
 8004758:	08005704 	.word	0x08005704

0800475c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004760:	f7ff ffdc 	bl	800471c <HAL_RCC_GetHCLKFreq>
 8004764:	4602      	mov	r2, r0
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	0b5b      	lsrs	r3, r3, #13
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4903      	ldr	r1, [pc, #12]	; (8004780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004772:	5ccb      	ldrb	r3, [r1, r3]
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40023800 	.word	0x40023800
 8004780:	08005704 	.word	0x08005704

08004784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e03f      	b.n	8004816 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff faba 	bl	8003d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2224      	movs	r2, #36	; 0x24
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f929 	bl	8004a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695a      	ldr	r2, [r3, #20]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b08a      	sub	sp, #40	; 0x28
 8004822:	af02      	add	r7, sp, #8
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	4613      	mov	r3, r2
 800482c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b20      	cmp	r3, #32
 800483c:	d17c      	bne.n	8004938 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_UART_Transmit+0x2c>
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e075      	b.n	800493a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_UART_Transmit+0x3e>
 8004858:	2302      	movs	r3, #2
 800485a:	e06e      	b.n	800493a <HAL_UART_Transmit+0x11c>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2221      	movs	r2, #33	; 0x21
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004872:	f7fc fa43 	bl	8000cfc <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d108      	bne.n	80048a0 <HAL_UART_Transmit+0x82>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d104      	bne.n	80048a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	e003      	b.n	80048a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048b0:	e02a      	b.n	8004908 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2180      	movs	r1, #128	; 0x80
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f840 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e036      	b.n	800493a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	3302      	adds	r3, #2
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e007      	b.n	80048fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1cf      	bne.n	80048b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	2140      	movs	r1, #64	; 0x40
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f810 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e006      	b.n	800493a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	e000      	b.n	800493a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004938:	2302      	movs	r3, #2
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b090      	sub	sp, #64	; 0x40
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	4613      	mov	r3, r2
 8004950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004952:	e050      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d04c      	beq.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800495c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x30>
 8004962:	f7fc f9cb 	bl	8000cfc <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800496e:	429a      	cmp	r2, r3
 8004970:	d241      	bcs.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004992:	637a      	str	r2, [r7, #52]	; 0x34
 8004994:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e5      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3314      	adds	r3, #20
 80049ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	613b      	str	r3, [r7, #16]
   return(result);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3314      	adds	r3, #20
 80049c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c6:	623a      	str	r2, [r7, #32]
 80049c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	69f9      	ldr	r1, [r7, #28]
 80049cc:	6a3a      	ldr	r2, [r7, #32]
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e5      	bne.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e00f      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4013      	ands	r3, r2
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	bf0c      	ite	eq
 8004a06:	2301      	moveq	r3, #1
 8004a08:	2300      	movne	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d09f      	beq.n	8004954 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3740      	adds	r7, #64	; 0x40
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a24:	b0c0      	sub	sp, #256	; 0x100
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	68d9      	ldr	r1, [r3, #12]
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	ea40 0301 	orr.w	r3, r0, r1
 8004a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a78:	f021 010c 	bic.w	r1, r1, #12
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a86:	430b      	orrs	r3, r1
 8004a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9a:	6999      	ldr	r1, [r3, #24]
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	ea40 0301 	orr.w	r3, r0, r1
 8004aa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b8f      	ldr	r3, [pc, #572]	; (8004cec <UART_SetConfig+0x2cc>)
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d005      	beq.n	8004ac0 <UART_SetConfig+0xa0>
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b8d      	ldr	r3, [pc, #564]	; (8004cf0 <UART_SetConfig+0x2d0>)
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d104      	bne.n	8004aca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ac0:	f7ff fe4c 	bl	800475c <HAL_RCC_GetPCLK2Freq>
 8004ac4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ac8:	e003      	b.n	8004ad2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aca:	f7ff fe33 	bl	8004734 <HAL_RCC_GetPCLK1Freq>
 8004ace:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004adc:	f040 810c 	bne.w	8004cf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004aee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004af2:	4622      	mov	r2, r4
 8004af4:	462b      	mov	r3, r5
 8004af6:	1891      	adds	r1, r2, r2
 8004af8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004afa:	415b      	adcs	r3, r3
 8004afc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b02:	4621      	mov	r1, r4
 8004b04:	eb12 0801 	adds.w	r8, r2, r1
 8004b08:	4629      	mov	r1, r5
 8004b0a:	eb43 0901 	adc.w	r9, r3, r1
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b22:	4690      	mov	r8, r2
 8004b24:	4699      	mov	r9, r3
 8004b26:	4623      	mov	r3, r4
 8004b28:	eb18 0303 	adds.w	r3, r8, r3
 8004b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b30:	462b      	mov	r3, r5
 8004b32:	eb49 0303 	adc.w	r3, r9, r3
 8004b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b4e:	460b      	mov	r3, r1
 8004b50:	18db      	adds	r3, r3, r3
 8004b52:	653b      	str	r3, [r7, #80]	; 0x50
 8004b54:	4613      	mov	r3, r2
 8004b56:	eb42 0303 	adc.w	r3, r2, r3
 8004b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b64:	f7fb fb4a 	bl	80001fc <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <UART_SetConfig+0x2d4>)
 8004b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	011c      	lsls	r4, r3, #4
 8004b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b88:	4642      	mov	r2, r8
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	1891      	adds	r1, r2, r2
 8004b8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b90:	415b      	adcs	r3, r3
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b98:	4641      	mov	r1, r8
 8004b9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bb8:	4692      	mov	sl, r2
 8004bba:	469b      	mov	fp, r3
 8004bbc:	4643      	mov	r3, r8
 8004bbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004be0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004be4:	460b      	mov	r3, r1
 8004be6:	18db      	adds	r3, r3, r3
 8004be8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bea:	4613      	mov	r3, r2
 8004bec:	eb42 0303 	adc.w	r3, r2, r3
 8004bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bfa:	f7fb faff 	bl	80001fc <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <UART_SetConfig+0x2d4>)
 8004c06:	fba3 2301 	umull	r2, r3, r3, r1
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2264      	movs	r2, #100	; 0x64
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	1acb      	subs	r3, r1, r3
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c1a:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <UART_SetConfig+0x2d4>)
 8004c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c28:	441c      	add	r4, r3
 8004c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	1891      	adds	r1, r2, r2
 8004c42:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c44:	415b      	adcs	r3, r3
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	1851      	adds	r1, r2, r1
 8004c50:	6339      	str	r1, [r7, #48]	; 0x30
 8004c52:	4649      	mov	r1, r9
 8004c54:	414b      	adcs	r3, r1
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c64:	4659      	mov	r1, fp
 8004c66:	00cb      	lsls	r3, r1, #3
 8004c68:	4651      	mov	r1, sl
 8004c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6e:	4651      	mov	r1, sl
 8004c70:	00ca      	lsls	r2, r1, #3
 8004c72:	4610      	mov	r0, r2
 8004c74:	4619      	mov	r1, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	4642      	mov	r2, r8
 8004c7a:	189b      	adds	r3, r3, r2
 8004c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c80:	464b      	mov	r3, r9
 8004c82:	460a      	mov	r2, r1
 8004c84:	eb42 0303 	adc.w	r3, r2, r3
 8004c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	18db      	adds	r3, r3, r3
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	eb42 0303 	adc.w	r3, r2, r3
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cb6:	f7fb faa1 	bl	80001fc <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <UART_SetConfig+0x2d4>)
 8004cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	2164      	movs	r1, #100	; 0x64
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	3332      	adds	r3, #50	; 0x32
 8004cd2:	4a08      	ldr	r2, [pc, #32]	; (8004cf4 <UART_SetConfig+0x2d4>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 0207 	and.w	r2, r3, #7
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4422      	add	r2, r4
 8004ce6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ce8:	e105      	b.n	8004ef6 <UART_SetConfig+0x4d6>
 8004cea:	bf00      	nop
 8004cec:	40011000 	.word	0x40011000
 8004cf0:	40011400 	.word	0x40011400
 8004cf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	1891      	adds	r1, r2, r2
 8004d10:	6239      	str	r1, [r7, #32]
 8004d12:	415b      	adcs	r3, r3
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
 8004d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	1854      	adds	r4, r2, r1
 8004d1e:	4649      	mov	r1, r9
 8004d20:	eb43 0501 	adc.w	r5, r3, r1
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	00eb      	lsls	r3, r5, #3
 8004d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d32:	00e2      	lsls	r2, r4, #3
 8004d34:	4614      	mov	r4, r2
 8004d36:	461d      	mov	r5, r3
 8004d38:	4643      	mov	r3, r8
 8004d3a:	18e3      	adds	r3, r4, r3
 8004d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d40:	464b      	mov	r3, r9
 8004d42:	eb45 0303 	adc.w	r3, r5, r3
 8004d46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d66:	4629      	mov	r1, r5
 8004d68:	008b      	lsls	r3, r1, #2
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d70:	4621      	mov	r1, r4
 8004d72:	008a      	lsls	r2, r1, #2
 8004d74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d78:	f7fb fa40 	bl	80001fc <__aeabi_uldivmod>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4b60      	ldr	r3, [pc, #384]	; (8004f04 <UART_SetConfig+0x4e4>)
 8004d82:	fba3 2302 	umull	r2, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	011c      	lsls	r4, r3, #4
 8004d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	1891      	adds	r1, r2, r2
 8004da2:	61b9      	str	r1, [r7, #24]
 8004da4:	415b      	adcs	r3, r3
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dac:	4641      	mov	r1, r8
 8004dae:	1851      	adds	r1, r2, r1
 8004db0:	6139      	str	r1, [r7, #16]
 8004db2:	4649      	mov	r1, r9
 8004db4:	414b      	adcs	r3, r1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	00cb      	lsls	r3, r1, #3
 8004dc8:	4651      	mov	r1, sl
 8004dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dce:	4651      	mov	r1, sl
 8004dd0:	00ca      	lsls	r2, r1, #3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4642      	mov	r2, r8
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004de0:	464b      	mov	r3, r9
 8004de2:	460a      	mov	r2, r1
 8004de4:	eb42 0303 	adc.w	r3, r2, r3
 8004de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004df6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e04:	4649      	mov	r1, r9
 8004e06:	008b      	lsls	r3, r1, #2
 8004e08:	4641      	mov	r1, r8
 8004e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e0e:	4641      	mov	r1, r8
 8004e10:	008a      	lsls	r2, r1, #2
 8004e12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e16:	f7fb f9f1 	bl	80001fc <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4b39      	ldr	r3, [pc, #228]	; (8004f04 <UART_SetConfig+0x4e4>)
 8004e20:	fba3 1302 	umull	r1, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	2164      	movs	r1, #100	; 0x64
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	3332      	adds	r3, #50	; 0x32
 8004e32:	4a34      	ldr	r2, [pc, #208]	; (8004f04 <UART_SetConfig+0x4e4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e3e:	441c      	add	r4, r3
 8004e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e44:	2200      	movs	r2, #0
 8004e46:	673b      	str	r3, [r7, #112]	; 0x70
 8004e48:	677a      	str	r2, [r7, #116]	; 0x74
 8004e4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e4e:	4642      	mov	r2, r8
 8004e50:	464b      	mov	r3, r9
 8004e52:	1891      	adds	r1, r2, r2
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	415b      	adcs	r3, r3
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e5e:	4641      	mov	r1, r8
 8004e60:	1851      	adds	r1, r2, r1
 8004e62:	6039      	str	r1, [r7, #0]
 8004e64:	4649      	mov	r1, r9
 8004e66:	414b      	adcs	r3, r1
 8004e68:	607b      	str	r3, [r7, #4]
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e76:	4659      	mov	r1, fp
 8004e78:	00cb      	lsls	r3, r1, #3
 8004e7a:	4651      	mov	r1, sl
 8004e7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e80:	4651      	mov	r1, sl
 8004e82:	00ca      	lsls	r2, r1, #3
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4642      	mov	r2, r8
 8004e8c:	189b      	adds	r3, r3, r2
 8004e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e90:	464b      	mov	r3, r9
 8004e92:	460a      	mov	r2, r1
 8004e94:	eb42 0303 	adc.w	r3, r2, r3
 8004e98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea4:	667a      	str	r2, [r7, #100]	; 0x64
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	008b      	lsls	r3, r1, #2
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	008a      	lsls	r2, r1, #2
 8004ec0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ec4:	f7fb f99a 	bl	80001fc <__aeabi_uldivmod>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <UART_SetConfig+0x4e4>)
 8004ece:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2164      	movs	r1, #100	; 0x64
 8004ed6:	fb01 f303 	mul.w	r3, r1, r3
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	3332      	adds	r3, #50	; 0x32
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <UART_SetConfig+0x4e4>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	f003 020f 	and.w	r2, r3, #15
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4422      	add	r2, r4
 8004ef4:	609a      	str	r2, [r3, #8]
}
 8004ef6:	bf00      	nop
 8004ef8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f02:	bf00      	nop
 8004f04:	51eb851f 	.word	0x51eb851f

08004f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f0c:	e7fe      	b.n	8004f0c <NMI_Handler+0x4>

08004f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f12:	e7fe      	b.n	8004f12 <HardFault_Handler+0x4>

08004f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f18:	e7fe      	b.n	8004f18 <MemManage_Handler+0x4>

08004f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f1e:	e7fe      	b.n	8004f1e <BusFault_Handler+0x4>

08004f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f24:	e7fe      	b.n	8004f24 <UsageFault_Handler+0x4>

08004f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f26:	b480      	push	{r7}
 8004f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f54:	f7fb febe 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f58:	bf00      	nop
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c);
 8004f60:	4802      	ldr	r0, [pc, #8]	; (8004f6c <I2C2_EV_IRQHandler+0x10>)
 8004f62:	f7fc ff75 	bl	8001e50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */
  // it_i2c = true;	//debug
  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000090 	.word	0x20000090

08004f70 <DEV_UARTSendChar>:
/**
  * @brief  Send String via UART
  * @param  uint8_t *
  * @retval Void
  */
retType DEV_UARTSendChar(uint8_t * pstring){
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]

	ret |= HAL_UART_Transmit(&huart, pstring, 1, TIME_OUT);
 8004f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f80:	2201      	movs	r2, #1
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4806      	ldr	r0, [pc, #24]	; (8004fa0 <DEV_UARTSendChar+0x30>)
 8004f86:	f7ff fc4a 	bl	800481e <HAL_UART_Transmit>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	2000004c 	.word	0x2000004c

08004fa4 <DEV_UARTSendStringSize>:
/**
  * @brief  Send String and size via UART
  * @param  uint8_t *, uint16_t
  * @retval Void
  */
retType DEV_UARTSendStringSize(uint8_t * pstring, uint16_t size){
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	807b      	strh	r3, [r7, #2]

	retType ret = API_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]

	if(size == 0) return API_ERROR;
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <DEV_UARTSendStringSize+0x1a>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e00c      	b.n	8004fd8 <DEV_UARTSendStringSize+0x34>
	ret |= HAL_UART_Transmit(&huart, pstring, size, TIME_OUT);
 8004fbe:	887a      	ldrh	r2, [r7, #2]
 8004fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4806      	ldr	r0, [pc, #24]	; (8004fe0 <DEV_UARTSendStringSize+0x3c>)
 8004fc8:	f7ff fc29 	bl	800481e <HAL_UART_Transmit>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461a      	mov	r2, r3
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	2000004c 	.word	0x2000004c

08004fe4 <DEV_UARTInit>:
/**
  * @brief  Configurate UART port
  * @param  Void
  * @retval bool_t
  */
retType DEV_UARTInit(void){
 8004fe4:	b5b0      	push	{r4, r5, r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	75fb      	strb	r3, [r7, #23]

	uint8_t str[] = "UART INITIALIZED:\n";
 8004fee:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <DEV_UARTInit+0x84>)
 8004ff0:	1d3c      	adds	r4, r7, #4
 8004ff2:	461d      	mov	r5, r3
 8004ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	8022      	strh	r2, [r4, #0]
 8004ffe:	3402      	adds	r4, #2
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	7023      	strb	r3, [r4, #0]

	huart.Instance = USARTx;
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <DEV_UARTInit+0x88>)
 8005006:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <DEV_UARTInit+0x8c>)
 8005008:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate= UART_BAUDRATE;
 800500a:	4b18      	ldr	r3, [pc, #96]	; (800506c <DEV_UARTInit+0x88>)
 800500c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005010:	605a      	str	r2, [r3, #4]
	huart.Init.HwFlowCtl = UART_HWFLOWCTL;
 8005012:	4b16      	ldr	r3, [pc, #88]	; (800506c <DEV_UARTInit+0x88>)
 8005014:	2200      	movs	r2, #0
 8005016:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE;
 8005018:	4b14      	ldr	r3, [pc, #80]	; (800506c <DEV_UARTInit+0x88>)
 800501a:	220c      	movs	r2, #12
 800501c:	615a      	str	r2, [r3, #20]
	huart.Init.OverSampling = UART_OVERSAMPLING;
 800501e:	4b13      	ldr	r3, [pc, #76]	; (800506c <DEV_UARTInit+0x88>)
 8005020:	2200      	movs	r2, #0
 8005022:	61da      	str	r2, [r3, #28]
	huart.Init.Parity = UART_PARITY;
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <DEV_UARTInit+0x88>)
 8005026:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800502a:	611a      	str	r2, [r3, #16]
	huart.Init.StopBits = UART_STOPBITS;
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <DEV_UARTInit+0x88>)
 800502e:	2200      	movs	r2, #0
 8005030:	60da      	str	r2, [r3, #12]
	huart.Init.WordLength = UART_WORDLENGTH;
 8005032:	4b0e      	ldr	r3, [pc, #56]	; (800506c <DEV_UARTInit+0x88>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]

	ret |= HAL_UART_Init(&huart);
 8005038:	480c      	ldr	r0, [pc, #48]	; (800506c <DEV_UARTInit+0x88>)
 800503a:	f7ff fba3 	bl	8004784 <HAL_UART_Init>
 800503e:	4603      	mov	r3, r0
 8005040:	461a      	mov	r2, r3
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	4313      	orrs	r3, r2
 8005046:	75fb      	strb	r3, [r7, #23]
	if(ret != API_OK) return ret;
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <DEV_UARTInit+0x6e>
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	e005      	b.n	800505e <DEV_UARTInit+0x7a>
	else DEV_UARTSendStringSize(str, sizeof(str));
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	2113      	movs	r1, #19
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff ffa4 	bl	8004fa4 <DEV_UARTSendStringSize>
	return ret;
 800505c:	7dfb      	ldrb	r3, [r7, #23]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bdb0      	pop	{r4, r5, r7, pc}
 8005066:	bf00      	nop
 8005068:	080056e0 	.word	0x080056e0
 800506c:	2000004c 	.word	0x2000004c
 8005070:	40004800 	.word	0x40004800

08005074 <APP_MPU9250Write>:

static retType gyro_convert(uint16_t axis, uint16_t * paxis);
static retType accl_convert(uint16_t axis, uint16_t * paxis);
static retType temp_convert(uint16_t temp, uint16_t * ptemp);

retType APP_MPU9250Write(uint8_t addr2write, uint8_t * pdata, uint16_t size){
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	6039      	str	r1, [r7, #0]
 800507e:	71fb      	strb	r3, [r7, #7]
 8005080:	4613      	mov	r3, r2
 8005082:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	73fb      	strb	r3, [r7, #15]

	if(size <= 0) ret = API_ERROR;
 8005088:	88bb      	ldrh	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <APP_MPU9250Write+0x1e>
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <APP_MPU9250Write+0x28>
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	e016      	b.n	80050ca <APP_MPU9250Write+0x56>

	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2write, 1);
 800509c:	1dfb      	adds	r3, r7, #7
 800509e:	2201      	movs	r2, #1
 80050a0:	4619      	mov	r1, r3
 80050a2:	20d0      	movs	r0, #208	; 0xd0
 80050a4:	f000 f9ee 	bl	8005484 <DEV_I2CWrite>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, pdata, size);
 80050b2:	88bb      	ldrh	r3, [r7, #4]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	20d0      	movs	r0, #208	; 0xd0
 80050ba:	f000 f9e3 	bl	8005484 <DEV_I2CWrite>
 80050be:	4603      	mov	r3, r0
 80050c0:	461a      	mov	r2, r3
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	73fb      	strb	r3, [r7, #15]

	return ret;
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <APP_MPU9250Read>:

retType APP_MPU9250Read(uint8_t addr2read, uint8_t * pdata, uint16_t size){
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	4603      	mov	r3, r0
 80050da:	6039      	str	r1, [r7, #0]
 80050dc:	71fb      	strb	r3, [r7, #7]
 80050de:	4613      	mov	r3, r2
 80050e0:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]

	if(size <= 0) ret = API_ERROR;
 80050e6:	88bb      	ldrh	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <APP_MPU9250Read+0x1e>
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <APP_MPU9250Read+0x28>
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	e016      	b.n	8005128 <APP_MPU9250Read+0x56>

	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2read, 1);
 80050fa:	1dfb      	adds	r3, r7, #7
 80050fc:	2201      	movs	r2, #1
 80050fe:	4619      	mov	r1, r3
 8005100:	20d0      	movs	r0, #208	; 0xd0
 8005102:	f000 f9bf 	bl	8005484 <DEV_I2CWrite>
 8005106:	4603      	mov	r3, r0
 8005108:	461a      	mov	r2, r3
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	4313      	orrs	r3, r2
 800510e:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CRead(MPU9250_SLAVEADDR, pdata, size);
 8005110:	88bb      	ldrh	r3, [r7, #4]
 8005112:	461a      	mov	r2, r3
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	20d0      	movs	r0, #208	; 0xd0
 8005118:	f000 f9d4 	bl	80054c4 <DEV_I2CRead>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	4313      	orrs	r3, r2
 8005124:	73fb      	strb	r3, [r7, #15]

	return ret;
 8005126:	7bfb      	ldrb	r3, [r7, #15]

}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <APP_MPU9250Init>:

retType APP_MPU9250Init(void){
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	71fb      	strb	r3, [r7, #7]

	ret |= DEV_I2CIsReady(MPU9250_SLAVEADDR);
 800513a:	20d0      	movs	r0, #208	; 0xd0
 800513c:	f000 f9e2 	bl	8005504 <DEV_I2CIsReady>
 8005140:	4603      	mov	r3, r0
 8005142:	461a      	mov	r2, r3
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	4313      	orrs	r3, r2
 8005148:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <APP_MPU9250Init+0x24>
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	e04b      	b.n	80051ec <APP_MPU9250Init+0xbc>

	ret |= APP_MPU9250Write(MPU9250_PWR_MGMT_1, (uint8_t*)0x0, 1);
 8005154:	2201      	movs	r2, #1
 8005156:	2100      	movs	r1, #0
 8005158:	206b      	movs	r0, #107	; 0x6b
 800515a:	f7ff ff8b 	bl	8005074 <APP_MPU9250Write>
 800515e:	4603      	mov	r3, r0
 8005160:	461a      	mov	r2, r3
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	4313      	orrs	r3, r2
 8005166:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <APP_MPU9250Init+0x42>
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	e03c      	b.n	80051ec <APP_MPU9250Init+0xbc>
	ret |= APP_MPU9250Write(MPU9250_PWR_MGMT_1, (uint8_t*)0x1, 1);
 8005172:	2201      	movs	r2, #1
 8005174:	2101      	movs	r1, #1
 8005176:	206b      	movs	r0, #107	; 0x6b
 8005178:	f7ff ff7c 	bl	8005074 <APP_MPU9250Write>
 800517c:	4603      	mov	r3, r0
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	4313      	orrs	r3, r2
 8005184:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <APP_MPU9250Init+0x60>
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	e02d      	b.n	80051ec <APP_MPU9250Init+0xbc>
	ret |= APP_MPU9250Write(MPU9250_GYRO_CONFIG, (uint8_t*)0x8, 1);
 8005190:	2201      	movs	r2, #1
 8005192:	2108      	movs	r1, #8
 8005194:	201b      	movs	r0, #27
 8005196:	f7ff ff6d 	bl	8005074 <APP_MPU9250Write>
 800519a:	4603      	mov	r3, r0
 800519c:	461a      	mov	r2, r3
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_1, (uint8_t*)0x8, 1);
 80051a4:	2201      	movs	r2, #1
 80051a6:	2108      	movs	r1, #8
 80051a8:	201c      	movs	r0, #28
 80051aa:	f7ff ff63 	bl	8005074 <APP_MPU9250Write>
 80051ae:	4603      	mov	r3, r0
 80051b0:	461a      	mov	r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_2, (uint8_t*)0x5, 1);
 80051b8:	2201      	movs	r2, #1
 80051ba:	2105      	movs	r1, #5
 80051bc:	201d      	movs	r0, #29
 80051be:	f7ff ff59 	bl	8005074 <APP_MPU9250Write>
 80051c2:	4603      	mov	r3, r0
 80051c4:	461a      	mov	r2, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <APP_MPU9250Init+0xa6>
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	e00a      	b.n	80051ec <APP_MPU9250Init+0xbc>
	ret |= APP_MPU9250Write(MPU9250_CONFIG_AD, (uint8_t*)0x5, 1);
 80051d6:	2201      	movs	r2, #1
 80051d8:	2105      	movs	r1, #5
 80051da:	201a      	movs	r0, #26
 80051dc:	f7ff ff4a 	bl	8005074 <APP_MPU9250Write>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	71fb      	strb	r3, [r7, #7]
	return ret;
 80051ea:	79fb      	ldrb	r3, [r7, #7]

}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <APP_MPU9250ReadGyro>:

retType APP_MPU9250ReadGyro(axis_t * gyro){
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_x = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_y = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	817b      	strh	r3, [r7, #10]
	uint16_t aux_z = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	813b      	strh	r3, [r7, #8]

	ret |= APP_MPU9250Read(MPU9250_GYRO_XOUT_H, (uint8_t*)&aux_x, 2);
 800520c:	f107 030c 	add.w	r3, r7, #12
 8005210:	2202      	movs	r2, #2
 8005212:	4619      	mov	r1, r3
 8005214:	2043      	movs	r0, #67	; 0x43
 8005216:	f7ff ff5c 	bl	80050d2 <APP_MPU9250Read>
 800521a:	4603      	mov	r3, r0
 800521c:	461a      	mov	r2, r3
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	4313      	orrs	r3, r2
 8005222:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_YOUT_H, (uint8_t*)&aux_y, 2);
 8005224:	f107 030a 	add.w	r3, r7, #10
 8005228:	2202      	movs	r2, #2
 800522a:	4619      	mov	r1, r3
 800522c:	2045      	movs	r0, #69	; 0x45
 800522e:	f7ff ff50 	bl	80050d2 <APP_MPU9250Read>
 8005232:	4603      	mov	r3, r0
 8005234:	461a      	mov	r2, r3
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	4313      	orrs	r3, r2
 800523a:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_ZOUT_H, (uint8_t*)&aux_z, 2);
 800523c:	f107 0308 	add.w	r3, r7, #8
 8005240:	2202      	movs	r2, #2
 8005242:	4619      	mov	r1, r3
 8005244:	2047      	movs	r0, #71	; 0x47
 8005246:	f7ff ff44 	bl	80050d2 <APP_MPU9250Read>
 800524a:	4603      	mov	r3, r0
 800524c:	461a      	mov	r2, r3
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	4313      	orrs	r3, r2
 8005252:	73fb      	strb	r3, [r7, #15]

	ret |= gyro_convert(aux_x, &(gyro->x));
 8005254:	89bb      	ldrh	r3, [r7, #12]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	4611      	mov	r1, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f000 f89d 	bl	800539a <gyro_convert>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	4313      	orrs	r3, r2
 8005268:	73fb      	strb	r3, [r7, #15]
	ret |= gyro_convert(aux_y, &(gyro->y));
 800526a:	897a      	ldrh	r2, [r7, #10]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3302      	adds	r3, #2
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f000 f891 	bl	800539a <gyro_convert>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	4313      	orrs	r3, r2
 8005280:	73fb      	strb	r3, [r7, #15]
	ret |= gyro_convert(aux_z, &(gyro->z));
 8005282:	893a      	ldrh	r2, [r7, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f000 f885 	bl	800539a <gyro_convert>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	4313      	orrs	r3, r2
 8005298:	73fb      	strb	r3, [r7, #15]
	return ret;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <APP_MPU9250ReadAccl>:

retType APP_MPU9250ReadAccl(axis_t * accl){
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_x = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_y = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	817b      	strh	r3, [r7, #10]
	uint16_t aux_z = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	813b      	strh	r3, [r7, #8]

	ret |= APP_MPU9250Read(MPU9250_ACCEL_XOUT_H, (uint8_t*)&aux_x, 2);
 80052bc:	f107 030c 	add.w	r3, r7, #12
 80052c0:	2202      	movs	r2, #2
 80052c2:	4619      	mov	r1, r3
 80052c4:	203b      	movs	r0, #59	; 0x3b
 80052c6:	f7ff ff04 	bl	80050d2 <APP_MPU9250Read>
 80052ca:	4603      	mov	r3, r0
 80052cc:	461a      	mov	r2, r3
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_YOUT_H, (uint8_t*)&aux_y, 2);
 80052d4:	f107 030a 	add.w	r3, r7, #10
 80052d8:	2202      	movs	r2, #2
 80052da:	4619      	mov	r1, r3
 80052dc:	203d      	movs	r0, #61	; 0x3d
 80052de:	f7ff fef8 	bl	80050d2 <APP_MPU9250Read>
 80052e2:	4603      	mov	r3, r0
 80052e4:	461a      	mov	r2, r3
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_ZOUT_H, (uint8_t*)&aux_z, 2);
 80052ec:	f107 0308 	add.w	r3, r7, #8
 80052f0:	2202      	movs	r2, #2
 80052f2:	4619      	mov	r1, r3
 80052f4:	203f      	movs	r0, #63	; 0x3f
 80052f6:	f7ff feec 	bl	80050d2 <APP_MPU9250Read>
 80052fa:	4603      	mov	r3, r0
 80052fc:	461a      	mov	r2, r3
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	4313      	orrs	r3, r2
 8005302:	73fb      	strb	r3, [r7, #15]

	ret |= accl_convert(aux_x, &(accl->x));
 8005304:	89bb      	ldrh	r3, [r7, #12]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4611      	mov	r1, r2
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f857 	bl	80053be <accl_convert>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	4313      	orrs	r3, r2
 8005318:	73fb      	strb	r3, [r7, #15]
	ret |= accl_convert(aux_y, &(accl->y));
 800531a:	897a      	ldrh	r2, [r7, #10]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3302      	adds	r3, #2
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f000 f84b 	bl	80053be <accl_convert>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	4313      	orrs	r3, r2
 8005330:	73fb      	strb	r3, [r7, #15]
	ret |= accl_convert(aux_z, &(accl->z));
 8005332:	893a      	ldrh	r2, [r7, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 f83f 	bl	80053be <accl_convert>
 8005340:	4603      	mov	r3, r0
 8005342:	461a      	mov	r2, r3
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	4313      	orrs	r3, r2
 8005348:	73fb      	strb	r3, [r7, #15]
	return ret;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <APP_MPU9250ReadTemp>:

retType APP_MPU9250ReadTemp(uint16_t * temp){
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_temp = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	81bb      	strh	r3, [r7, #12]

	ret |= APP_MPU9250Read(MPU9250_TEMP_OUT_H, (uint8_t*)&aux_temp, 2);
 8005364:	f107 030c 	add.w	r3, r7, #12
 8005368:	2202      	movs	r2, #2
 800536a:	4619      	mov	r1, r3
 800536c:	2041      	movs	r0, #65	; 0x41
 800536e:	f7ff feb0 	bl	80050d2 <APP_MPU9250Read>
 8005372:	4603      	mov	r3, r0
 8005374:	461a      	mov	r2, r3
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	4313      	orrs	r3, r2
 800537a:	73fb      	strb	r3, [r7, #15]

	ret |= temp_convert(aux_temp, temp);
 800537c:	89bb      	ldrh	r3, [r7, #12]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f82f 	bl	80053e4 <temp_convert>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	4313      	orrs	r3, r2
 800538e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <gyro_convert>:

static retType gyro_convert(uint16_t axis, uint16_t * paxis){
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	4603      	mov	r3, r0
 80053a2:	6039      	str	r1, [r7, #0]
 80053a4:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	73fb      	strb	r3, [r7, #15]

	*paxis = axis;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	88fa      	ldrh	r2, [r7, #6]
 80053ae:	801a      	strh	r2, [r3, #0]
	return ret;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <accl_convert>:

static retType accl_convert(uint16_t axis, uint16_t * paxis){
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4603      	mov	r3, r0
 80053c6:	6039      	str	r1, [r7, #0]
 80053c8:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	73fb      	strb	r3, [r7, #15]

	*paxis = axis;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	801a      	strh	r2, [r3, #0]
	return ret;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <temp_convert>:

static retType temp_convert(uint16_t temp, uint16_t * ptemp){
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	6039      	str	r1, [r7, #0]
 80053ee:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	73fb      	strb	r3, [r7, #15]

	*ptemp = (temp - 0)/321 + 21;
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	4a09      	ldr	r2, [pc, #36]	; (800541c <temp_convert+0x38>)
 80053f8:	fb82 1203 	smull	r1, r2, r2, r3
 80053fc:	11d2      	asrs	r2, r2, #7
 80053fe:	17db      	asrs	r3, r3, #31
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	b29b      	uxth	r3, r3
 8005404:	3315      	adds	r3, #21
 8005406:	b29a      	uxth	r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	801a      	strh	r2, [r3, #0]
	return ret;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	6614bc37 	.word	0x6614bc37

08005420 <DEV_I2CInit>:
#define I2C_OWNADDRESS1 0
#define I2C_TIMEOUT 0xFFFF

I2C_HandleTypeDef  hi2c;

retType DEV_I2CInit(void){
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	71fb      	strb	r3, [r7, #7]
	hi2c.Instance = I2C2;
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <DEV_I2CInit+0x58>)
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <DEV_I2CInit+0x5c>)
 800542e:	601a      	str	r2, [r3, #0]
	hi2c.Init.ClockSpeed = I2C_CLOCKSPEED;
 8005430:	4b11      	ldr	r3, [pc, #68]	; (8005478 <DEV_I2CInit+0x58>)
 8005432:	4a13      	ldr	r2, [pc, #76]	; (8005480 <DEV_I2CInit+0x60>)
 8005434:	605a      	str	r2, [r3, #4]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <DEV_I2CInit+0x58>)
 8005438:	2200      	movs	r2, #0
 800543a:	609a      	str	r2, [r3, #8]
	hi2c.Init.OwnAddress1 = I2C_OWNADDRESS1;
 800543c:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <DEV_I2CInit+0x58>)
 800543e:	2200      	movs	r2, #0
 8005440:	60da      	str	r2, [r3, #12]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005442:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <DEV_I2CInit+0x58>)
 8005444:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005448:	611a      	str	r2, [r3, #16]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800544a:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <DEV_I2CInit+0x58>)
 800544c:	2200      	movs	r2, #0
 800544e:	615a      	str	r2, [r3, #20]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <DEV_I2CInit+0x58>)
 8005452:	2200      	movs	r2, #0
 8005454:	61da      	str	r2, [r3, #28]
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005456:	4b08      	ldr	r3, [pc, #32]	; (8005478 <DEV_I2CInit+0x58>)
 8005458:	2200      	movs	r2, #0
 800545a:	621a      	str	r2, [r3, #32]


	ret |= HAL_I2C_Init(&hi2c);
 800545c:	4806      	ldr	r0, [pc, #24]	; (8005478 <DEV_I2CInit+0x58>)
 800545e:	f7fb ff61 	bl	8001324 <HAL_I2C_Init>
 8005462:	4603      	mov	r3, r0
 8005464:	461a      	mov	r2, r3
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	4313      	orrs	r3, r2
 800546a:	71fb      	strb	r3, [r7, #7]
	return ret;
 800546c:	79fb      	ldrb	r3, [r7, #7]

}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000090 	.word	0x20000090
 800547c:	40005800 	.word	0x40005800
 8005480:	000186a0 	.word	0x000186a0

08005484 <DEV_I2CWrite>:
	ret |= HAL_I2C_DeInit(&hi2c);
	return ret;

}

retType DEV_I2CWrite(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	4603      	mov	r3, r0
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	80fb      	strh	r3, [r7, #6]
 8005490:	4613      	mov	r3, r2
 8005492:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	73fb      	strb	r3, [r7, #15]

	ret |= HAL_I2C_Master_Transmit(&hi2c, slave_addr, pdata, size, I2C_TIMEOUT);
 8005498:	88bb      	ldrh	r3, [r7, #4]
 800549a:	88f9      	ldrh	r1, [r7, #6]
 800549c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054a0:	9200      	str	r2, [sp, #0]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	4806      	ldr	r0, [pc, #24]	; (80054c0 <DEV_I2CWrite+0x3c>)
 80054a6:	f7fc f881 	bl	80015ac <HAL_I2C_Master_Transmit>
 80054aa:	4603      	mov	r3, r0
 80054ac:	461a      	mov	r2, r3
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	73fb      	strb	r3, [r7, #15]
	return ret;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]


}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000090 	.word	0x20000090

080054c4 <DEV_I2CRead>:

retType DEV_I2CRead(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	4603      	mov	r3, r0
 80054cc:	6039      	str	r1, [r7, #0]
 80054ce:	80fb      	strh	r3, [r7, #6]
 80054d0:	4613      	mov	r3, r2
 80054d2:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	73fb      	strb	r3, [r7, #15]

	ret |= HAL_I2C_Master_Receive(&hi2c, slave_addr, pdata, size, I2C_TIMEOUT);
 80054d8:	88bb      	ldrh	r3, [r7, #4]
 80054da:	88f9      	ldrh	r1, [r7, #6]
 80054dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054e0:	9200      	str	r2, [sp, #0]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	4806      	ldr	r0, [pc, #24]	; (8005500 <DEV_I2CRead+0x3c>)
 80054e6:	f7fc f95f 	bl	80017a8 <HAL_I2C_Master_Receive>
 80054ea:	4603      	mov	r3, r0
 80054ec:	461a      	mov	r2, r3
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	73fb      	strb	r3, [r7, #15]
	return ret;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]

}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000090 	.word	0x20000090

08005504 <DEV_I2CIsReady>:

retType DEV_I2CIsReady(uint16_t slave_addr){
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_IsDeviceReady(&hi2c, slave_addr, 2, 1000);
 8005512:	88f9      	ldrh	r1, [r7, #6]
 8005514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005518:	2202      	movs	r2, #2
 800551a:	4805      	ldr	r0, [pc, #20]	; (8005530 <DEV_I2CIsReady+0x2c>)
 800551c:	f7fc fb6a 	bl	8001bf4 <HAL_I2C_IsDeviceReady>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
	return ret;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000090 	.word	0x20000090

08005534 <__libc_init_array>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4d0d      	ldr	r5, [pc, #52]	; (800556c <__libc_init_array+0x38>)
 8005538:	4c0d      	ldr	r4, [pc, #52]	; (8005570 <__libc_init_array+0x3c>)
 800553a:	1b64      	subs	r4, r4, r5
 800553c:	10a4      	asrs	r4, r4, #2
 800553e:	2600      	movs	r6, #0
 8005540:	42a6      	cmp	r6, r4
 8005542:	d109      	bne.n	8005558 <__libc_init_array+0x24>
 8005544:	4d0b      	ldr	r5, [pc, #44]	; (8005574 <__libc_init_array+0x40>)
 8005546:	4c0c      	ldr	r4, [pc, #48]	; (8005578 <__libc_init_array+0x44>)
 8005548:	f000 f88c 	bl	8005664 <_init>
 800554c:	1b64      	subs	r4, r4, r5
 800554e:	10a4      	asrs	r4, r4, #2
 8005550:	2600      	movs	r6, #0
 8005552:	42a6      	cmp	r6, r4
 8005554:	d105      	bne.n	8005562 <__libc_init_array+0x2e>
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	f855 3b04 	ldr.w	r3, [r5], #4
 800555c:	4798      	blx	r3
 800555e:	3601      	adds	r6, #1
 8005560:	e7ee      	b.n	8005540 <__libc_init_array+0xc>
 8005562:	f855 3b04 	ldr.w	r3, [r5], #4
 8005566:	4798      	blx	r3
 8005568:	3601      	adds	r6, #1
 800556a:	e7f2      	b.n	8005552 <__libc_init_array+0x1e>
 800556c:	08005740 	.word	0x08005740
 8005570:	08005740 	.word	0x08005740
 8005574:	08005740 	.word	0x08005740
 8005578:	08005744 	.word	0x08005744

0800557c <__itoa>:
 800557c:	1e93      	subs	r3, r2, #2
 800557e:	2b22      	cmp	r3, #34	; 0x22
 8005580:	b510      	push	{r4, lr}
 8005582:	460c      	mov	r4, r1
 8005584:	d904      	bls.n	8005590 <__itoa+0x14>
 8005586:	2300      	movs	r3, #0
 8005588:	700b      	strb	r3, [r1, #0]
 800558a:	461c      	mov	r4, r3
 800558c:	4620      	mov	r0, r4
 800558e:	bd10      	pop	{r4, pc}
 8005590:	2a0a      	cmp	r2, #10
 8005592:	d109      	bne.n	80055a8 <__itoa+0x2c>
 8005594:	2800      	cmp	r0, #0
 8005596:	da07      	bge.n	80055a8 <__itoa+0x2c>
 8005598:	232d      	movs	r3, #45	; 0x2d
 800559a:	700b      	strb	r3, [r1, #0]
 800559c:	4240      	negs	r0, r0
 800559e:	2101      	movs	r1, #1
 80055a0:	4421      	add	r1, r4
 80055a2:	f000 f81d 	bl	80055e0 <__utoa>
 80055a6:	e7f1      	b.n	800558c <__itoa+0x10>
 80055a8:	2100      	movs	r1, #0
 80055aa:	e7f9      	b.n	80055a0 <__itoa+0x24>

080055ac <itoa>:
 80055ac:	f7ff bfe6 	b.w	800557c <__itoa>

080055b0 <memset>:
 80055b0:	4402      	add	r2, r0
 80055b2:	4603      	mov	r3, r0
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d100      	bne.n	80055ba <memset+0xa>
 80055b8:	4770      	bx	lr
 80055ba:	f803 1b01 	strb.w	r1, [r3], #1
 80055be:	e7f9      	b.n	80055b4 <memset+0x4>

080055c0 <strcat>:
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4602      	mov	r2, r0
 80055c4:	7814      	ldrb	r4, [r2, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	3201      	adds	r2, #1
 80055ca:	2c00      	cmp	r4, #0
 80055cc:	d1fa      	bne.n	80055c4 <strcat+0x4>
 80055ce:	3b01      	subs	r3, #1
 80055d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055d8:	2a00      	cmp	r2, #0
 80055da:	d1f9      	bne.n	80055d0 <strcat+0x10>
 80055dc:	bd10      	pop	{r4, pc}
	...

080055e0 <__utoa>:
 80055e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e2:	4c1f      	ldr	r4, [pc, #124]	; (8005660 <__utoa+0x80>)
 80055e4:	b08b      	sub	sp, #44	; 0x2c
 80055e6:	4605      	mov	r5, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	466e      	mov	r6, sp
 80055ec:	f104 0c20 	add.w	ip, r4, #32
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	6861      	ldr	r1, [r4, #4]
 80055f4:	4637      	mov	r7, r6
 80055f6:	c703      	stmia	r7!, {r0, r1}
 80055f8:	3408      	adds	r4, #8
 80055fa:	4564      	cmp	r4, ip
 80055fc:	463e      	mov	r6, r7
 80055fe:	d1f7      	bne.n	80055f0 <__utoa+0x10>
 8005600:	7921      	ldrb	r1, [r4, #4]
 8005602:	7139      	strb	r1, [r7, #4]
 8005604:	1e91      	subs	r1, r2, #2
 8005606:	6820      	ldr	r0, [r4, #0]
 8005608:	6038      	str	r0, [r7, #0]
 800560a:	2922      	cmp	r1, #34	; 0x22
 800560c:	f04f 0100 	mov.w	r1, #0
 8005610:	d904      	bls.n	800561c <__utoa+0x3c>
 8005612:	7019      	strb	r1, [r3, #0]
 8005614:	460b      	mov	r3, r1
 8005616:	4618      	mov	r0, r3
 8005618:	b00b      	add	sp, #44	; 0x2c
 800561a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561c:	1e58      	subs	r0, r3, #1
 800561e:	4684      	mov	ip, r0
 8005620:	fbb5 f7f2 	udiv	r7, r5, r2
 8005624:	fb02 5617 	mls	r6, r2, r7, r5
 8005628:	3628      	adds	r6, #40	; 0x28
 800562a:	446e      	add	r6, sp
 800562c:	460c      	mov	r4, r1
 800562e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005632:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005636:	462e      	mov	r6, r5
 8005638:	42b2      	cmp	r2, r6
 800563a:	f101 0101 	add.w	r1, r1, #1
 800563e:	463d      	mov	r5, r7
 8005640:	d9ee      	bls.n	8005620 <__utoa+0x40>
 8005642:	2200      	movs	r2, #0
 8005644:	545a      	strb	r2, [r3, r1]
 8005646:	1919      	adds	r1, r3, r4
 8005648:	1aa5      	subs	r5, r4, r2
 800564a:	42aa      	cmp	r2, r5
 800564c:	dae3      	bge.n	8005616 <__utoa+0x36>
 800564e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005652:	780e      	ldrb	r6, [r1, #0]
 8005654:	7006      	strb	r6, [r0, #0]
 8005656:	3201      	adds	r2, #1
 8005658:	f801 5901 	strb.w	r5, [r1], #-1
 800565c:	e7f4      	b.n	8005648 <__utoa+0x68>
 800565e:	bf00      	nop
 8005660:	08005712 	.word	0x08005712

08005664 <_init>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr

08005670 <_fini>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr
