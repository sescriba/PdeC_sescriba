
MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005728  08005728  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005730  08005730  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000e4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d9eb  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ad  00000000  00000000  0002da33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a70  00000000  00000000  00030830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025166  00000000  00000000  000312a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109bc  00000000  00000000  00056406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5c00  00000000  00000000  00066dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c9c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ef0  00000000  00000000  0013ca14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800563c 	.word	0x0800563c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	0800563c 	.word	0x0800563c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2f>:
 80007cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007d4:	bf24      	itt	cs
 80007d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007de:	d90d      	bls.n	80007fc <__aeabi_d2f+0x30>
 80007e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007f4:	bf08      	it	eq
 80007f6:	f020 0001 	biceq.w	r0, r0, #1
 80007fa:	4770      	bx	lr
 80007fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000800:	d121      	bne.n	8000846 <__aeabi_d2f+0x7a>
 8000802:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000806:	bfbc      	itt	lt
 8000808:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800080c:	4770      	bxlt	lr
 800080e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000812:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000816:	f1c2 0218 	rsb	r2, r2, #24
 800081a:	f1c2 0c20 	rsb	ip, r2, #32
 800081e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000822:	fa20 f002 	lsr.w	r0, r0, r2
 8000826:	bf18      	it	ne
 8000828:	f040 0001 	orrne.w	r0, r0, #1
 800082c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000830:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000834:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000838:	ea40 000c 	orr.w	r0, r0, ip
 800083c:	fa23 f302 	lsr.w	r3, r3, r2
 8000840:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000844:	e7cc      	b.n	80007e0 <__aeabi_d2f+0x14>
 8000846:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800084a:	d107      	bne.n	800085c <__aeabi_d2f+0x90>
 800084c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000850:	bf1e      	ittt	ne
 8000852:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000856:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800085a:	4770      	bxne	lr
 800085c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000860:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000864:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <__aeabi_uldivmod>:
 800086c:	b953      	cbnz	r3, 8000884 <__aeabi_uldivmod+0x18>
 800086e:	b94a      	cbnz	r2, 8000884 <__aeabi_uldivmod+0x18>
 8000870:	2900      	cmp	r1, #0
 8000872:	bf08      	it	eq
 8000874:	2800      	cmpeq	r0, #0
 8000876:	bf1c      	itt	ne
 8000878:	f04f 31ff 	movne.w	r1, #4294967295
 800087c:	f04f 30ff 	movne.w	r0, #4294967295
 8000880:	f000 b974 	b.w	8000b6c <__aeabi_idiv0>
 8000884:	f1ad 0c08 	sub.w	ip, sp, #8
 8000888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088c:	f000 f806 	bl	800089c <__udivmoddi4>
 8000890:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <__udivmoddi4>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	9d08      	ldr	r5, [sp, #32]
 80008a2:	4604      	mov	r4, r0
 80008a4:	468e      	mov	lr, r1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d14d      	bne.n	8000946 <__udivmoddi4+0xaa>
 80008aa:	428a      	cmp	r2, r1
 80008ac:	4694      	mov	ip, r2
 80008ae:	d969      	bls.n	8000984 <__udivmoddi4+0xe8>
 80008b0:	fab2 f282 	clz	r2, r2
 80008b4:	b152      	cbz	r2, 80008cc <__udivmoddi4+0x30>
 80008b6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ba:	f1c2 0120 	rsb	r1, r2, #32
 80008be:	fa20 f101 	lsr.w	r1, r0, r1
 80008c2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ca:	4094      	lsls	r4, r2
 80008cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d0:	0c21      	lsrs	r1, r4, #16
 80008d2:	fbbe f6f8 	udiv	r6, lr, r8
 80008d6:	fa1f f78c 	uxth.w	r7, ip
 80008da:	fb08 e316 	mls	r3, r8, r6, lr
 80008de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008e2:	fb06 f107 	mul.w	r1, r6, r7
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d90a      	bls.n	8000900 <__udivmoddi4+0x64>
 80008ea:	eb1c 0303 	adds.w	r3, ip, r3
 80008ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80008f2:	f080 811f 	bcs.w	8000b34 <__udivmoddi4+0x298>
 80008f6:	4299      	cmp	r1, r3
 80008f8:	f240 811c 	bls.w	8000b34 <__udivmoddi4+0x298>
 80008fc:	3e02      	subs	r6, #2
 80008fe:	4463      	add	r3, ip
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	b2a4      	uxth	r4, r4
 8000904:	fbb3 f0f8 	udiv	r0, r3, r8
 8000908:	fb08 3310 	mls	r3, r8, r0, r3
 800090c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000910:	fb00 f707 	mul.w	r7, r0, r7
 8000914:	42a7      	cmp	r7, r4
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x92>
 8000918:	eb1c 0404 	adds.w	r4, ip, r4
 800091c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000920:	f080 810a 	bcs.w	8000b38 <__udivmoddi4+0x29c>
 8000924:	42a7      	cmp	r7, r4
 8000926:	f240 8107 	bls.w	8000b38 <__udivmoddi4+0x29c>
 800092a:	4464      	add	r4, ip
 800092c:	3802      	subs	r0, #2
 800092e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000932:	1be4      	subs	r4, r4, r7
 8000934:	2600      	movs	r6, #0
 8000936:	b11d      	cbz	r5, 8000940 <__udivmoddi4+0xa4>
 8000938:	40d4      	lsrs	r4, r2
 800093a:	2300      	movs	r3, #0
 800093c:	e9c5 4300 	strd	r4, r3, [r5]
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	428b      	cmp	r3, r1
 8000948:	d909      	bls.n	800095e <__udivmoddi4+0xc2>
 800094a:	2d00      	cmp	r5, #0
 800094c:	f000 80ef 	beq.w	8000b2e <__udivmoddi4+0x292>
 8000950:	2600      	movs	r6, #0
 8000952:	e9c5 0100 	strd	r0, r1, [r5]
 8000956:	4630      	mov	r0, r6
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	fab3 f683 	clz	r6, r3
 8000962:	2e00      	cmp	r6, #0
 8000964:	d14a      	bne.n	80009fc <__udivmoddi4+0x160>
 8000966:	428b      	cmp	r3, r1
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xd4>
 800096a:	4282      	cmp	r2, r0
 800096c:	f200 80f9 	bhi.w	8000b62 <__udivmoddi4+0x2c6>
 8000970:	1a84      	subs	r4, r0, r2
 8000972:	eb61 0303 	sbc.w	r3, r1, r3
 8000976:	2001      	movs	r0, #1
 8000978:	469e      	mov	lr, r3
 800097a:	2d00      	cmp	r5, #0
 800097c:	d0e0      	beq.n	8000940 <__udivmoddi4+0xa4>
 800097e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000982:	e7dd      	b.n	8000940 <__udivmoddi4+0xa4>
 8000984:	b902      	cbnz	r2, 8000988 <__udivmoddi4+0xec>
 8000986:	deff      	udf	#255	; 0xff
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	2a00      	cmp	r2, #0
 800098e:	f040 8092 	bne.w	8000ab6 <__udivmoddi4+0x21a>
 8000992:	eba1 010c 	sub.w	r1, r1, ip
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2601      	movs	r6, #1
 80009a0:	0c20      	lsrs	r0, r4, #16
 80009a2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009a6:	fb07 1113 	mls	r1, r7, r3, r1
 80009aa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ae:	fb0e f003 	mul.w	r0, lr, r3
 80009b2:	4288      	cmp	r0, r1
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x12c>
 80009b6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ba:	f103 38ff 	add.w	r8, r3, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x12a>
 80009c0:	4288      	cmp	r0, r1
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2c0>
 80009c6:	4643      	mov	r3, r8
 80009c8:	1a09      	subs	r1, r1, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d0:	fb07 1110 	mls	r1, r7, r0, r1
 80009d4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x156>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x154>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2ca>
 80009f0:	4608      	mov	r0, r1
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009fa:	e79c      	b.n	8000936 <__udivmoddi4+0x9a>
 80009fc:	f1c6 0720 	rsb	r7, r6, #32
 8000a00:	40b3      	lsls	r3, r6
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a12:	431c      	orrs	r4, r3
 8000a14:	40f9      	lsrs	r1, r7
 8000a16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a22:	0c20      	lsrs	r0, r4, #16
 8000a24:	fa1f fe8c 	uxth.w	lr, ip
 8000a28:	fb09 1118 	mls	r1, r9, r8, r1
 8000a2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a30:	fb08 f00e 	mul.w	r0, r8, lr
 8000a34:	4288      	cmp	r0, r1
 8000a36:	fa02 f206 	lsl.w	r2, r2, r6
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b8>
 8000a3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2bc>
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2bc>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4461      	add	r1, ip
 8000a54:	1a09      	subs	r1, r1, r0
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	458e      	cmp	lr, r1
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1e2>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2b4>
 8000a76:	458e      	cmp	lr, r1
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2b4>
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	4461      	add	r1, ip
 8000a7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a82:	fba0 9402 	umull	r9, r4, r0, r2
 8000a86:	eba1 010e 	sub.w	r1, r1, lr
 8000a8a:	42a1      	cmp	r1, r4
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46a6      	mov	lr, r4
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x2a4>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x2a0>
 8000a94:	b15d      	cbz	r5, 8000aae <__udivmoddi4+0x212>
 8000a96:	ebb3 0208 	subs.w	r2, r3, r8
 8000a9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000aa2:	fa22 f306 	lsr.w	r3, r2, r6
 8000aa6:	40f1      	lsrs	r1, r6
 8000aa8:	431f      	orrs	r7, r3
 8000aaa:	e9c5 7100 	strd	r7, r1, [r5]
 8000aae:	2600      	movs	r6, #0
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	40d8      	lsrs	r0, r3
 8000abc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ad4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ad8:	0c0b      	lsrs	r3, r1, #16
 8000ada:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ade:	fb00 f60e 	mul.w	r6, r0, lr
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x260>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b8>
 8000af4:	429e      	cmp	r6, r3
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b8>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	1b9b      	subs	r3, r3, r6
 8000afe:	b289      	uxth	r1, r1
 8000b00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b04:	fb07 3316 	mls	r3, r7, r6, r3
 8000b08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x28a>
 8000b14:	eb1c 0101 	adds.w	r1, ip, r1
 8000b18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2b0>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2b0>
 8000b22:	3e02      	subs	r6, #2
 8000b24:	4461      	add	r1, ip
 8000b26:	1ac9      	subs	r1, r1, r3
 8000b28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0x104>
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e705      	b.n	8000940 <__udivmoddi4+0xa4>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e3      	b.n	8000900 <__udivmoddi4+0x64>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6f8      	b.n	800092e <__udivmoddi4+0x92>
 8000b3c:	454b      	cmp	r3, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f8>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f8>
 8000b4c:	4646      	mov	r6, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x28a>
 8000b50:	4620      	mov	r0, r4
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1e2>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x260>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b8>
 8000b5c:	3b02      	subs	r3, #2
 8000b5e:	4461      	add	r1, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x12c>
 8000b62:	4630      	mov	r0, r6
 8000b64:	e709      	b.n	800097a <__udivmoddi4+0xde>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x156>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <APP_SMInit>:
 * @brief  SM Initialization
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType APP_SMInit(void){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	71fb      	strb	r3, [r7, #7]

	//Initialize State Machine
	states = SM_INIT;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <APP_SMInit+0x30>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
	//Set a timer to allow read values from device
	ret |= DEV_TimerInit(&idle, READ_TIME);
 8000b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b84:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <APP_SMInit+0x34>)
 8000b86:	f004 f911 	bl	8004dac <DEV_TimerInit>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	71fb      	strb	r3, [r7, #7]
	return ret;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000034 	.word	0x20000034
 8000ba4:	20000054 	.word	0x20000054

08000ba8 <APP_SMProccess>:
 * @brief  SM Set and work according current state
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType APP_SMProccess(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	bool_t done = false;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71bb      	strb	r3, [r7, #6]

	switch(states){
 8000bb6:	4b5b      	ldr	r3, [pc, #364]	; (8000d24 <APP_SMProccess+0x17c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b05      	cmp	r3, #5
 8000bbc:	f200 80a7 	bhi.w	8000d0e <APP_SMProccess+0x166>
 8000bc0:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <APP_SMProccess+0x20>)
 8000bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc6:	bf00      	nop
 8000bc8:	08000be1 	.word	0x08000be1
 8000bcc:	08000c43 	.word	0x08000c43
 8000bd0:	08000c6f 	.word	0x08000c6f
 8000bd4:	08000c9b 	.word	0x08000c9b
 8000bd8:	08000cc7 	.word	0x08000cc7
 8000bdc:	08000ceb 	.word	0x08000ceb
		//Initialization state: initialize UART and I2C communication and MPU9250
		case SM_INIT:
			ret |= DEV_UARTInit();
 8000be0:	f004 f978 	bl	8004ed4 <DEV_UARTInit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <APP_SMProccess+0x54>
				states = SM_ERROR;
 8000bf4:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <APP_SMProccess+0x17c>)
 8000bf6:	2206      	movs	r2, #6
 8000bf8:	701a      	strb	r2, [r3, #0]
				break;
 8000bfa:	e08e      	b.n	8000d1a <APP_SMProccess+0x172>
			}
			ret |= DEV_I2CInit();
 8000bfc:	f004 fbd8 	bl	80053b0 <DEV_I2CInit>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <APP_SMProccess+0x70>
				states = SM_ERROR;
 8000c10:	4b44      	ldr	r3, [pc, #272]	; (8000d24 <APP_SMProccess+0x17c>)
 8000c12:	2206      	movs	r2, #6
 8000c14:	701a      	strb	r2, [r3, #0]
				break;
 8000c16:	e080      	b.n	8000d1a <APP_SMProccess+0x172>
			}
			ret |= APP_MPU9250Init();
 8000c18:	f004 fa02 	bl	8005020 <APP_MPU9250Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	71fb      	strb	r3, [r7, #7]
			if(ret == API_OK){
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d106      	bne.n	8000c3a <APP_SMProccess+0x92>
				new_state = SM_READGYRO;
 8000c2c:	4b3e      	ldr	r3, [pc, #248]	; (8000d28 <APP_SMProccess+0x180>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
				states = SM_IDLE;
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <APP_SMProccess+0x17c>)
 8000c34:	2205      	movs	r2, #5
 8000c36:	701a      	strb	r2, [r3, #0]
			}
			else{
				states = SM_ERROR;
				break;
			}
			break;
 8000c38:	e06f      	b.n	8000d1a <APP_SMProccess+0x172>
				states = SM_ERROR;
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <APP_SMProccess+0x17c>)
 8000c3c:	2206      	movs	r2, #6
 8000c3e:	701a      	strb	r2, [r3, #0]
				break;
 8000c40:	e06b      	b.n	8000d1a <APP_SMProccess+0x172>
		//Gyroscope State: Read Gyroscope values
		case SM_READGYRO:
			ret |= APP_MPU9250ReadGyro(&read_buff.gyro);
 8000c42:	483a      	ldr	r0, [pc, #232]	; (8000d2c <APP_SMProccess+0x184>)
 8000c44:	f004 fa4e 	bl	80050e4 <APP_MPU9250ReadGyro>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <APP_SMProccess+0xb8>
				states = SM_ERROR;
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <APP_SMProccess+0x17c>)
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	701a      	strb	r2, [r3, #0]
				break;
 8000c5e:	e05c      	b.n	8000d1a <APP_SMProccess+0x172>
			}
			new_state = SM_READACCL;
 8000c60:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <APP_SMProccess+0x180>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	701a      	strb	r2, [r3, #0]
			states = SM_IDLE;
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <APP_SMProccess+0x17c>)
 8000c68:	2205      	movs	r2, #5
 8000c6a:	701a      	strb	r2, [r3, #0]
			break;
 8000c6c:	e055      	b.n	8000d1a <APP_SMProccess+0x172>
		//Accelerometer State: Read Accelerometer values
		case SM_READACCL:
			ret |= APP_MPU9250ReadAccl(&read_buff.accl);
 8000c6e:	4830      	ldr	r0, [pc, #192]	; (8000d30 <APP_SMProccess+0x188>)
 8000c70:	f004 fa90 	bl	8005194 <APP_MPU9250ReadAccl>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <APP_SMProccess+0xe4>
				states = SM_ERROR;
 8000c84:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <APP_SMProccess+0x17c>)
 8000c86:	2206      	movs	r2, #6
 8000c88:	701a      	strb	r2, [r3, #0]
				break;
 8000c8a:	e046      	b.n	8000d1a <APP_SMProccess+0x172>
			}
			new_state = SM_READTEMP;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <APP_SMProccess+0x180>)
 8000c8e:	2203      	movs	r2, #3
 8000c90:	701a      	strb	r2, [r3, #0]
			states = SM_IDLE;
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <APP_SMProccess+0x17c>)
 8000c94:	2205      	movs	r2, #5
 8000c96:	701a      	strb	r2, [r3, #0]
			break;
 8000c98:	e03f      	b.n	8000d1a <APP_SMProccess+0x172>
		//Temperature State: Read Temperature value
		case SM_READTEMP:
			ret |= APP_MPU9250ReadTemp(&read_buff.temp);
 8000c9a:	4826      	ldr	r0, [pc, #152]	; (8000d34 <APP_SMProccess+0x18c>)
 8000c9c:	f004 fad2 	bl	8005244 <APP_MPU9250ReadTemp>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	71fb      	strb	r3, [r7, #7]
			if(ret != API_OK){
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <APP_SMProccess+0x110>
				states = SM_ERROR;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <APP_SMProccess+0x17c>)
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	701a      	strb	r2, [r3, #0]
				break;
 8000cb6:	e030      	b.n	8000d1a <APP_SMProccess+0x172>
			}
			new_state = SM_PRINT;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <APP_SMProccess+0x180>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	701a      	strb	r2, [r3, #0]
			states = SM_IDLE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <APP_SMProccess+0x17c>)
 8000cc0:	2205      	movs	r2, #5
 8000cc2:	701a      	strb	r2, [r3, #0]
			break;
 8000cc4:	e029      	b.n	8000d1a <APP_SMProccess+0x172>
		//Print state: print a text via UART with values
		case SM_PRINT:
			ret |= print_string(&read_buff);
 8000cc6:	4819      	ldr	r0, [pc, #100]	; (8000d2c <APP_SMProccess+0x184>)
 8000cc8:	f000 f838 	bl	8000d3c <print_string>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	71fb      	strb	r3, [r7, #7]
			if(ret == API_OK){
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d11b      	bne.n	8000d14 <APP_SMProccess+0x16c>
				new_state = SM_READGYRO;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <APP_SMProccess+0x180>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
				states = SM_IDLE;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <APP_SMProccess+0x17c>)
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ce8:	e014      	b.n	8000d14 <APP_SMProccess+0x16c>
		//Idle state: we can do anything here
		case SM_IDLE:
			//Check read time
			ret |= DEV_TimerRead(&idle, &done);
 8000cea:	1dbb      	adds	r3, r7, #6
 8000cec:	4619      	mov	r1, r3
 8000cee:	4812      	ldr	r0, [pc, #72]	; (8000d38 <APP_SMProccess+0x190>)
 8000cf0:	f004 f880 	bl	8004df4 <DEV_TimerRead>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]
			if(done == true){
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d009      	beq.n	8000d18 <APP_SMProccess+0x170>
				states = new_state;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <APP_SMProccess+0x180>)
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <APP_SMProccess+0x17c>)
 8000d0a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d0c:	e004      	b.n	8000d18 <APP_SMProccess+0x170>
		//Error state: return error
		case SM_ERROR:
		default:
			ret = API_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	71fb      	strb	r3, [r7, #7]
			break;
 8000d12:	e002      	b.n	8000d1a <APP_SMProccess+0x172>
			break;
 8000d14:	bf00      	nop
 8000d16:	e000      	b.n	8000d1a <APP_SMProccess+0x172>
			break;
 8000d18:	bf00      	nop
	}
	return ret;
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000034 	.word	0x20000034
 8000d28:	20000035 	.word	0x20000035
 8000d2c:	20000038 	.word	0x20000038
 8000d30:	20000044 	.word	0x20000044
 8000d34:	20000050 	.word	0x20000050
 8000d38:	20000054 	.word	0x20000054

08000d3c <print_string>:
 * @brief  Print a string with MPU9250 information via UART
 * @param
 * 		data	[I] - MPU9250 Data to print
 * @retval ret - Return API value
 */
static retType print_string(MPU9250_t * data){
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b0e4      	sub	sp, #400	; 0x190
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000d4a:	6018      	str	r0, [r3, #0]

	retType ret = API_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
	uint8_t buff[256] = {0};
 8000d52:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	3304      	adds	r3, #4
 8000d60:	22fc      	movs	r2, #252	; 0xfc
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 fc0f 	bl	8005588 <memset>
	uint8_t value[8] = {0};
 8000d6a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
	uint8_t str[] = "Data returned: ";
 8000d7a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000d82:	4ab1      	ldr	r2, [pc, #708]	; (8001048 <print_string+0x30c>)
 8000d84:	461c      	mov	r4, r3
 8000d86:	4613      	mov	r3, r2
 8000d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t str_gyro[] = "\nGyroscope [°/s]: ";
 8000d8e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d96:	4aad      	ldr	r2, [pc, #692]	; (800104c <print_string+0x310>)
 8000d98:	461c      	mov	r4, r3
 8000d9a:	4615      	mov	r5, r2
 8000d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	6023      	str	r3, [r4, #0]
	uint8_t str_accl[] = "\nAccelerometer [g]: ";
 8000da4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000da8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000dac:	4aa8      	ldr	r2, [pc, #672]	; (8001050 <print_string+0x314>)
 8000dae:	461c      	mov	r4, r3
 8000db0:	4615      	mov	r5, r2
 8000db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dba:	6020      	str	r0, [r4, #0]
 8000dbc:	3404      	adds	r4, #4
 8000dbe:	7021      	strb	r1, [r4, #0]
	uint8_t str_temp[] = "\nTemperature [°C]: ";
 8000dc0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000dc4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000dc8:	4aa2      	ldr	r2, [pc, #648]	; (8001054 <print_string+0x318>)
 8000dca:	461c      	mov	r4, r3
 8000dcc:	4615      	mov	r5, r2
 8000dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dd6:	6020      	str	r0, [r4, #0]
 8000dd8:	3404      	adds	r4, #4
 8000dda:	7021      	strb	r1, [r4, #0]
	uint8_t str_x[] = "\nAxis X: ";
 8000ddc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000de0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000de4:	4a9c      	ldr	r2, [pc, #624]	; (8001058 <print_string+0x31c>)
 8000de6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000de8:	c303      	stmia	r3!, {r0, r1}
 8000dea:	801a      	strh	r2, [r3, #0]
	uint8_t str_y[] = "\nAxis Y: ";
 8000dec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000df0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8000df4:	4a99      	ldr	r2, [pc, #612]	; (800105c <print_string+0x320>)
 8000df6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000df8:	c303      	stmia	r3!, {r0, r1}
 8000dfa:	801a      	strh	r2, [r3, #0]
	uint8_t str_z[] = "\nAxis Z: ";
 8000dfc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000e00:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000e04:	4a96      	ldr	r2, [pc, #600]	; (8001060 <print_string+0x324>)
 8000e06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e08:	c303      	stmia	r3!, {r0, r1}
 8000e0a:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f

	strcat(buff, str);
 8000e12:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000e16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fbbb 	bl	8005598 <strcat>
	strcat(buff, str_gyro);
 8000e22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e26:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fbb3 	bl	8005598 <strcat>
	strcat(buff, str_x);
 8000e32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fbab 	bl	8005598 <strcat>
	ftoa(data->gyro.x, value);
 8000e42:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000e46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	edd3 7a00 	vldr	s15, [r3]
 8000e50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e54:	4618      	mov	r0, r3
 8000e56:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5a:	f000 f905 	bl	8001068 <ftoa>
	strcat(buff, value);
 8000e5e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000e62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 fb95 	bl	8005598 <strcat>
	strcat(buff, str_y);
 8000e6e:	f107 0218 	add.w	r2, r7, #24
 8000e72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 fb8d 	bl	8005598 <strcat>
	ftoa(data->gyro.y, value);
 8000e7e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000e82:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e90:	4618      	mov	r0, r3
 8000e92:	eeb0 0a67 	vmov.f32	s0, s15
 8000e96:	f000 f8e7 	bl	8001068 <ftoa>
	strcat(buff, value);
 8000e9a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000e9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f004 fb77 	bl	8005598 <strcat>
	strcat(buff, str_z);
 8000eaa:	f107 020c 	add.w	r2, r7, #12
 8000eae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 fb6f 	bl	8005598 <strcat>
	ftoa(data->gyro.z, value);
 8000eba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000ebe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ec8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ecc:	4618      	mov	r0, r3
 8000ece:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed2:	f000 f8c9 	bl	8001068 <ftoa>
	strcat(buff, value);
 8000ed6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000eda:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fb59 	bl	8005598 <strcat>

	strcat(buff, str_accl);
 8000ee6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000eea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f004 fb51 	bl	8005598 <strcat>
	strcat(buff, str_x);
 8000ef6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000efa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fb49 	bl	8005598 <strcat>
	ftoa(data->accl.x, value);
 8000f06:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f14:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f18:	4618      	mov	r0, r3
 8000f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1e:	f000 f8a3 	bl	8001068 <ftoa>
	strcat(buff, value);
 8000f22:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000f26:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 fb33 	bl	8005598 <strcat>
	strcat(buff, str_y);
 8000f32:	f107 0218 	add.w	r2, r7, #24
 8000f36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fb2b 	bl	8005598 <strcat>
	ftoa(data->accl.y, value);
 8000f42:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f54:	4618      	mov	r0, r3
 8000f56:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5a:	f000 f885 	bl	8001068 <ftoa>
	strcat(buff, value);
 8000f5e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000f62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f004 fb15 	bl	8005598 <strcat>
	strcat(buff, str_z);
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fb0d 	bl	8005598 <strcat>
	ftoa(data->accl.z, value);
 8000f7e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f82:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f90:	4618      	mov	r0, r3
 8000f92:	eeb0 0a67 	vmov.f32	s0, s15
 8000f96:	f000 f867 	bl	8001068 <ftoa>
	strcat(buff, value);
 8000f9a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000f9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 faf7 	bl	8005598 <strcat>

	strcat(buff, str_temp);
 8000faa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000fae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 faef 	bl	8005598 <strcat>
	itoa(data->temp, value, 10);
 8000fba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fbe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	8b1b      	ldrh	r3, [r3, #24]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fcc:	220a      	movs	r2, #10
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f004 fad8 	bl	8005584 <itoa>
	strcat(buff, value);
 8000fd4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000fd8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 fada 	bl	8005598 <strcat>
	strcat(buff, "\n\n");
 8000fe4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f901 	bl	80001f0 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <print_string+0x328>)
 8000ffa:	8811      	ldrh	r1, [r2, #0]
 8000ffc:	7892      	ldrb	r2, [r2, #2]
 8000ffe:	8019      	strh	r1, [r3, #0]
 8001000:	709a      	strb	r2, [r3, #2]

	for(i = 0; i<256; i++){
 8001002:	2300      	movs	r3, #0
 8001004:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
		if(buff[i] == '\0') return ret;
 8001008:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800100c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8001010:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <print_string+0x2e4>
 800101a:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 800101e:	e00d      	b.n	800103c <print_string+0x300>
		//Print byte by byte
		DEV_UARTSendChar(&buff[i]);
 8001020:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001024:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001028:	4413      	add	r3, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f003 ff18 	bl	8004e60 <DEV_UARTSendChar>
	for(i = 0; i<256; i++){
 8001030:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001034:	3301      	adds	r3, #1
 8001036:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
		if(buff[i] == '\0') return ret;
 800103a:	e7e5      	b.n	8001008 <print_string+0x2cc>
	}
	return ret;
}
 800103c:	4618      	mov	r0, r3
 800103e:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001042:	46bd      	mov	sp, r7
 8001044:	bdb0      	pop	{r4, r5, r7, pc}
 8001046:	bf00      	nop
 8001048:	08005658 	.word	0x08005658
 800104c:	08005668 	.word	0x08005668
 8001050:	0800567c 	.word	0x0800567c
 8001054:	08005694 	.word	0x08005694
 8001058:	080056ac 	.word	0x080056ac
 800105c:	080056b8 	.word	0x080056b8
 8001060:	080056c4 	.word	0x080056c4
 8001064:	08005654 	.word	0x08005654

08001068 <ftoa>:
 * @param
 * 		value	[I] - Float data
 * 		str		[O] - String output
 * @retval void
 */
static void ftoa(float value, uint8_t * str){
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af00      	add	r7, sp, #0
 800106e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001072:	60b8      	str	r0, [r7, #8]

	float fpart;
    uint8_t ipart;
    uint8_t istr[5] = {0};
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    uint8_t dot[] = ".";
 800107e:	232e      	movs	r3, #46	; 0x2e
 8001080:	843b      	strh	r3, [r7, #32]
    uint8_t fstr[2] = {0};
 8001082:	2300      	movs	r3, #0
 8001084:	83bb      	strh	r3, [r7, #28]
    uint8_t vstr[8] = {0};
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]

    //Get int part
    ipart = (uint8_t)value;
 800108e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
 800109a:	793b      	ldrb	r3, [r7, #4]
 800109c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    //Get float part
    fpart = value - (float)ipart;
 80010a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80010b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    //Convert int part to string
    itoa(ipart, istr, 10);
 80010b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010bc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80010c0:	220a      	movs	r2, #10
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 fa5e 	bl	8005584 <itoa>
	//Convert float part to string
	fpart = fpart * pow(10, 2);
 80010c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001154 <ftoa+0xec>
 80010d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	itoa((uint8_t)fpart, fstr, 10);
 80010d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80010e4:	793b      	ldrb	r3, [r7, #4]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	220a      	movs	r2, #10
 80010f0:	4619      	mov	r1, r3
 80010f2:	f004 fa47 	bl	8005584 <itoa>

	strcat(vstr,istr);
 80010f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f004 fa49 	bl	8005598 <strcat>
	strcat(vstr, dot);
 8001106:	f107 0220 	add.w	r2, r7, #32
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fa41 	bl	8005598 <strcat>
	strcat(vstr, fstr);
 8001116:	f107 021c 	add.w	r2, r7, #28
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fa39 	bl	8005598 <strcat>

	for(int i = 0; i < 8; i++){
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
 800112a:	e00b      	b.n	8001144 <ftoa+0xdc>
		str[i] = vstr[i];
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	f107 0114 	add.w	r1, r7, #20
 8001136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001138:	440a      	add	r2, r1
 800113a:	7812      	ldrb	r2, [r2, #0]
 800113c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 800113e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001140:	3301      	adds	r3, #1
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
 8001144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001146:	2b07      	cmp	r3, #7
 8001148:	ddf0      	ble.n	800112c <ftoa+0xc4>
	}
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3738      	adds	r7, #56	; 0x38
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	42c80000 	.word	0x42c80000

08001158 <main>:
 * @brief  Main program
 * @param  void
 * @retval void
 */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	retType ret = API_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8001162:	f000 f927 	bl	80013b4 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8001166:	f000 f817 	bl	8001198 <SystemClock_Config>

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED2);
 800116a:	2001      	movs	r0, #1
 800116c:	f000 f8b8 	bl	80012e0 <BSP_LED_Init>

	//FSM initialization
	ret |= APP_SMInit();
 8001170:	f7ff fcfe 	bl	8000b70 <APP_SMInit>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4313      	orrs	r3, r2
 800117c:	71fb      	strb	r3, [r7, #7]

	/* Infinite loop */
	while (1)
	{
		//Update FSM
		ret |= APP_SMProccess();
 800117e:	f7ff fd13 	bl	8000ba8 <APP_SMProccess>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4313      	orrs	r3, r2
 800118a:	71fb      	strb	r3, [r7, #7]
		if(ret != API_OK) Error_Handler();
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f5      	beq.n	800117e <main+0x26>
 8001192:	f000 f863 	bl	800125c <Error_Handler>
		ret |= APP_SMProccess();
 8001196:	e7f2      	b.n	800117e <main+0x26>

08001198 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  void
 * @retval void
 */
static void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <SystemClock_Config+0xbc>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a2b      	ldr	r2, [pc, #172]	; (8001254 <SystemClock_Config+0xbc>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <SystemClock_Config+0xbc>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <SystemClock_Config+0xc0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <SystemClock_Config+0xc0>)
 80011c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <SystemClock_Config+0xc0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d6:	2301      	movs	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011de:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80011ea:	2308      	movs	r3, #8
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80011ee:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f8:	2307      	movs	r3, #7
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fd45 	bl	8003c90 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 800120c:	f000 f826 	bl	800125c <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001210:	f002 fcee 	bl	8003bf0 <HAL_PWREx_EnableOverDrive>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 800121a:	f000 f81f 	bl	800125c <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800121e:	230f      	movs	r3, #15
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2302      	movs	r3, #2
 8001224:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800122a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001236:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800123a:	2105      	movs	r1, #5
 800123c:	4618      	mov	r0, r3
 800123e:	f002 ff9f 	bl	8004180 <HAL_RCC_ClockConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8001248:	f000 f808 	bl	800125c <Error_Handler>
	}
}
 800124c:	bf00      	nop
 800124e:	3750      	adds	r7, #80	; 0x50
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  void
 * @retval void
 */
static void Error_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001260:	2001      	movs	r0, #1
 8001262:	f000 f88d 	bl	8001380 <BSP_LED_On>
	while (1)
 8001266:	e7fe      	b.n	8001266 <Error_Handler+0xa>

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a8:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b6:	f7ff ffd7 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f004 f927 	bl	800550c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff ff4b 	bl	8001158 <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80012d0:	08005738 	.word	0x08005738
  ldr r2, =_sbss
 80012d4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80012d8:	200000fc 	.word	0x200000fc

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10e      	bne.n	800130e <BSP_LED_Init+0x2e>
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <BSP_LED_Init+0x94>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <BSP_LED_Init+0x94>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <BSP_LED_Init+0x94>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	e00d      	b.n	800132a <BSP_LED_Init+0x4a>
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <BSP_LED_Init+0x94>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <BSP_LED_Init+0x94>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <BSP_LED_Init+0x94>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <BSP_LED_Init+0x98>)
 800132e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <BSP_LED_Init+0x9c>)
 8001344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001348:	f107 0214 	add.w	r2, r7, #20
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f9e4 	bl	800171c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <BSP_LED_Init+0x9c>)
 8001358:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <BSP_LED_Init+0x98>)
 8001360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001364:	2200      	movs	r2, #0
 8001366:	4619      	mov	r1, r3
 8001368:	f000 fb84 	bl	8001a74 <HAL_GPIO_WritePin>
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	080056fc 	.word	0x080056fc
 800137c:	20000004 	.word	0x20000004

08001380 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <BSP_LED_On+0x2c>)
 800138e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <BSP_LED_On+0x30>)
 8001396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800139a:	2201      	movs	r2, #1
 800139c:	4619      	mov	r1, r3
 800139e:	f000 fb69 	bl	8001a74 <HAL_GPIO_WritePin>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000004 	.word	0x20000004
 80013b0:	080056fc 	.word	0x080056fc

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f92b 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f002 fb42 	bl	8003a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f943 	bl	80016a2 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f90b 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	20000014 	.word	0x20000014
 8001454:	20000010 	.word	0x20000010

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000014 	.word	0x20000014
 800147c:	20000060 	.word	0x20000060

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000060 	.word	0x20000060

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff8e 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff29 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff3e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff8e 	bl	800158c <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5d 	bl	8001538 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff31 	bl	80014fc <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d004      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e00c      	b.n	80016f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2205      	movs	r2, #5
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800170c:	b2db      	uxtb	r3, r3
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e177      	b.n	8001a28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8166 	bne.w	8001a22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d005      	beq.n	800176e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	2b02      	cmp	r3, #2
 800176c:	d130      	bne.n	80017d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 0201 	and.w	r2, r3, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d017      	beq.n	800180c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d123      	bne.n	8001860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80c0 	beq.w	8001a22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018be:	4a61      	ldr	r2, [pc, #388]	; (8001a44 <HAL_GPIO_Init+0x328>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_GPIO_Init+0x32c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d037      	beq.n	800195a <HAL_GPIO_Init+0x23e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <HAL_GPIO_Init+0x330>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d031      	beq.n	8001956 <HAL_GPIO_Init+0x23a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a56      	ldr	r2, [pc, #344]	; (8001a50 <HAL_GPIO_Init+0x334>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d02b      	beq.n	8001952 <HAL_GPIO_Init+0x236>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_GPIO_Init+0x338>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d025      	beq.n	800194e <HAL_GPIO_Init+0x232>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a54      	ldr	r2, [pc, #336]	; (8001a58 <HAL_GPIO_Init+0x33c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01f      	beq.n	800194a <HAL_GPIO_Init+0x22e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a53      	ldr	r2, [pc, #332]	; (8001a5c <HAL_GPIO_Init+0x340>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x22a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_GPIO_Init+0x344>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x226>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a51      	ldr	r2, [pc, #324]	; (8001a64 <HAL_GPIO_Init+0x348>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x222>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a50      	ldr	r2, [pc, #320]	; (8001a68 <HAL_GPIO_Init+0x34c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x21e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_GPIO_Init+0x350>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x21a>
 8001932:	2309      	movs	r3, #9
 8001934:	e012      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001936:	230a      	movs	r3, #10
 8001938:	e010      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193a:	2308      	movs	r3, #8
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193e:	2307      	movs	r3, #7
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x240>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196c:	4935      	ldr	r1, [pc, #212]	; (8001a44 <HAL_GPIO_Init+0x328>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_GPIO_Init+0x354>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199e:	4a34      	ldr	r2, [pc, #208]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_GPIO_Init+0x354>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae84 	bls.w	8001738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40021400 	.word	0x40021400
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40021c00 	.word	0x40021c00
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022400 	.word	0x40022400
 8001a70:	40013c00 	.word	0x40013c00

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e12b      	b.n	8001d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f001 fff6 	bl	8003ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2224      	movs	r2, #36	; 0x24
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b0c:	f002 fd30 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8001b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a81      	ldr	r2, [pc, #516]	; (8001d1c <HAL_I2C_Init+0x274>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d807      	bhi.n	8001b2c <HAL_I2C_Init+0x84>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a80      	ldr	r2, [pc, #512]	; (8001d20 <HAL_I2C_Init+0x278>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	bf94      	ite	ls
 8001b24:	2301      	movls	r3, #1
 8001b26:	2300      	movhi	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e006      	b.n	8001b3a <HAL_I2C_Init+0x92>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4a7d      	ldr	r2, [pc, #500]	; (8001d24 <HAL_I2C_Init+0x27c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	bf94      	ite	ls
 8001b34:	2301      	movls	r3, #1
 8001b36:	2300      	movhi	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0e7      	b.n	8001d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4a78      	ldr	r2, [pc, #480]	; (8001d28 <HAL_I2C_Init+0x280>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	0c9b      	lsrs	r3, r3, #18
 8001b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a6a      	ldr	r2, [pc, #424]	; (8001d1c <HAL_I2C_Init+0x274>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d802      	bhi.n	8001b7c <HAL_I2C_Init+0xd4>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	e009      	b.n	8001b90 <HAL_I2C_Init+0xe8>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	4a69      	ldr	r2, [pc, #420]	; (8001d2c <HAL_I2C_Init+0x284>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	3301      	adds	r3, #1
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ba2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	495c      	ldr	r1, [pc, #368]	; (8001d1c <HAL_I2C_Init+0x274>)
 8001bac:	428b      	cmp	r3, r1
 8001bae:	d819      	bhi.n	8001be4 <HAL_I2C_Init+0x13c>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1e59      	subs	r1, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bc4:	400b      	ands	r3, r1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <HAL_I2C_Init+0x138>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e59      	subs	r1, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bde:	e051      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e04f      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d111      	bne.n	8001c10 <HAL_I2C_Init+0x168>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	440b      	add	r3, r1
 8001bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	e012      	b.n	8001c36 <HAL_I2C_Init+0x18e>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1e58      	subs	r0, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	0099      	lsls	r1, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Init+0x196>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e022      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10e      	bne.n	8001c64 <HAL_I2C_Init+0x1bc>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1e58      	subs	r0, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	440b      	add	r3, r1
 8001c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c62:	e00f      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	0099      	lsls	r1, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	6809      	ldr	r1, [r1, #0]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6911      	ldr	r1, [r2, #16]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68d2      	ldr	r2, [r2, #12]
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	000186a0 	.word	0x000186a0
 8001d20:	001e847f 	.word	0x001e847f
 8001d24:	003d08ff 	.word	0x003d08ff
 8001d28:	431bde83 	.word	0x431bde83
 8001d2c:	10624dd3 	.word	0x10624dd3

08001d30 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	817b      	strh	r3, [r7, #10]
 8001d40:	4613      	mov	r3, r2
 8001d42:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	f040 8085 	bne.w	8001e60 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_I2C_Master_Transmit_IT+0x140>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	08db      	lsrs	r3, r3, #3
 8001d5c:	4a45      	ldr	r2, [pc, #276]	; (8001e74 <HAL_I2C_Master_Transmit_IT+0x144>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0a1a      	lsrs	r2, r3, #8
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009a      	lsls	r2, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d116      	bne.n	8001daa <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f043 0220 	orr.w	r2, r3, #32
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e05b      	b.n	8001e62 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d0db      	beq.n	8001d70 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2C_Master_Transmit_IT+0x96>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e04d      	b.n	8001e62 <HAL_I2C_Master_Transmit_IT+0x132>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d007      	beq.n	8001dec <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2221      	movs	r2, #33	; 0x21
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2210      	movs	r2, #16
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	893a      	ldrh	r2, [r7, #8]
 8001e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a13      	ldr	r2, [pc, #76]	; (8001e78 <HAL_I2C_Master_Transmit_IT+0x148>)
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001e2e:	897a      	ldrh	r2, [r7, #10]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001e4a:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e000      	b.n	8001e62 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000000 	.word	0x20000000
 8001e74:	14f8b589 	.word	0x14f8b589
 8001e78:	ffff0000 	.word	0xffff0000

08001e7c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	461a      	mov	r2, r3
 8001e88:	460b      	mov	r3, r1
 8001e8a:	817b      	strh	r3, [r7, #10]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	f040 808d 	bne.w	8001fbc <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_I2C_Master_Receive_IT+0x150>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	08db      	lsrs	r3, r3, #3
 8001ea8:	4a49      	ldr	r2, [pc, #292]	; (8001fd0 <HAL_I2C_Master_Receive_IT+0x154>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0a1a      	lsrs	r2, r3, #8
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009a      	lsls	r2, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d116      	bne.n	8001ef6 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f043 0220 	orr.w	r2, r3, #32
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e063      	b.n	8001fbe <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d0db      	beq.n	8001ebc <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Master_Receive_IT+0x96>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e055      	b.n	8001fbe <HAL_I2C_Master_Receive_IT+0x142>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d007      	beq.n	8001f38 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2222      	movs	r2, #34	; 0x22
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2210      	movs	r2, #16
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_I2C_Master_Receive_IT+0x158>)
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001f7a:	897a      	ldrh	r2, [r7, #10]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001f96:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e000      	b.n	8001fbe <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8001fbc:	2302      	movs	r3, #2
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	14f8b589 	.word	0x14f8b589
 8001fd4:	ffff0000 	.word	0xffff0000

08001fd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff fa4a 	bl	8001480 <HAL_GetTick>
 8001fec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	f040 8111 	bne.w	8002222 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2319      	movs	r3, #25
 8002006:	2201      	movs	r2, #1
 8002008:	4988      	ldr	r1, [pc, #544]	; (800222c <HAL_I2C_IsDeviceReady+0x254>)
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f001 fc8a 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
 8002018:	e104      	b.n	8002224 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_I2C_IsDeviceReady+0x50>
 8002024:	2302      	movs	r3, #2
 8002026:	e0fd      	b.n	8002224 <HAL_I2C_IsDeviceReady+0x24c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d007      	beq.n	800204e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2224      	movs	r2, #36	; 0x24
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a70      	ldr	r2, [pc, #448]	; (8002230 <HAL_I2C_IsDeviceReady+0x258>)
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002080:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2200      	movs	r2, #0
 800208a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f001 fc48 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a8:	d103      	bne.n	80020b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e0b6      	b.n	8002224 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020b6:	897b      	ldrh	r3, [r7, #10]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80020c6:	f7ff f9db 	bl	8001480 <HAL_GetTick>
 80020ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	bf0c      	ite	eq
 80020da:	2301      	moveq	r3, #1
 80020dc:	2300      	movne	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f0:	bf0c      	ite	eq
 80020f2:	2301      	moveq	r3, #1
 80020f4:	2300      	movne	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020fa:	e025      	b.n	8002148 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020fc:	f7ff f9c0 	bl	8001480 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d302      	bcc.n	8002112 <HAL_I2C_IsDeviceReady+0x13a>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	22a0      	movs	r2, #160	; 0xa0
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b02      	cmp	r3, #2
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2ba0      	cmp	r3, #160	; 0xa0
 8002152:	d005      	beq.n	8002160 <HAL_I2C_IsDeviceReady+0x188>
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_I2C_IsDeviceReady+0x188>
 800215a:	7dbb      	ldrb	r3, [r7, #22]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0cd      	beq.n	80020fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b02      	cmp	r3, #2
 8002174:	d129      	bne.n	80021ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002184:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2319      	movs	r3, #25
 80021a2:	2201      	movs	r2, #1
 80021a4:	4921      	ldr	r1, [pc, #132]	; (800222c <HAL_I2C_IsDeviceReady+0x254>)
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f001 fbbc 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e036      	b.n	8002224 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e02c      	b.n	8002224 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2319      	movs	r3, #25
 80021ea:	2201      	movs	r2, #1
 80021ec:	490f      	ldr	r1, [pc, #60]	; (800222c <HAL_I2C_IsDeviceReady+0x254>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f001 fb98 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e012      	b.n	8002224 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	3301      	adds	r3, #1
 8002202:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	f4ff af32 	bcc.w	8002072 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	00100002 	.word	0x00100002
 8002230:	ffff0000 	.word	0xffff0000

08002234 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002254:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b10      	cmp	r3, #16
 8002262:	d003      	beq.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b40      	cmp	r3, #64	; 0x40
 8002268:	f040 80c1 	bne.w	80023ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10d      	bne.n	80022a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800228c:	d003      	beq.n	8002296 <HAL_I2C_EV_IRQHandler+0x62>
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002294:	d101      	bne.n	800229a <HAL_I2C_EV_IRQHandler+0x66>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_I2C_EV_IRQHandler+0x68>
 800229a:	2300      	movs	r3, #0
 800229c:	2b01      	cmp	r3, #1
 800229e:	f000 8132 	beq.w	8002506 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00c      	beq.n	80022c6 <HAL_I2C_EV_IRQHandler+0x92>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	0a5b      	lsrs	r3, r3, #9
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 fbbd 	bl	8003a38 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fcdc 	bl	8002c7c <I2C_Master_SB>
 80022c4:	e092      	b.n	80023ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	0a5b      	lsrs	r3, r3, #9
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fd52 	bl	8002d88 <I2C_Master_ADD10>
 80022e4:	e082      	b.n	80023ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0xd2>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	0a5b      	lsrs	r3, r3, #9
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fd6c 	bl	8002ddc <I2C_Master_ADDR>
 8002304:	e072      	b.n	80023ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d03b      	beq.n	800238a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002320:	f000 80f3 	beq.w	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	09db      	lsrs	r3, r3, #7
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00f      	beq.n	8002350 <HAL_I2C_EV_IRQHandler+0x11c>
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	0a9b      	lsrs	r3, r3, #10
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <HAL_I2C_EV_IRQHandler+0x11c>
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d103      	bne.n	8002350 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f94c 	bl	80025e6 <I2C_MasterTransmit_TXE>
 800234e:	e04d      	b.n	80023ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80d6 	beq.w	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	0a5b      	lsrs	r3, r3, #9
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80cf 	beq.w	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800236c:	7bbb      	ldrb	r3, [r7, #14]
 800236e:	2b21      	cmp	r3, #33	; 0x21
 8002370:	d103      	bne.n	800237a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9d3 	bl	800271e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002378:	e0c7      	b.n	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	f040 80c4 	bne.w	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa41 	bl	800280a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002388:	e0bf      	b.n	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002398:	f000 80b7 	beq.w	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00f      	beq.n	80023c8 <HAL_I2C_EV_IRQHandler+0x194>
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HAL_I2C_EV_IRQHandler+0x194>
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fab6 	bl	8002932 <I2C_MasterReceive_RXNE>
 80023c6:	e011      	b.n	80023ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 809a 	beq.w	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	0a5b      	lsrs	r3, r3, #9
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8093 	beq.w	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fb5f 	bl	8002aa8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ea:	e08e      	b.n	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
 80023ec:	e08d      	b.n	800250a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e007      	b.n	8002410 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d012      	beq.n	8002442 <HAL_I2C_EV_IRQHandler+0x20e>
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00c      	beq.n	8002442 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002438:	69b9      	ldr	r1, [r7, #24]
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 ff1d 	bl	800327a <I2C_Slave_ADDR>
 8002440:	e066      	b.n	8002510 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_I2C_EV_IRQHandler+0x22e>
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	0a5b      	lsrs	r3, r3, #9
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 ff58 	bl	8003310 <I2C_Slave_STOPF>
 8002460:	e056      	b.n	8002510 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002462:	7bbb      	ldrb	r3, [r7, #14]
 8002464:	2b21      	cmp	r3, #33	; 0x21
 8002466:	d002      	beq.n	800246e <HAL_I2C_EV_IRQHandler+0x23a>
 8002468:	7bbb      	ldrb	r3, [r7, #14]
 800246a:	2b29      	cmp	r3, #41	; 0x29
 800246c:	d125      	bne.n	80024ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	09db      	lsrs	r3, r3, #7
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00f      	beq.n	800249a <HAL_I2C_EV_IRQHandler+0x266>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	0a9b      	lsrs	r3, r3, #10
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_I2C_EV_IRQHandler+0x266>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d103      	bne.n	800249a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fe33 	bl	80030fe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002498:	e039      	b.n	800250e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d033      	beq.n	800250e <HAL_I2C_EV_IRQHandler+0x2da>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	0a5b      	lsrs	r3, r3, #9
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d02d      	beq.n	800250e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fe60 	bl	8003178 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024b8:	e029      	b.n	800250e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00f      	beq.n	80024e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	0a9b      	lsrs	r3, r3, #10
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fe6b 	bl	80031ba <I2C_SlaveReceive_RXNE>
 80024e4:	e014      	b.n	8002510 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00e      	beq.n	8002510 <HAL_I2C_EV_IRQHandler+0x2dc>
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	0a5b      	lsrs	r3, r3, #9
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fe99 	bl	8003236 <I2C_SlaveReceive_BTF>
 8002504:	e004      	b.n	8002510 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002506:	bf00      	nop
 8002508:	e002      	b.n	8002510 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800250e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	70fb      	strb	r3, [r7, #3]
 8002572:	4613      	mov	r3, r2
 8002574:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d150      	bne.n	80026ae <I2C_MasterTransmit_TXE+0xc8>
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b21      	cmp	r3, #33	; 0x21
 8002610:	d14d      	bne.n	80026ae <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d01d      	beq.n	8002654 <I2C_MasterTransmit_TXE+0x6e>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b20      	cmp	r3, #32
 800261c:	d01a      	beq.n	8002654 <I2C_MasterTransmit_TXE+0x6e>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002624:	d016      	beq.n	8002654 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002634:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2211      	movs	r2, #17
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff62 	bl	8002516 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002652:	e060      	b.n	8002716 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002662:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002672:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d107      	bne.n	800269e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff7d 	bl	8002596 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800269c:	e03b      	b.n	8002716 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ff35 	bl	8002516 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026ac:	e033      	b.n	8002716 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b21      	cmp	r3, #33	; 0x21
 80026b2:	d005      	beq.n	80026c0 <I2C_MasterTransmit_TXE+0xda>
 80026b4:	7bbb      	ldrb	r3, [r7, #14]
 80026b6:	2b40      	cmp	r3, #64	; 0x40
 80026b8:	d12d      	bne.n	8002716 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b22      	cmp	r3, #34	; 0x22
 80026be:	d12a      	bne.n	8002716 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d108      	bne.n	80026dc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80026da:	e01c      	b.n	8002716 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d103      	bne.n	80026f0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f88e 	bl	800280a <I2C_MemoryTransmit_TXE_BTF>
}
 80026ee:	e012      	b.n	8002716 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002714:	e7ff      	b.n	8002716 <I2C_MasterTransmit_TXE+0x130>
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b21      	cmp	r3, #33	; 0x21
 8002736:	d164      	bne.n	8002802 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002766:	e04c      	b.n	8002802 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b08      	cmp	r3, #8
 800276c:	d01d      	beq.n	80027aa <I2C_MasterTransmit_BTF+0x8c>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b20      	cmp	r3, #32
 8002772:	d01a      	beq.n	80027aa <I2C_MasterTransmit_BTF+0x8c>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800277a:	d016      	beq.n	80027aa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800278a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2211      	movs	r2, #17
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff feb7 	bl	8002516 <HAL_I2C_MasterTxCpltCallback>
}
 80027a8:	e02b      	b.n	8002802 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027b8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d107      	bne.n	80027f4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fed2 	bl	8002596 <HAL_I2C_MemTxCpltCallback>
}
 80027f2:	e006      	b.n	8002802 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fe8a 	bl	8002516 <HAL_I2C_MasterTxCpltCallback>
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11d      	bne.n	800285e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10b      	bne.n	8002842 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282e:	b2da      	uxtb	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	1c9a      	adds	r2, r3, #2
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002840:	e073      	b.n	800292a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002846:	b29b      	uxth	r3, r3
 8002848:	121b      	asrs	r3, r3, #8
 800284a:	b2da      	uxtb	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800285c:	e065      	b.n	800292a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002862:	2b01      	cmp	r3, #1
 8002864:	d10b      	bne.n	800287e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286a:	b2da      	uxtb	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800287c:	e055      	b.n	800292a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	2b02      	cmp	r3, #2
 8002884:	d151      	bne.n	800292a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b22      	cmp	r3, #34	; 0x22
 800288a:	d10d      	bne.n	80028a8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028a6:	e040      	b.n	800292a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d015      	beq.n	80028de <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	2b21      	cmp	r3, #33	; 0x21
 80028b6:	d112      	bne.n	80028de <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028dc:	e025      	b.n	800292a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d120      	bne.n	800292a <I2C_MemoryTransmit_TXE_BTF+0x120>
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b21      	cmp	r3, #33	; 0x21
 80028ec:	d11d      	bne.n	800292a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028fc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff fe36 	bl	8002596 <HAL_I2C_MemTxCpltCallback>
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b22      	cmp	r3, #34	; 0x22
 8002944:	f040 80ac 	bne.w	8002aa0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d921      	bls.n	800299a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b03      	cmp	r3, #3
 8002984:	f040 808c 	bne.w	8002aa0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002996:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002998:	e082      	b.n	8002aa0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d075      	beq.n	8002a8e <I2C_MasterReceive_RXNE+0x15c>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d002      	beq.n	80029ae <I2C_MasterReceive_RXNE+0x7c>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d16f      	bne.n	8002a8e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f001 f810 	bl	80039d4 <I2C_WaitOnSTOPRequestThroughIT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d142      	bne.n	8002a40 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d10a      	bne.n	8002a2a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fdc1 	bl	80025aa <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a28:	e03a      	b.n	8002aa0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2212      	movs	r2, #18
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff fd76 	bl	800252a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a3e:	e02f      	b.n	8002aa0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff fd99 	bl	80025be <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a8c:	e008      	b.n	8002aa0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9c:	605a      	str	r2, [r3, #4]
}
 8002a9e:	e7ff      	b.n	8002aa0 <I2C_MasterReceive_RXNE+0x16e>
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d11b      	bne.n	8002af8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ace:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002af6:	e0bd      	b.n	8002c74 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d129      	bne.n	8002b56 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b10:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d00a      	beq.n	8002b2e <I2C_MasterReceive_BTF+0x86>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d007      	beq.n	8002b2e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b2c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b54:	e08e      	b.n	8002c74 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d176      	bne.n	8002c4e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d002      	beq.n	8002b6c <I2C_MasterReceive_BTF+0xc4>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d108      	bne.n	8002b7e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e019      	b.n	8002bb2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d002      	beq.n	8002b8a <I2C_MasterReceive_BTF+0xe2>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d108      	bne.n	8002b9c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e00a      	b.n	8002bb2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d007      	beq.n	8002bb2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c0c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d10a      	bne.n	8002c38 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff fcba 	bl	80025aa <HAL_I2C_MemRxCpltCallback>
}
 8002c36:	e01d      	b.n	8002c74 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2212      	movs	r2, #18
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff fc6f 	bl	800252a <HAL_I2C_MasterRxCpltCallback>
}
 8002c4c:	e012      	b.n	8002c74 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d117      	bne.n	8002cc0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ca8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002caa:	e067      	b.n	8002d7c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	611a      	str	r2, [r3, #16]
}
 8002cbe:	e05d      	b.n	8002d7c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc8:	d133      	bne.n	8002d32 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b21      	cmp	r3, #33	; 0x21
 8002cd4:	d109      	bne.n	8002cea <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ce6:	611a      	str	r2, [r3, #16]
 8002ce8:	e008      	b.n	8002cfc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <I2C_Master_SB+0x92>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d108      	bne.n	8002d20 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d032      	beq.n	8002d7c <I2C_Master_SB+0x100>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d02d      	beq.n	8002d7c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d2e:	605a      	str	r2, [r3, #4]
}
 8002d30:	e024      	b.n	8002d7c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10e      	bne.n	8002d58 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	11db      	asrs	r3, r3, #7
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f003 0306 	and.w	r3, r3, #6
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f063 030f 	orn	r3, r3, #15
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]
}
 8002d56:	e011      	b.n	8002d7c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10d      	bne.n	8002d7c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	11db      	asrs	r3, r3, #7
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f003 0306 	and.w	r3, r3, #6
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f063 030e 	orn	r3, r3, #14
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	611a      	str	r2, [r3, #16]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <I2C_Master_ADD10+0x26>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00c      	beq.n	8002dd0 <I2C_Master_ADD10+0x48>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dce:	605a      	str	r2, [r3, #4]
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b091      	sub	sp, #68	; 0x44
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b22      	cmp	r3, #34	; 0x22
 8002e04:	f040 8169 	bne.w	80030da <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <I2C_Master_ADDR+0x54>
 8002e10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d10b      	bne.n	8002e30 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	e160      	b.n	80030f2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d11d      	bne.n	8002e74 <I2C_Master_ADDR+0x98>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e40:	d118      	bne.n	8002e74 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e42:	2300      	movs	r3, #0
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e66:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	651a      	str	r2, [r3, #80]	; 0x50
 8002e72:	e13e      	b.n	80030f2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d113      	bne.n	8002ea6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e115      	b.n	80030d2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	f040 808a 	bne.w	8002fc6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb8:	d137      	bne.n	8002f2a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed8:	d113      	bne.n	8002f02 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	e0e7      	b.n	80030d2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e0d3      	b.n	80030d2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d02e      	beq.n	8002f8e <I2C_Master_ADDR+0x1b2>
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d02b      	beq.n	8002f8e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	2b12      	cmp	r3, #18
 8002f3a:	d102      	bne.n	8002f42 <I2C_Master_ADDR+0x166>
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d125      	bne.n	8002f8e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d00e      	beq.n	8002f66 <I2C_Master_ADDR+0x18a>
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d00b      	beq.n	8002f66 <I2C_Master_ADDR+0x18a>
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d008      	beq.n	8002f66 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e007      	b.n	8002f76 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f74:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	e0a1      	b.n	80030d2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e085      	b.n	80030d2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d14d      	bne.n	800306c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d016      	beq.n	8003004 <I2C_Master_ADDR+0x228>
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d013      	beq.n	8003004 <I2C_Master_ADDR+0x228>
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	d010      	beq.n	8003004 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e007      	b.n	8003014 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003012:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003022:	d117      	bne.n	8003054 <I2C_Master_ADDR+0x278>
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800302a:	d00b      	beq.n	8003044 <I2C_Master_ADDR+0x268>
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	2b01      	cmp	r3, #1
 8003030:	d008      	beq.n	8003044 <I2C_Master_ADDR+0x268>
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	2b08      	cmp	r3, #8
 8003036:	d005      	beq.n	8003044 <I2C_Master_ADDR+0x268>
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	2b10      	cmp	r3, #16
 800303c:	d002      	beq.n	8003044 <I2C_Master_ADDR+0x268>
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	2b20      	cmp	r3, #32
 8003042:	d107      	bne.n	8003054 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003052:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	e032      	b.n	80030d2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800307a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308a:	d117      	bne.n	80030bc <I2C_Master_ADDR+0x2e0>
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003092:	d00b      	beq.n	80030ac <I2C_Master_ADDR+0x2d0>
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	2b01      	cmp	r3, #1
 8003098:	d008      	beq.n	80030ac <I2C_Master_ADDR+0x2d0>
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	2b08      	cmp	r3, #8
 800309e:	d005      	beq.n	80030ac <I2C_Master_ADDR+0x2d0>
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d002      	beq.n	80030ac <I2C_Master_ADDR+0x2d0>
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d107      	bne.n	80030bc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80030d8:	e00b      	b.n	80030f2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
}
 80030f0:	e7ff      	b.n	80030f2 <I2C_Master_ADDR+0x316>
 80030f2:	bf00      	nop
 80030f4:	3744      	adds	r7, #68	; 0x44
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d02b      	beq.n	8003170 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d114      	bne.n	8003170 <I2C_SlaveTransmit_TXE+0x72>
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b29      	cmp	r3, #41	; 0x29
 800314a:	d111      	bne.n	8003170 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2221      	movs	r2, #33	; 0x21
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2228      	movs	r2, #40	; 0x28
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff f9e7 	bl	800253e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d011      	beq.n	80031ae <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	781a      	ldrb	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d02c      	beq.n	800322e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d114      	bne.n	800322e <I2C_SlaveReceive_RXNE+0x74>
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b2a      	cmp	r3, #42	; 0x2a
 8003208:	d111      	bne.n	800322e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003218:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2222      	movs	r2, #34	; 0x22
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2228      	movs	r2, #40	; 0x28
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff f992 	bl	8002552 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003294:	2b28      	cmp	r3, #40	; 0x28
 8003296:	d127      	bne.n	80032e8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	09db      	lsrs	r3, r3, #7
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	81bb      	strh	r3, [r7, #12]
 80032ca:	e002      	b.n	80032d2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80032da:	89ba      	ldrh	r2, [r7, #12]
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	4619      	mov	r1, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff f940 	bl	8002566 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80032e6:	e00e      	b.n	8003306 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800332e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336c:	d172      	bne.n	8003454 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b22      	cmp	r3, #34	; 0x22
 8003372:	d002      	beq.n	800337a <I2C_Slave_STOPF+0x6a>
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b2a      	cmp	r3, #42	; 0x2a
 8003378:	d135      	bne.n	80033e6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b29a      	uxth	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0204 	orr.w	r2, r3, #4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe f9a3 	bl	80016fe <HAL_DMA_GetState>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d049      	beq.n	8003452 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	4a69      	ldr	r2, [pc, #420]	; (8003568 <I2C_Slave_STOPF+0x258>)
 80033c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f975 	bl	80016ba <HAL_DMA_Abort_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d03d      	beq.n	8003452 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033e0:	4610      	mov	r0, r2
 80033e2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033e4:	e035      	b.n	8003452 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0204 	orr.w	r2, r3, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003418:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe f96d 	bl	80016fe <HAL_DMA_GetState>
 8003424:	4603      	mov	r3, r0
 8003426:	2b01      	cmp	r3, #1
 8003428:	d014      	beq.n	8003454 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	4a4e      	ldr	r2, [pc, #312]	; (8003568 <I2C_Slave_STOPF+0x258>)
 8003430:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe f93f 	bl	80016ba <HAL_DMA_Abort_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800344c:	4610      	mov	r0, r2
 800344e:	4798      	blx	r3
 8003450:	e000      	b.n	8003454 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003452:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d03e      	beq.n	80034dc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d112      	bne.n	8003492 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d112      	bne.n	80034c6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f843 	bl	8003570 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80034ea:	e039      	b.n	8003560 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b2a      	cmp	r3, #42	; 0x2a
 80034f0:	d109      	bne.n	8003506 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2228      	movs	r2, #40	; 0x28
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff f826 	bl	8002552 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b28      	cmp	r3, #40	; 0x28
 8003510:	d111      	bne.n	8003536 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a15      	ldr	r2, [pc, #84]	; (800356c <I2C_Slave_STOPF+0x25c>)
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff f827 	bl	8002582 <HAL_I2C_ListenCpltCallback>
}
 8003534:	e014      	b.n	8003560 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	2b22      	cmp	r3, #34	; 0x22
 800353c:	d002      	beq.n	8003544 <I2C_Slave_STOPF+0x234>
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b22      	cmp	r3, #34	; 0x22
 8003542:	d10d      	bne.n	8003560 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fff9 	bl	8002552 <HAL_I2C_SlaveRxCpltCallback>
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	080037d5 	.word	0x080037d5
 800356c:	ffff0000 	.word	0xffff0000

08003570 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003586:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	2b10      	cmp	r3, #16
 800358c:	d002      	beq.n	8003594 <I2C_ITError+0x24>
 800358e:	7bbb      	ldrb	r3, [r7, #14]
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d10a      	bne.n	80035aa <I2C_ITError+0x3a>
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b22      	cmp	r3, #34	; 0x22
 8003598:	d107      	bne.n	80035aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035b0:	2b28      	cmp	r3, #40	; 0x28
 80035b2:	d107      	bne.n	80035c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2228      	movs	r2, #40	; 0x28
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035c2:	e015      	b.n	80035f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d2:	d00a      	beq.n	80035ea <I2C_ITError+0x7a>
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b60      	cmp	r3, #96	; 0x60
 80035d8:	d007      	beq.n	80035ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fe:	d162      	bne.n	80036c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d020      	beq.n	8003660 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	4a6a      	ldr	r2, [pc, #424]	; (80037cc <I2C_ITError+0x25c>)
 8003624:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe f845 	bl	80016ba <HAL_DMA_Abort_IT>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8089 	beq.w	800374a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800365a:	4610      	mov	r0, r2
 800365c:	4798      	blx	r3
 800365e:	e074      	b.n	800374a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	4a59      	ldr	r2, [pc, #356]	; (80037cc <I2C_ITError+0x25c>)
 8003666:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe f824 	bl	80016ba <HAL_DMA_Abort_IT>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d068      	beq.n	800374a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	d10b      	bne.n	800369e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036c0:	4610      	mov	r0, r2
 80036c2:	4798      	blx	r3
 80036c4:	e041      	b.n	800374a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b60      	cmp	r3, #96	; 0x60
 80036d0:	d125      	bne.n	800371e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d10b      	bne.n	8003706 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe ff5b 	bl	80025d2 <HAL_I2C_AbortCpltCallback>
 800371c:	e015      	b.n	800374a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d10b      	bne.n	8003744 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fe ff3a 	bl	80025be <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10e      	bne.n	8003778 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800376a:	2b00      	cmp	r3, #0
 800376c:	d104      	bne.n	8003778 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003786:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d113      	bne.n	80037c4 <I2C_ITError+0x254>
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b28      	cmp	r3, #40	; 0x28
 80037a0:	d110      	bne.n	80037c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <I2C_ITError+0x260>)
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe fedf 	bl	8002582 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	080037d5 	.word	0x080037d5
 80037d0:	ffff0000 	.word	0xffff0000

080037d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037ee:	4b4b      	ldr	r3, [pc, #300]	; (800391c <I2C_DMAAbort+0x148>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	08db      	lsrs	r3, r3, #3
 80037f4:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <I2C_DMAAbort+0x14c>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0a1a      	lsrs	r2, r3, #8
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00da      	lsls	r2, r3, #3
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f043 0220 	orr.w	r2, r3, #32
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800381a:	e00a      	b.n	8003832 <I2C_DMAAbort+0x5e>
    }
    count--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3b01      	subs	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d0ea      	beq.n	8003808 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	2200      	movs	r2, #0
 8003840:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	2200      	movs	r2, #0
 8003850:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003860:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	2200      	movs	r2, #0
 8003876:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b60      	cmp	r3, #96	; 0x60
 80038a2:	d10e      	bne.n	80038c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7fe fe89 	bl	80025d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038c0:	e027      	b.n	8003912 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038c8:	2b28      	cmp	r3, #40	; 0x28
 80038ca:	d117      	bne.n	80038fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2228      	movs	r2, #40	; 0x28
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038fa:	e007      	b.n	800390c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800390c:	6978      	ldr	r0, [r7, #20]
 800390e:	f7fe fe56 	bl	80025be <HAL_I2C_ErrorCallback>
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000000 	.word	0x20000000
 8003920:	14f8b589 	.word	0x14f8b589

08003924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003934:	e025      	b.n	8003982 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d021      	beq.n	8003982 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fd fd9f 	bl	8001480 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d116      	bne.n	8003982 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e023      	b.n	80039ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d10d      	bne.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	43da      	mvns	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4013      	ands	r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf0c      	ite	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	2300      	movne	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	e00c      	b.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4013      	ands	r3, r2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf0c      	ite	eq
 80039ba:	2301      	moveq	r3, #1
 80039bc:	2300      	movne	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d0b6      	beq.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	08db      	lsrs	r3, r3, #3
 80039e6:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	0a1a      	lsrs	r2, r3, #8
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e008      	b.n	8003a24 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a20:	d0e9      	beq.n	80039f6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	20000000 	.word	0x20000000
 8003a34:	14f8b589 	.word	0x14f8b589

08003a38 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a48:	d103      	bne.n	8003a52 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a50:	e007      	b.n	8003a62 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a5a:	d102      	bne.n	8003a62 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2208      	movs	r2, #8
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <HAL_MspInit+0x4c>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <HAL_MspInit+0x4c>)
 8003a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a84:	6453      	str	r3, [r2, #68]	; 0x44
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <HAL_MspInit+0x4c>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8e:	607b      	str	r3, [r7, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_MspInit+0x4c>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	4a08      	ldr	r2, [pc, #32]	; (8003abc <HAL_MspInit+0x4c>)
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_MspInit+0x4c>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 0314 	add.w	r3, r7, #20
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <HAL_I2C_MspInit+0x94>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d133      	bne.n	8003b4a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <HAL_I2C_MspInit+0x98>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <HAL_I2C_MspInit+0x98>)
 8003aec:	f043 0320 	orr.w	r3, r3, #32
 8003af0:	6313      	str	r3, [r2, #48]	; 0x30
 8003af2:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_I2C_MspInit+0x98>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003afe:	2303      	movs	r3, #3
 8003b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b02:	2312      	movs	r3, #18
 8003b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b12:	f107 0314 	add.w	r3, r7, #20
 8003b16:	4619      	mov	r1, r3
 8003b18:	4810      	ldr	r0, [pc, #64]	; (8003b5c <HAL_I2C_MspInit+0x9c>)
 8003b1a:	f7fd fdff 	bl	800171c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <HAL_I2C_MspInit+0x98>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a0c      	ldr	r2, [pc, #48]	; (8003b58 <HAL_I2C_MspInit+0x98>)
 8003b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_I2C_MspInit+0x98>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	2021      	movs	r0, #33	; 0x21
 8003b40:	f7fd fd85 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003b44:	2021      	movs	r0, #33	; 0x21
 8003b46:	f7fd fd9e 	bl	8001686 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003b4a:	bf00      	nop
 8003b4c:	3728      	adds	r7, #40	; 0x28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40005800 	.word	0x40005800
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40021400 	.word	0x40021400

08003b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_UART_MspInit+0x84>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d12c      	bne.n	8003bdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_UART_MspInit+0x88>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a17      	ldr	r2, [pc, #92]	; (8003be8 <HAL_UART_MspInit+0x88>)
 8003b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <HAL_UART_MspInit+0x88>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_UART_MspInit+0x88>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <HAL_UART_MspInit+0x88>)
 8003ba8:	f043 0308 	orr.w	r3, r3, #8
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_UART_MspInit+0x88>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bcc:	2307      	movs	r3, #7
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4805      	ldr	r0, [pc, #20]	; (8003bec <HAL_UART_MspInit+0x8c>)
 8003bd8:	f7fd fda0 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003bdc:	bf00      	nop
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40004800 	.word	0x40004800
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40020c00 	.word	0x40020c00

08003bf0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c08:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_PWREx_EnableOverDrive+0x94>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c1c:	f7fd fc30 	bl	8001480 <HAL_GetTick>
 8003c20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c22:	e009      	b.n	8003c38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c24:	f7fd fc2c 	bl	8001480 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c32:	d901      	bls.n	8003c38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e01f      	b.n	8003c78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d1ee      	bne.n	8003c24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c4c:	f7fd fc18 	bl	8001480 <HAL_GetTick>
 8003c50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c52:	e009      	b.n	8003c68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c54:	f7fd fc14 	bl	8001480 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c62:	d901      	bls.n	8003c68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e007      	b.n	8003c78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c74:	d1ee      	bne.n	8003c54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	420e0040 	.word	0x420e0040
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	420e0044 	.word	0x420e0044

08003c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e267      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d075      	beq.n	8003d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cae:	4b88      	ldr	r3, [pc, #544]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b85      	ldr	r3, [pc, #532]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d112      	bne.n	8003cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc6:	4b82      	ldr	r3, [pc, #520]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd4:	4b7e      	ldr	r3, [pc, #504]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d05b      	beq.n	8003d98 <HAL_RCC_OscConfig+0x108>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d157      	bne.n	8003d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e242      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf4:	d106      	bne.n	8003d04 <HAL_RCC_OscConfig+0x74>
 8003cf6:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a75      	ldr	r2, [pc, #468]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e01d      	b.n	8003d40 <HAL_RCC_OscConfig+0xb0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x98>
 8003d0e:	4b70      	ldr	r3, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6f      	ldr	r2, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6c      	ldr	r2, [pc, #432]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0xb0>
 8003d28:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a68      	ldr	r2, [pc, #416]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a65      	ldr	r2, [pc, #404]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d013      	beq.n	8003d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fd fb9a 	bl	8001480 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fd fb96 	bl	8001480 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e207      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0xc0>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd fb86 	bl	8001480 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fd fb82 	bl	8001480 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1f3      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	4b51      	ldr	r3, [pc, #324]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0xe8>
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d063      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d11c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dbe:	4b44      	ldr	r3, [pc, #272]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d116      	bne.n	8003df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_RCC_OscConfig+0x152>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e1c7      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4937      	ldr	r1, [pc, #220]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	e03a      	b.n	8003e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e00:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <HAL_RCC_OscConfig+0x244>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fd fb3b 	bl	8001480 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0e:	f7fd fb37 	bl	8001480 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1a8      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_RCC_OscConfig+0x244>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd fb1a 	bl	8001480 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fd fb16 	bl	8001480 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e187      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d036      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_RCC_OscConfig+0x248>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fd fafa 	bl	8001480 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e90:	f7fd faf6 	bl	8001480 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e167      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x200>
 8003eae:	e01b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_OscConfig+0x248>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fae3 	bl	8001480 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebc:	e00e      	b.n	8003edc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ebe:	f7fd fadf 	bl	8001480 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d907      	bls.n	8003edc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e150      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	42470000 	.word	0x42470000
 8003ed8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b88      	ldr	r3, [pc, #544]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ea      	bne.n	8003ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8097 	beq.w	8004024 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b81      	ldr	r3, [pc, #516]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	4b7d      	ldr	r3, [pc, #500]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a7c      	ldr	r2, [pc, #496]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b7a      	ldr	r3, [pc, #488]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	4b77      	ldr	r3, [pc, #476]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d118      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f32:	4b74      	ldr	r3, [pc, #464]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a73      	ldr	r2, [pc, #460]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd fa9f 	bl	8001480 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f46:	f7fd fa9b 	bl	8001480 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e10c      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCC_OscConfig+0x2ea>
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a63      	ldr	r2, [pc, #396]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
 8003f78:	e01c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x324>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x30c>
 8003f82:	4b5f      	ldr	r3, [pc, #380]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a5e      	ldr	r2, [pc, #376]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	4b5c      	ldr	r3, [pc, #368]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a5b      	ldr	r2, [pc, #364]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x324>
 8003f9c:	4b58      	ldr	r3, [pc, #352]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a57      	ldr	r2, [pc, #348]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	4b55      	ldr	r3, [pc, #340]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4a54      	ldr	r2, [pc, #336]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003fae:	f023 0304 	bic.w	r3, r3, #4
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fd fa60 	bl	8001480 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fd fa5c 	bl	8001480 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e0cb      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	4b49      	ldr	r3, [pc, #292]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ee      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x334>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe8:	f7fd fa4a 	bl	8001480 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fa46 	bl	8001480 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0b5      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1ee      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d105      	bne.n	8004024 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004018:	4b39      	ldr	r3, [pc, #228]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	4a38      	ldr	r2, [pc, #224]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 800401e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004022:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a1 	beq.w	8004170 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800402e:	4b34      	ldr	r3, [pc, #208]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b08      	cmp	r3, #8
 8004038:	d05c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d141      	bne.n	80040c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <HAL_RCC_OscConfig+0x478>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fd fa1a 	bl	8001480 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004050:	f7fd fa16 	bl	8001480 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e087      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	4b27      	ldr	r3, [pc, #156]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	019b      	lsls	r3, r3, #6
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	491b      	ldr	r1, [pc, #108]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x478>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409e:	f7fd f9ef 	bl	8001480 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a6:	f7fd f9eb 	bl	8001480 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e05c      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x416>
 80040c4:	e054      	b.n	8004170 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_RCC_OscConfig+0x478>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fd f9d8 	bl	8001480 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fd f9d4 	bl	8001480 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e045      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x444>
 80040f2:	e03d      	b.n	8004170 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e038      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
 8004100:	40023800 	.word	0x40023800
 8004104:	40007000 	.word	0x40007000
 8004108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <HAL_RCC_OscConfig+0x4ec>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d028      	beq.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d121      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d11a      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004144:	4293      	cmp	r3, r2
 8004146:	d111      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	3b01      	subs	r3, #1
 8004156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d107      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800

08004180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0cc      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004194:	4b68      	ldr	r3, [pc, #416]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d90c      	bls.n	80041bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b65      	ldr	r3, [pc, #404]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b63      	ldr	r3, [pc, #396]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0b8      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041d4:	4b59      	ldr	r3, [pc, #356]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a58      	ldr	r2, [pc, #352]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ec:	4b53      	ldr	r3, [pc, #332]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a52      	ldr	r2, [pc, #328]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b50      	ldr	r3, [pc, #320]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	494d      	ldr	r1, [pc, #308]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d044      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b47      	ldr	r3, [pc, #284]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d119      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e07f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d003      	beq.n	800423e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423a:	2b03      	cmp	r3, #3
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423e:	4b3f      	ldr	r3, [pc, #252]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e06f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424e:	4b3b      	ldr	r3, [pc, #236]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e067      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f023 0203 	bic.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4934      	ldr	r1, [pc, #208]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004270:	f7fd f906 	bl	8001480 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	e00a      	b.n	800428e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fd f902 	bl	8001480 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e04f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	4b2b      	ldr	r3, [pc, #172]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 020c 	and.w	r2, r3, #12
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	429a      	cmp	r2, r3
 800429e:	d1eb      	bne.n	8004278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d20c      	bcs.n	80042c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e032      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d4:	4b19      	ldr	r3, [pc, #100]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4916      	ldr	r1, [pc, #88]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	490e      	ldr	r1, [pc, #56]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004306:	f000 f821 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800430a:	4602      	mov	r2, r0
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	490a      	ldr	r1, [pc, #40]	; (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	5ccb      	ldrb	r3, [r1, r3]
 800431a:	fa22 f303 	lsr.w	r3, r2, r3
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd f866 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023c00 	.word	0x40023c00
 800433c:	40023800 	.word	0x40023800
 8004340:	080056e4 	.word	0x080056e4
 8004344:	20000000 	.word	0x20000000
 8004348:	20000010 	.word	0x20000010

0800434c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004350:	b094      	sub	sp, #80	; 0x50
 8004352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	647b      	str	r3, [r7, #68]	; 0x44
 8004358:	2300      	movs	r3, #0
 800435a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800435c:	2300      	movs	r3, #0
 800435e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004364:	4b79      	ldr	r3, [pc, #484]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b08      	cmp	r3, #8
 800436e:	d00d      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x40>
 8004370:	2b08      	cmp	r3, #8
 8004372:	f200 80e1 	bhi.w	8004538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x34>
 800437a:	2b04      	cmp	r3, #4
 800437c:	d003      	beq.n	8004386 <HAL_RCC_GetSysClockFreq+0x3a>
 800437e:	e0db      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004380:	4b73      	ldr	r3, [pc, #460]	; (8004550 <HAL_RCC_GetSysClockFreq+0x204>)
 8004382:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004384:	e0db      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004386:	4b73      	ldr	r3, [pc, #460]	; (8004554 <HAL_RCC_GetSysClockFreq+0x208>)
 8004388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800438a:	e0d8      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800438c:	4b6f      	ldr	r3, [pc, #444]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004394:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004396:	4b6d      	ldr	r3, [pc, #436]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d063      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	2200      	movs	r2, #0
 80043aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
 80043b6:	2300      	movs	r3, #0
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043be:	4622      	mov	r2, r4
 80043c0:	462b      	mov	r3, r5
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	0159      	lsls	r1, r3, #5
 80043cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d0:	0150      	lsls	r0, r2, #5
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4621      	mov	r1, r4
 80043d8:	1a51      	subs	r1, r2, r1
 80043da:	6139      	str	r1, [r7, #16]
 80043dc:	4629      	mov	r1, r5
 80043de:	eb63 0301 	sbc.w	r3, r3, r1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f0:	4659      	mov	r1, fp
 80043f2:	018b      	lsls	r3, r1, #6
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043fa:	4651      	mov	r1, sl
 80043fc:	018a      	lsls	r2, r1, #6
 80043fe:	4651      	mov	r1, sl
 8004400:	ebb2 0801 	subs.w	r8, r2, r1
 8004404:	4659      	mov	r1, fp
 8004406:	eb63 0901 	sbc.w	r9, r3, r1
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800441a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800441e:	4690      	mov	r8, r2
 8004420:	4699      	mov	r9, r3
 8004422:	4623      	mov	r3, r4
 8004424:	eb18 0303 	adds.w	r3, r8, r3
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	462b      	mov	r3, r5
 800442c:	eb49 0303 	adc.w	r3, r9, r3
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800443e:	4629      	mov	r1, r5
 8004440:	024b      	lsls	r3, r1, #9
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004448:	4621      	mov	r1, r4
 800444a:	024a      	lsls	r2, r1, #9
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
 8004456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800445c:	f7fc fa06 	bl	800086c <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004468:	e058      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446a:	4b38      	ldr	r3, [pc, #224]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	2200      	movs	r2, #0
 8004472:	4618      	mov	r0, r3
 8004474:	4611      	mov	r1, r2
 8004476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
 8004480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004484:	4642      	mov	r2, r8
 8004486:	464b      	mov	r3, r9
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	0159      	lsls	r1, r3, #5
 8004492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004496:	0150      	lsls	r0, r2, #5
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4641      	mov	r1, r8
 800449e:	ebb2 0a01 	subs.w	sl, r2, r1
 80044a2:	4649      	mov	r1, r9
 80044a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044bc:	ebb2 040a 	subs.w	r4, r2, sl
 80044c0:	eb63 050b 	sbc.w	r5, r3, fp
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	00eb      	lsls	r3, r5, #3
 80044ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d2:	00e2      	lsls	r2, r4, #3
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	4643      	mov	r3, r8
 80044da:	18e3      	adds	r3, r4, r3
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	464b      	mov	r3, r9
 80044e0:	eb45 0303 	adc.w	r3, r5, r3
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044f2:	4629      	mov	r1, r5
 80044f4:	028b      	lsls	r3, r1, #10
 80044f6:	4621      	mov	r1, r4
 80044f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044fc:	4621      	mov	r1, r4
 80044fe:	028a      	lsls	r2, r1, #10
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004506:	2200      	movs	r2, #0
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	61fa      	str	r2, [r7, #28]
 800450c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004510:	f7fc f9ac 	bl	800086c <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4613      	mov	r3, r2
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	3301      	adds	r3, #1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800452c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800452e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004536:	e002      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCC_GetSysClockFreq+0x204>)
 800453a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800453c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800453e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004540:	4618      	mov	r0, r3
 8004542:	3750      	adds	r7, #80	; 0x50
 8004544:	46bd      	mov	sp, r7
 8004546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	00f42400 	.word	0x00f42400
 8004554:	007a1200 	.word	0x007a1200

08004558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b03      	ldr	r3, [pc, #12]	; (800456c <HAL_RCC_GetHCLKFreq+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000000 	.word	0x20000000

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004574:	f7ff fff0 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0a9b      	lsrs	r3, r3, #10
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4903      	ldr	r1, [pc, #12]	; (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	080056f4 	.word	0x080056f4

08004598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800459c:	f7ff ffdc 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	0b5b      	lsrs	r3, r3, #13
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4903      	ldr	r1, [pc, #12]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40023800 	.word	0x40023800
 80045bc:	080056f4 	.word	0x080056f4

080045c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e03f      	b.n	8004652 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff faba 	bl	8003b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f929 	bl	800485c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b08a      	sub	sp, #40	; 0x28
 800465e:	af02      	add	r7, sp, #8
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b20      	cmp	r3, #32
 8004678:	d17c      	bne.n	8004774 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_UART_Transmit+0x2c>
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e075      	b.n	8004776 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_UART_Transmit+0x3e>
 8004694:	2302      	movs	r3, #2
 8004696:	e06e      	b.n	8004776 <HAL_UART_Transmit+0x11c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2221      	movs	r2, #33	; 0x21
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ae:	f7fc fee7 	bl	8001480 <HAL_GetTick>
 80046b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	88fa      	ldrh	r2, [r7, #6]
 80046be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c8:	d108      	bne.n	80046dc <HAL_UART_Transmit+0x82>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e003      	b.n	80046e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046ec:	e02a      	b.n	8004744 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2180      	movs	r1, #128	; 0x80
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f840 	bl	800477e <UART_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e036      	b.n	8004776 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	3302      	adds	r3, #2
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	e007      	b.n	8004736 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3301      	adds	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1cf      	bne.n	80046ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	2140      	movs	r1, #64	; 0x40
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f810 	bl	800477e <UART_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e006      	b.n	8004776 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b090      	sub	sp, #64	; 0x40
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	4613      	mov	r3, r2
 800478c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478e:	e050      	b.n	8004832 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d04c      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x30>
 800479e:	f7fc fe6f 	bl	8001480 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d241      	bcs.n	8004832 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ce:	637a      	str	r2, [r7, #52]	; 0x34
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e5      	bne.n	80047ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	613b      	str	r3, [r7, #16]
   return(result);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3314      	adds	r3, #20
 8004800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004802:	623a      	str	r2, [r7, #32]
 8004804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	69f9      	ldr	r1, [r7, #28]
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e5      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e00f      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	bf0c      	ite	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	2300      	movne	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	429a      	cmp	r2, r3
 800484e:	d09f      	beq.n	8004790 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3740      	adds	r7, #64	; 0x40
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004860:	b0c0      	sub	sp, #256	; 0x100
 8004862:	af00      	add	r7, sp, #0
 8004864:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	68d9      	ldr	r1, [r3, #12]
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	ea40 0301 	orr.w	r3, r0, r1
 8004884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	431a      	orrs	r2, r3
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	431a      	orrs	r2, r3
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048b4:	f021 010c 	bic.w	r1, r1, #12
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048c2:	430b      	orrs	r3, r1
 80048c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d6:	6999      	ldr	r1, [r3, #24]
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	ea40 0301 	orr.w	r3, r0, r1
 80048e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b8f      	ldr	r3, [pc, #572]	; (8004b28 <UART_SetConfig+0x2cc>)
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d005      	beq.n	80048fc <UART_SetConfig+0xa0>
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b8d      	ldr	r3, [pc, #564]	; (8004b2c <UART_SetConfig+0x2d0>)
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d104      	bne.n	8004906 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7ff fe4c 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8004900:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004904:	e003      	b.n	800490e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004906:	f7ff fe33 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 800490a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004918:	f040 810c 	bne.w	8004b34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800491c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004920:	2200      	movs	r2, #0
 8004922:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004926:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800492a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800492e:	4622      	mov	r2, r4
 8004930:	462b      	mov	r3, r5
 8004932:	1891      	adds	r1, r2, r2
 8004934:	65b9      	str	r1, [r7, #88]	; 0x58
 8004936:	415b      	adcs	r3, r3
 8004938:	65fb      	str	r3, [r7, #92]	; 0x5c
 800493a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800493e:	4621      	mov	r1, r4
 8004940:	eb12 0801 	adds.w	r8, r2, r1
 8004944:	4629      	mov	r1, r5
 8004946:	eb43 0901 	adc.w	r9, r3, r1
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800495a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495e:	4690      	mov	r8, r2
 8004960:	4699      	mov	r9, r3
 8004962:	4623      	mov	r3, r4
 8004964:	eb18 0303 	adds.w	r3, r8, r3
 8004968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800496c:	462b      	mov	r3, r5
 800496e:	eb49 0303 	adc.w	r3, r9, r3
 8004972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004982:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004986:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800498a:	460b      	mov	r3, r1
 800498c:	18db      	adds	r3, r3, r3
 800498e:	653b      	str	r3, [r7, #80]	; 0x50
 8004990:	4613      	mov	r3, r2
 8004992:	eb42 0303 	adc.w	r3, r2, r3
 8004996:	657b      	str	r3, [r7, #84]	; 0x54
 8004998:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800499c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049a0:	f7fb ff64 	bl	800086c <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4b61      	ldr	r3, [pc, #388]	; (8004b30 <UART_SetConfig+0x2d4>)
 80049aa:	fba3 2302 	umull	r2, r3, r3, r2
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	011c      	lsls	r4, r3, #4
 80049b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	1891      	adds	r1, r2, r2
 80049ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80049cc:	415b      	adcs	r3, r3
 80049ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049d4:	4641      	mov	r1, r8
 80049d6:	eb12 0a01 	adds.w	sl, r2, r1
 80049da:	4649      	mov	r1, r9
 80049dc:	eb43 0b01 	adc.w	fp, r3, r1
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049f4:	4692      	mov	sl, r2
 80049f6:	469b      	mov	fp, r3
 80049f8:	4643      	mov	r3, r8
 80049fa:	eb1a 0303 	adds.w	r3, sl, r3
 80049fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a02:	464b      	mov	r3, r9
 8004a04:	eb4b 0303 	adc.w	r3, fp, r3
 8004a08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a20:	460b      	mov	r3, r1
 8004a22:	18db      	adds	r3, r3, r3
 8004a24:	643b      	str	r3, [r7, #64]	; 0x40
 8004a26:	4613      	mov	r3, r2
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a36:	f7fb ff19 	bl	800086c <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <UART_SetConfig+0x2d4>)
 8004a42:	fba3 2301 	umull	r2, r3, r3, r1
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2264      	movs	r2, #100	; 0x64
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	1acb      	subs	r3, r1, r3
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <UART_SetConfig+0x2d4>)
 8004a58:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a64:	441c      	add	r4, r3
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a80:	415b      	adcs	r3, r3
 8004a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a88:	4641      	mov	r1, r8
 8004a8a:	1851      	adds	r1, r2, r1
 8004a8c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a8e:	4649      	mov	r1, r9
 8004a90:	414b      	adcs	r3, r1
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	00cb      	lsls	r3, r1, #3
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aaa:	4651      	mov	r1, sl
 8004aac:	00ca      	lsls	r2, r1, #3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004abc:	464b      	mov	r3, r9
 8004abe:	460a      	mov	r2, r1
 8004ac0:	eb42 0303 	adc.w	r3, r2, r3
 8004ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ad4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ad8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004adc:	460b      	mov	r3, r1
 8004ade:	18db      	adds	r3, r3, r3
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	eb42 0303 	adc.w	r3, r2, r3
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004af2:	f7fb febb 	bl	800086c <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <UART_SetConfig+0x2d4>)
 8004afc:	fba3 1302 	umull	r1, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	2164      	movs	r1, #100	; 0x64
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	3332      	adds	r3, #50	; 0x32
 8004b0e:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <UART_SetConfig+0x2d4>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	f003 0207 	and.w	r2, r3, #7
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4422      	add	r2, r4
 8004b22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b24:	e105      	b.n	8004d32 <UART_SetConfig+0x4d6>
 8004b26:	bf00      	nop
 8004b28:	40011000 	.word	0x40011000
 8004b2c:	40011400 	.word	0x40011400
 8004b30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b46:	4642      	mov	r2, r8
 8004b48:	464b      	mov	r3, r9
 8004b4a:	1891      	adds	r1, r2, r2
 8004b4c:	6239      	str	r1, [r7, #32]
 8004b4e:	415b      	adcs	r3, r3
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
 8004b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b56:	4641      	mov	r1, r8
 8004b58:	1854      	adds	r4, r2, r1
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	eb43 0501 	adc.w	r5, r3, r1
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	00eb      	lsls	r3, r5, #3
 8004b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6e:	00e2      	lsls	r2, r4, #3
 8004b70:	4614      	mov	r4, r2
 8004b72:	461d      	mov	r5, r3
 8004b74:	4643      	mov	r3, r8
 8004b76:	18e3      	adds	r3, r4, r3
 8004b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	eb45 0303 	adc.w	r3, r5, r3
 8004b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	008b      	lsls	r3, r1, #2
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bac:	4621      	mov	r1, r4
 8004bae:	008a      	lsls	r2, r1, #2
 8004bb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bb4:	f7fb fe5a 	bl	800086c <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4b60      	ldr	r3, [pc, #384]	; (8004d40 <UART_SetConfig+0x4e4>)
 8004bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	011c      	lsls	r4, r3, #4
 8004bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bd8:	4642      	mov	r2, r8
 8004bda:	464b      	mov	r3, r9
 8004bdc:	1891      	adds	r1, r2, r2
 8004bde:	61b9      	str	r1, [r7, #24]
 8004be0:	415b      	adcs	r3, r3
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be8:	4641      	mov	r1, r8
 8004bea:	1851      	adds	r1, r2, r1
 8004bec:	6139      	str	r1, [r7, #16]
 8004bee:	4649      	mov	r1, r9
 8004bf0:	414b      	adcs	r3, r1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c00:	4659      	mov	r1, fp
 8004c02:	00cb      	lsls	r3, r1, #3
 8004c04:	4651      	mov	r1, sl
 8004c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	00ca      	lsls	r2, r1, #3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	4642      	mov	r2, r8
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	460a      	mov	r2, r1
 8004c20:	eb42 0303 	adc.w	r3, r2, r3
 8004c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c40:	4649      	mov	r1, r9
 8004c42:	008b      	lsls	r3, r1, #2
 8004c44:	4641      	mov	r1, r8
 8004c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	008a      	lsls	r2, r1, #2
 8004c4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c52:	f7fb fe0b 	bl	800086c <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <UART_SetConfig+0x4e4>)
 8004c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	2164      	movs	r1, #100	; 0x64
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	3332      	adds	r3, #50	; 0x32
 8004c6e:	4a34      	ldr	r2, [pc, #208]	; (8004d40 <UART_SetConfig+0x4e4>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c7a:	441c      	add	r4, r3
 8004c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c80:	2200      	movs	r2, #0
 8004c82:	673b      	str	r3, [r7, #112]	; 0x70
 8004c84:	677a      	str	r2, [r7, #116]	; 0x74
 8004c86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	1891      	adds	r1, r2, r2
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	415b      	adcs	r3, r3
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	1851      	adds	r1, r2, r1
 8004c9e:	6039      	str	r1, [r7, #0]
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	414b      	adcs	r3, r1
 8004ca4:	607b      	str	r3, [r7, #4]
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cb2:	4659      	mov	r1, fp
 8004cb4:	00cb      	lsls	r3, r1, #3
 8004cb6:	4651      	mov	r1, sl
 8004cb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cbc:	4651      	mov	r1, sl
 8004cbe:	00ca      	lsls	r2, r1, #3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	189b      	adds	r3, r3, r2
 8004cca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ccc:	464b      	mov	r3, r9
 8004cce:	460a      	mov	r2, r1
 8004cd0:	eb42 0303 	adc.w	r3, r2, r3
 8004cd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	663b      	str	r3, [r7, #96]	; 0x60
 8004ce0:	667a      	str	r2, [r7, #100]	; 0x64
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cee:	4649      	mov	r1, r9
 8004cf0:	008b      	lsls	r3, r1, #2
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	008a      	lsls	r2, r1, #2
 8004cfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d00:	f7fb fdb4 	bl	800086c <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <UART_SetConfig+0x4e4>)
 8004d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2164      	movs	r1, #100	; 0x64
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	3332      	adds	r3, #50	; 0x32
 8004d1c:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <UART_SetConfig+0x4e4>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4422      	add	r2, r4
 8004d30:	609a      	str	r2, [r3, #8]
}
 8004d32:	bf00      	nop
 8004d34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	51eb851f 	.word	0x51eb851f

08004d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d48:	e7fe      	b.n	8004d48 <NMI_Handler+0x4>

08004d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d4e:	e7fe      	b.n	8004d4e <HardFault_Handler+0x4>

08004d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d54:	e7fe      	b.n	8004d54 <MemManage_Handler+0x4>

08004d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d5a:	e7fe      	b.n	8004d5a <BusFault_Handler+0x4>

08004d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d60:	e7fe      	b.n	8004d60 <UsageFault_Handler+0x4>

08004d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d62:	b480      	push	{r7}
 8004d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d66:	bf00      	nop
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d90:	f7fc fb62 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d94:	bf00      	nop
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c);
 8004d9c:	4802      	ldr	r0, [pc, #8]	; (8004da8 <I2C2_EV_IRQHandler+0x10>)
 8004d9e:	f7fd fa49 	bl	8002234 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */
  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	200000a8 	.word	0x200000a8

08004dac <DEV_TimerInit>:
 * @param
 * 		timer		[I] - Timer definition
 * 		duration 	[I] - Duration of counter
 * @retval ret - Return API value
 */
retType DEV_TimerInit(ttimer_t * timer, tick_t duration){
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]

	retType ret = API_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]

	if(timer == 0 || duration <= 0 || duration > MAX_DELAY) return API_ERROR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <DEV_TimerInit+0x24>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <DEV_TimerInit+0x24>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	f247 5230 	movw	r2, #30000	; 0x7530
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <DEV_TimerInit+0x28>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e009      	b.n	8004de8 <DEV_TimerInit+0x3c>
	//Initialize Timer variables
	timer->startTime = 0;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
	timer->duration = duration;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	605a      	str	r2, [r3, #4]
	timer->running = false;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	721a      	strb	r2, [r3, #8]
	return ret;
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <DEV_TimerRead>:
 * @param
 * 		timer		[I] - Timer definition
 * 		done	 	[O] - Time expired
 * @retval ret - Return API value
 */
retType DEV_TimerRead(ttimer_t * timer, bool_t * done){
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]

	retType ret = API_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
	uint32_t time = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]

	if(timer->running == false){	//Initialization check
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	7a1b      	ldrb	r3, [r3, #8]
 8004e0a:	f083 0301 	eor.w	r3, r3, #1
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <DEV_TimerRead+0x32>
		timer->startTime = HAL_GetTick();
 8004e14:	f7fc fb34 	bl	8001480 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
		timer->running = true;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	721a      	strb	r2, [r3, #8]
 8004e24:	e013      	b.n	8004e4e <DEV_TimerRead+0x5a>
	}
	else{
		time = HAL_GetTick() - (timer->startTime);		//Get difference
 8004e26:	f7fc fb2b 	bl	8001480 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	60bb      	str	r3, [r7, #8]
		if(time >= timer->duration){		//Time control
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d307      	bcc.n	8004e4e <DEV_TimerRead+0x5a>
			timer->running = false;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	721a      	strb	r2, [r3, #8]
			*done = true;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2201      	movs	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]
			return ret;
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	e003      	b.n	8004e56 <DEV_TimerRead+0x62>
		}
	}
	*done = false;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
	return ret;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <DEV_UARTSendChar>:
 * @brief  UART Write a Char
 * @param
 * 		pstring		[I] - Data Buffer
 * @retval ret - Return API value
 */
retType DEV_UARTSendChar(uint8_t * pstring){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]

	//Send a char via UART
	ret |= HAL_UART_Transmit(&huart, pstring, 1, TIME_OUT);
 8004e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e70:	2201      	movs	r2, #1
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4806      	ldr	r0, [pc, #24]	; (8004e90 <DEV_UARTSendChar+0x30>)
 8004e76:	f7ff fbf0 	bl	800465a <HAL_UART_Transmit>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000064 	.word	0x20000064

08004e94 <DEV_UARTSendStringSize>:
 * @param
 * 		pstring		[I] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType DEV_UARTSendStringSize(uint8_t * pstring, uint16_t size){
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	807b      	strh	r3, [r7, #2]

	retType ret = API_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]

	if(size == 0) return API_ERROR;
 8004ea4:	887b      	ldrh	r3, [r7, #2]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <DEV_UARTSendStringSize+0x1a>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e00c      	b.n	8004ec8 <DEV_UARTSendStringSize+0x34>
	//Send a word via UART
	ret |= HAL_UART_Transmit(&huart, pstring, size, TIME_OUT);
 8004eae:	887a      	ldrh	r2, [r7, #2]
 8004eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4806      	ldr	r0, [pc, #24]	; (8004ed0 <DEV_UARTSendStringSize+0x3c>)
 8004eb8:	f7ff fbcf 	bl	800465a <HAL_UART_Transmit>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000064 	.word	0x20000064

08004ed4 <DEV_UARTInit>:
 * @brief  UART Initializer function
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType DEV_UARTInit(void){
 8004ed4:	b5b0      	push	{r4, r5, r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]
	uint8_t str[] = "UART INITIALIZED:\n";
 8004ede:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <DEV_UARTInit+0x84>)
 8004ee0:	1d3c      	adds	r4, r7, #4
 8004ee2:	461d      	mov	r5, r3
 8004ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	8022      	strh	r2, [r4, #0]
 8004eee:	3402      	adds	r4, #2
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	7023      	strb	r3, [r4, #0]

	//Define UART variable configuration
	huart.Instance = USARTx;
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <DEV_UARTInit+0x88>)
 8004ef6:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <DEV_UARTInit+0x8c>)
 8004ef8:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate= UART_BAUDRATE;
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <DEV_UARTInit+0x88>)
 8004efc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004f00:	605a      	str	r2, [r3, #4]
	huart.Init.HwFlowCtl = UART_HWFLOWCTL;
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <DEV_UARTInit+0x88>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE;
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <DEV_UARTInit+0x88>)
 8004f0a:	220c      	movs	r2, #12
 8004f0c:	615a      	str	r2, [r3, #20]
	huart.Init.OverSampling = UART_OVERSAMPLING;
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <DEV_UARTInit+0x88>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	61da      	str	r2, [r3, #28]
	huart.Init.Parity = UART_PARITY;
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <DEV_UARTInit+0x88>)
 8004f16:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f1a:	611a      	str	r2, [r3, #16]
	huart.Init.StopBits = UART_STOPBITS;
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <DEV_UARTInit+0x88>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	60da      	str	r2, [r3, #12]
	huart.Init.WordLength = UART_WORDLENGTH;
 8004f22:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <DEV_UARTInit+0x88>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	609a      	str	r2, [r3, #8]

	//Set configuration and initialize
	ret |= HAL_UART_Init(&huart);
 8004f28:	480c      	ldr	r0, [pc, #48]	; (8004f5c <DEV_UARTInit+0x88>)
 8004f2a:	f7ff fb49 	bl	80045c0 <HAL_UART_Init>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	461a      	mov	r2, r3
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	75fb      	strb	r3, [r7, #23]
	if(ret != API_OK) return ret;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <DEV_UARTInit+0x6e>
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	e005      	b.n	8004f4e <DEV_UARTInit+0x7a>
	//Print a little msg with UART state
	else DEV_UARTSendStringSize(str, sizeof(str));
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	2113      	movs	r1, #19
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ffa4 	bl	8004e94 <DEV_UARTSendStringSize>
	return ret;
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bdb0      	pop	{r4, r5, r7, pc}
 8004f56:	bf00      	nop
 8004f58:	080056d0 	.word	0x080056d0
 8004f5c:	20000064 	.word	0x20000064
 8004f60:	40004800 	.word	0x40004800

08004f64 <APP_MPU9250Write>:
 * 		addr2write	[I] - MPU Slave address
 * 		pdata 		[I] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType APP_MPU9250Write(uint8_t addr2write, uint8_t * pdata, uint16_t size){
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
 8004f70:	4613      	mov	r3, r2
 8004f72:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	73fb      	strb	r3, [r7, #15]

	if(size <= 0) ret = API_ERROR;
 8004f78:	88bb      	ldrh	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <APP_MPU9250Write+0x1e>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <APP_MPU9250Write+0x28>
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	e016      	b.n	8004fba <APP_MPU9250Write+0x56>

	//Write a word on MPU9250 device
	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2write, 1);
 8004f8c:	1dfb      	adds	r3, r7, #7
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4619      	mov	r1, r3
 8004f92:	20d0      	movs	r0, #208	; 0xd0
 8004f94:	f000 fa3e 	bl	8005414 <DEV_I2CWrite>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, pdata, size);
 8004fa2:	88bb      	ldrh	r3, [r7, #4]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6839      	ldr	r1, [r7, #0]
 8004fa8:	20d0      	movs	r0, #208	; 0xd0
 8004faa:	f000 fa33 	bl	8005414 <DEV_I2CWrite>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <APP_MPU9250Read>:
 * 		addr2read	[I] - MPU Slave address
 * 		pdata 		[O] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType APP_MPU9250Read(uint8_t addr2read, uint8_t * pdata, uint16_t size){
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	4603      	mov	r3, r0
 8004fca:	6039      	str	r1, [r7, #0]
 8004fcc:	71fb      	strb	r3, [r7, #7]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]

	if(size == 0) ret = API_ERROR;
 8004fd6:	88bb      	ldrh	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <APP_MPU9250Read+0x1e>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <APP_MPU9250Read+0x28>
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	e016      	b.n	8005018 <APP_MPU9250Read+0x56>

	//Read a word from MPU9250 device
	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2read, 1);
 8004fea:	1dfb      	adds	r3, r7, #7
 8004fec:	2201      	movs	r2, #1
 8004fee:	4619      	mov	r1, r3
 8004ff0:	20d0      	movs	r0, #208	; 0xd0
 8004ff2:	f000 fa0f 	bl	8005414 <DEV_I2CWrite>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CRead(MPU9250_SLAVEADDR, pdata, size);
 8005000:	88bb      	ldrh	r3, [r7, #4]
 8005002:	461a      	mov	r2, r3
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	20d0      	movs	r0, #208	; 0xd0
 8005008:	f000 fa34 	bl	8005474 <DEV_I2CRead>
 800500c:	4603      	mov	r3, r0
 800500e:	461a      	mov	r2, r3
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	4313      	orrs	r3, r2
 8005014:	73fb      	strb	r3, [r7, #15]

	return ret;
 8005016:	7bfb      	ldrb	r3, [r7, #15]

}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <APP_MPU9250Init>:
 * @brief  MPU9250 Initializer function
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType APP_MPU9250Init(void){
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	71fb      	strb	r3, [r7, #7]

	//Check if MPU communication via I2C is ready
	ret |= DEV_I2CIsReady(MPU9250_SLAVEADDR);
 800502a:	20d0      	movs	r0, #208	; 0xd0
 800502c:	f000 fa52 	bl	80054d4 <DEV_I2CIsReady>
 8005030:	4603      	mov	r3, r0
 8005032:	461a      	mov	r2, r3
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	4313      	orrs	r3, r2
 8005038:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <APP_MPU9250Init+0x24>
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	e04b      	b.n	80050dc <APP_MPU9250Init+0xbc>

	//Set MPU configuration
	//General configuration: CLKSEL
	ret |= APP_MPU9250Write(MPU9250_PWR_MGMT_1, (uint8_t*)0x0, 1);
 8005044:	2201      	movs	r2, #1
 8005046:	2100      	movs	r1, #0
 8005048:	206b      	movs	r0, #107	; 0x6b
 800504a:	f7ff ff8b 	bl	8004f64 <APP_MPU9250Write>
 800504e:	4603      	mov	r3, r0
 8005050:	461a      	mov	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	4313      	orrs	r3, r2
 8005056:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <APP_MPU9250Init+0x42>
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	e03c      	b.n	80050dc <APP_MPU9250Init+0xbc>
	ret |= APP_MPU9250Write(MPU9250_PWR_MGMT_1, (uint8_t*)0x1, 1);
 8005062:	2201      	movs	r2, #1
 8005064:	2101      	movs	r1, #1
 8005066:	206b      	movs	r0, #107	; 0x6b
 8005068:	f7ff ff7c 	bl	8004f64 <APP_MPU9250Write>
 800506c:	4603      	mov	r3, r0
 800506e:	461a      	mov	r2, r3
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	4313      	orrs	r3, r2
 8005074:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <APP_MPU9250Init+0x60>
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	e02d      	b.n	80050dc <APP_MPU9250Init+0xbc>
	//Gyroscope configuration: Scale
	ret |= APP_MPU9250Write(MPU9250_GYRO_CONFIG, (uint8_t*)0x18, 1);
 8005080:	2201      	movs	r2, #1
 8005082:	2118      	movs	r1, #24
 8005084:	201b      	movs	r0, #27
 8005086:	f7ff ff6d 	bl	8004f64 <APP_MPU9250Write>
 800508a:	4603      	mov	r3, r0
 800508c:	461a      	mov	r2, r3
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	4313      	orrs	r3, r2
 8005092:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_CONFIG_AD, (uint8_t*)0x7, 1);
 8005094:	2201      	movs	r2, #1
 8005096:	2107      	movs	r1, #7
 8005098:	201a      	movs	r0, #26
 800509a:	f7ff ff63 	bl	8004f64 <APP_MPU9250Write>
 800509e:	4603      	mov	r3, r0
 80050a0:	461a      	mov	r2, r3
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <APP_MPU9250Init+0x92>
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	e014      	b.n	80050dc <APP_MPU9250Init+0xbc>
	//Accelerometer configuration: Scale
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_1, (uint8_t*)0x18, 1);
 80050b2:	2201      	movs	r2, #1
 80050b4:	2118      	movs	r1, #24
 80050b6:	201c      	movs	r0, #28
 80050b8:	f7ff ff54 	bl	8004f64 <APP_MPU9250Write>
 80050bc:	4603      	mov	r3, r0
 80050be:	461a      	mov	r2, r3
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_2, (uint8_t*)0x7, 1);
 80050c6:	2201      	movs	r2, #1
 80050c8:	2107      	movs	r1, #7
 80050ca:	201d      	movs	r0, #29
 80050cc:	f7ff ff4a 	bl	8004f64 <APP_MPU9250Write>
 80050d0:	4603      	mov	r3, r0
 80050d2:	461a      	mov	r2, r3
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	71fb      	strb	r3, [r7, #7]

	return ret;
 80050da:	79fb      	ldrb	r3, [r7, #7]

}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <APP_MPU9250ReadGyro>:
 * @brief  MPU9250 Read Gyroscope value per Axis
 * @param
 * 		gyro [O] - Gyroscope structure with axes
 * @retval ret - Return API value
 */
retType APP_MPU9250ReadGyro(axis_t * gyro){
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_x = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_y = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	817b      	strh	r3, [r7, #10]
	uint16_t aux_z = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	813b      	strh	r3, [r7, #8]

	//Read Gyroscope values for Axes X, Y and Z
	ret |= APP_MPU9250Read(MPU9250_GYRO_XOUT_H, (uint8_t*)&aux_x, 2);
 80050fc:	f107 030c 	add.w	r3, r7, #12
 8005100:	2202      	movs	r2, #2
 8005102:	4619      	mov	r1, r3
 8005104:	2043      	movs	r0, #67	; 0x43
 8005106:	f7ff ff5c 	bl	8004fc2 <APP_MPU9250Read>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	4313      	orrs	r3, r2
 8005112:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_YOUT_H, (uint8_t*)&aux_y, 2);
 8005114:	f107 030a 	add.w	r3, r7, #10
 8005118:	2202      	movs	r2, #2
 800511a:	4619      	mov	r1, r3
 800511c:	2045      	movs	r0, #69	; 0x45
 800511e:	f7ff ff50 	bl	8004fc2 <APP_MPU9250Read>
 8005122:	4603      	mov	r3, r0
 8005124:	461a      	mov	r2, r3
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	4313      	orrs	r3, r2
 800512a:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_ZOUT_H, (uint8_t*)&aux_z, 2);
 800512c:	f107 0308 	add.w	r3, r7, #8
 8005130:	2202      	movs	r2, #2
 8005132:	4619      	mov	r1, r3
 8005134:	2047      	movs	r0, #71	; 0x47
 8005136:	f7ff ff44 	bl	8004fc2 <APP_MPU9250Read>
 800513a:	4603      	mov	r3, r0
 800513c:	461a      	mov	r2, r3
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	4313      	orrs	r3, r2
 8005142:	73fb      	strb	r3, [r7, #15]

	//Convert to human scale Gyroscope values for Axes X, Y and Z
	ret |= gyro_convert(aux_x, &(gyro->x));
 8005144:	89bb      	ldrh	r3, [r7, #12]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4611      	mov	r1, r2
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f89e 	bl	800528c <gyro_convert>
 8005150:	4603      	mov	r3, r0
 8005152:	461a      	mov	r2, r3
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	4313      	orrs	r3, r2
 8005158:	73fb      	strb	r3, [r7, #15]
	ret |= gyro_convert(aux_y, &(gyro->y));
 800515a:	897a      	ldrh	r2, [r7, #10]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f000 f892 	bl	800528c <gyro_convert>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	4313      	orrs	r3, r2
 8005170:	73fb      	strb	r3, [r7, #15]
	ret |= gyro_convert(aux_z, &(gyro->z));
 8005172:	893a      	ldrh	r2, [r7, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3308      	adds	r3, #8
 8005178:	4619      	mov	r1, r3
 800517a:	4610      	mov	r0, r2
 800517c:	f000 f886 	bl	800528c <gyro_convert>
 8005180:	4603      	mov	r3, r0
 8005182:	461a      	mov	r2, r3
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	4313      	orrs	r3, r2
 8005188:	73fb      	strb	r3, [r7, #15]
	return ret;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <APP_MPU9250ReadAccl>:
 * @brief  MPU9250 Read Accelerometer value per Axis
 * @param
 * 		accl [O] - Accelerometer structure with axes
 * @retval ret - Return API value
 */
retType APP_MPU9250ReadAccl(axis_t * accl){
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_x = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_y = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	817b      	strh	r3, [r7, #10]
	uint16_t aux_z = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	813b      	strh	r3, [r7, #8]

	//Read Accelerometer values for Axes X, Y and Z
	ret |= APP_MPU9250Read(MPU9250_ACCEL_XOUT_H, (uint8_t*)&aux_x, 2);
 80051ac:	f107 030c 	add.w	r3, r7, #12
 80051b0:	2202      	movs	r2, #2
 80051b2:	4619      	mov	r1, r3
 80051b4:	203b      	movs	r0, #59	; 0x3b
 80051b6:	f7ff ff04 	bl	8004fc2 <APP_MPU9250Read>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_YOUT_H, (uint8_t*)&aux_y, 2);
 80051c4:	f107 030a 	add.w	r3, r7, #10
 80051c8:	2202      	movs	r2, #2
 80051ca:	4619      	mov	r1, r3
 80051cc:	203d      	movs	r0, #61	; 0x3d
 80051ce:	f7ff fef8 	bl	8004fc2 <APP_MPU9250Read>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	4313      	orrs	r3, r2
 80051da:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_ZOUT_H, (uint8_t*)&aux_z, 2);
 80051dc:	f107 0308 	add.w	r3, r7, #8
 80051e0:	2202      	movs	r2, #2
 80051e2:	4619      	mov	r1, r3
 80051e4:	203f      	movs	r0, #63	; 0x3f
 80051e6:	f7ff feec 	bl	8004fc2 <APP_MPU9250Read>
 80051ea:	4603      	mov	r3, r0
 80051ec:	461a      	mov	r2, r3
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	73fb      	strb	r3, [r7, #15]

	//Convert to human scale Accelerometer values for Axes X, Y and Z
	ret |= accl_convert(aux_x, &(accl->x));
 80051f4:	89bb      	ldrh	r3, [r7, #12]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f878 	bl	80052f0 <accl_convert>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	4313      	orrs	r3, r2
 8005208:	73fb      	strb	r3, [r7, #15]
	ret |= accl_convert(aux_y, &(accl->y));
 800520a:	897a      	ldrh	r2, [r7, #10]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f000 f86c 	bl	80052f0 <accl_convert>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	4313      	orrs	r3, r2
 8005220:	73fb      	strb	r3, [r7, #15]
	ret |= accl_convert(aux_z, &(accl->z));
 8005222:	893a      	ldrh	r2, [r7, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3308      	adds	r3, #8
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f000 f860 	bl	80052f0 <accl_convert>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	4313      	orrs	r3, r2
 8005238:	73fb      	strb	r3, [r7, #15]
	return ret;
 800523a:	7bfb      	ldrb	r3, [r7, #15]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <APP_MPU9250ReadTemp>:
 * @brief  MPU9250 Read Temperature value
 * @param
 * 		temp [O] - Temperature value
 * @retval ret - Return API value
 */
retType APP_MPU9250ReadTemp(uint16_t * temp){
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	73fb      	strb	r3, [r7, #15]
	uint16_t aux_temp = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	81bb      	strh	r3, [r7, #12]

	//Read Temperature value
	ret |= APP_MPU9250Read(MPU9250_TEMP_OUT_H, (uint8_t*)&aux_temp, 2);
 8005254:	f107 030c 	add.w	r3, r7, #12
 8005258:	2202      	movs	r2, #2
 800525a:	4619      	mov	r1, r3
 800525c:	2041      	movs	r0, #65	; 0x41
 800525e:	f7ff feb0 	bl	8004fc2 <APP_MPU9250Read>
 8005262:	4603      	mov	r3, r0
 8005264:	461a      	mov	r2, r3
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	4313      	orrs	r3, r2
 800526a:	73fb      	strb	r3, [r7, #15]

	//Convert to human scale Temperature value
	ret |= temp_convert(aux_temp, temp);
 800526c:	89bb      	ldrh	r3, [r7, #12]
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f871 	bl	8005358 <temp_convert>
 8005276:	4603      	mov	r3, r0
 8005278:	461a      	mov	r2, r3
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	4313      	orrs	r3, r2
 800527e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <gyro_convert>:
 * @param
 * 		axis [I] - Axis value to convert
 * 		paxis [O] - Value converted
 * @retval ret - Return API value
 */
static retType gyro_convert(uint16_t axis, float * paxis){
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]
	uint8_t aux = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	73bb      	strb	r3, [r7, #14]

	//Fix big/little endian
	aux = (axis&(0xff00))>>8;
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	73bb      	strb	r3, [r7, #14]
	axis = (axis&0x00ff)<<8;
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	80fb      	strh	r3, [r7, #6]
	axis |= aux;
 80052ae:	7bbb      	ldrb	r3, [r7, #14]
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	80fb      	strh	r3, [r7, #6]
	*paxis = axis*GYRO_SCALE;
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fb fa1c 	bl	80006f8 <__aeabi_i2d>
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <gyro_convert+0x5c>)
 80052c6:	f7fa ff9b 	bl	8000200 <__aeabi_dmul>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	f7fb fa7b 	bl	80007cc <__aeabi_d2f>
 80052d6:	4602      	mov	r2, r0
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]
	return ret;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	3faf4000 	.word	0x3faf4000
 80052ec:	00000000 	.word	0x00000000

080052f0 <accl_convert>:
 * @param
 * 		axis [I] - Axis value to convert
 * 		paxis [O] - Value converted
 * @retval ret - Return API value
 */
static retType accl_convert(uint16_t axis, float * paxis){
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	6039      	str	r1, [r7, #0]
 80052fa:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
	uint8_t aux = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	73bb      	strb	r3, [r7, #14]

	//Fix big/little endian
	aux = (axis&(0xff00))>>8;
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	b29b      	uxth	r3, r3
 800530a:	73bb      	strb	r3, [r7, #14]
	axis = (axis&0x00ff)<<8;
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	80fb      	strh	r3, [r7, #6]
	axis |= aux;
 8005312:	7bbb      	ldrb	r3, [r7, #14]
 8005314:	b29a      	uxth	r2, r3
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	4313      	orrs	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
	*paxis = axis*ACCL_SCALE;
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb f9ea 	bl	80006f8 <__aeabi_i2d>
 8005324:	a30a      	add	r3, pc, #40	; (adr r3, 8005350 <accl_convert+0x60>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fa ff69 	bl	8000200 <__aeabi_dmul>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	f7fb fa49 	bl	80007cc <__aeabi_d2f>
 800533a:	4602      	mov	r2, r0
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	601a      	str	r2, [r3, #0]
	return ret;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	f3af 8000 	nop.w
 8005350:	51eb851f 	.word	0x51eb851f
 8005354:	3f739eb8 	.word	0x3f739eb8

08005358 <temp_convert>:
 * @param
 * 		axis [I] - Axis value to convert
 * 		paxis [O] - Value converted
 * @retval ret - Return API value
 */
static retType temp_convert(uint16_t temp, uint16_t * ptemp){
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	6039      	str	r1, [r7, #0]
 8005362:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	73fb      	strb	r3, [r7, #15]
	uint8_t aux = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	73bb      	strb	r3, [r7, #14]

	//Fix big/little endian
	aux = (temp&(0xff00))>>8;
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	0a1b      	lsrs	r3, r3, #8
 8005370:	b29b      	uxth	r3, r3
 8005372:	73bb      	strb	r3, [r7, #14]
	temp = (temp&0x00ff)<<8;
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	80fb      	strh	r3, [r7, #6]
	temp |= aux;
 800537a:	7bbb      	ldrb	r3, [r7, #14]
 800537c:	b29a      	uxth	r2, r3
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	4313      	orrs	r3, r2
 8005382:	80fb      	strh	r3, [r7, #6]

	//Apply scale and convertion to °C
	*ptemp = (temp - 0)/321 + 21;
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	4a09      	ldr	r2, [pc, #36]	; (80053ac <temp_convert+0x54>)
 8005388:	fb82 1203 	smull	r1, r2, r2, r3
 800538c:	11d2      	asrs	r2, r2, #7
 800538e:	17db      	asrs	r3, r3, #31
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	b29b      	uxth	r3, r3
 8005394:	3315      	adds	r3, #21
 8005396:	b29a      	uxth	r2, r3
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	801a      	strh	r2, [r3, #0]
	return ret;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	6614bc37 	.word	0x6614bc37

080053b0 <DEV_I2CInit>:
 * @brief  I2C Initialization
 * @param
 * 		void
 * @retval ret - Return API value
 */
retType DEV_I2CInit(void){
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0

	//Define I2C variable configuration
	retType ret = API_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	71fb      	strb	r3, [r7, #7]
	hi2c.Instance = I2C2;
 80053ba:	4b13      	ldr	r3, [pc, #76]	; (8005408 <DEV_I2CInit+0x58>)
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <DEV_I2CInit+0x5c>)
 80053be:	601a      	str	r2, [r3, #0]
	hi2c.Init.ClockSpeed = I2C_CLOCKSPEED;
 80053c0:	4b11      	ldr	r3, [pc, #68]	; (8005408 <DEV_I2CInit+0x58>)
 80053c2:	4a13      	ldr	r2, [pc, #76]	; (8005410 <DEV_I2CInit+0x60>)
 80053c4:	605a      	str	r2, [r3, #4]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80053c6:	4b10      	ldr	r3, [pc, #64]	; (8005408 <DEV_I2CInit+0x58>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	609a      	str	r2, [r3, #8]
	hi2c.Init.OwnAddress1 = I2C_OWNADDRESS1;
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <DEV_I2CInit+0x58>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	60da      	str	r2, [r3, #12]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <DEV_I2CInit+0x58>)
 80053d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053d8:	611a      	str	r2, [r3, #16]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <DEV_I2CInit+0x58>)
 80053dc:	2200      	movs	r2, #0
 80053de:	615a      	str	r2, [r3, #20]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <DEV_I2CInit+0x58>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	61da      	str	r2, [r3, #28]
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <DEV_I2CInit+0x58>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	621a      	str	r2, [r3, #32]

	//Set configuration and initialize
	ret |= HAL_I2C_Init(&hi2c);
 80053ec:	4806      	ldr	r0, [pc, #24]	; (8005408 <DEV_I2CInit+0x58>)
 80053ee:	f7fc fb5b 	bl	8001aa8 <HAL_I2C_Init>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	71fb      	strb	r3, [r7, #7]
	return ret;
 80053fc:	79fb      	ldrb	r3, [r7, #7]

}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	200000a8 	.word	0x200000a8
 800540c:	40005800 	.word	0x40005800
 8005410:	000186a0 	.word	0x000186a0

08005414 <DEV_I2CWrite>:
 * 		slave_addr	[I] - I2C device Slave address
 * 		pdata 		[I] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType DEV_I2CWrite(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	6039      	str	r1, [r7, #0]
 800541e:	80fb      	strh	r3, [r7, #6]
 8005420:	4613      	mov	r3, r2
 8005422:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	73fb      	strb	r3, [r7, #15]

	if(slave_addr==0 || size == 0) return API_ERROR;
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <DEV_I2CWrite+0x20>
 800542e:	88bb      	ldrh	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <DEV_I2CWrite+0x24>
 8005434:	2301      	movs	r3, #1
 8005436:	e017      	b.n	8005468 <DEV_I2CWrite+0x54>
	//Send a word via I2C
	ret |= HAL_I2C_Master_Transmit_IT(&hi2c, slave_addr, pdata, size);
 8005438:	88bb      	ldrh	r3, [r7, #4]
 800543a:	88f9      	ldrh	r1, [r7, #6]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	480c      	ldr	r0, [pc, #48]	; (8005470 <DEV_I2CWrite+0x5c>)
 8005440:	f7fc fc76 	bl	8001d30 <HAL_I2C_Master_Transmit_IT>
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	4313      	orrs	r3, r2
 800544c:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <DEV_I2CWrite+0x44>
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	e007      	b.n	8005468 <DEV_I2CWrite+0x54>

	//Wait for IT. Here you can do anything or just wait
	while(hi2c.State != HAL_I2C_STATE_READY){/**we can do anything*/}
 8005458:	bf00      	nop
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <DEV_I2CWrite+0x5c>)
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b20      	cmp	r3, #32
 8005464:	d1f9      	bne.n	800545a <DEV_I2CWrite+0x46>
	return ret;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	200000a8 	.word	0x200000a8

08005474 <DEV_I2CRead>:
 * 		slave_addr	[I] - I2C device Slave address
 * 		pdata 		[O] - Data Buffer
 * 		size 		[I] - Data Buffer size
 * @retval ret - Return API value
 */
retType DEV_I2CRead(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	6039      	str	r1, [r7, #0]
 800547e:	80fb      	strh	r3, [r7, #6]
 8005480:	4613      	mov	r3, r2
 8005482:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]

	if(slave_addr==0 || size == 0) return API_ERROR;
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <DEV_I2CRead+0x20>
 800548e:	88bb      	ldrh	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <DEV_I2CRead+0x24>
 8005494:	2301      	movs	r3, #1
 8005496:	e017      	b.n	80054c8 <DEV_I2CRead+0x54>
	//Receive a word via I2C
	ret |= HAL_I2C_Master_Receive_IT(&hi2c, slave_addr, pdata, size);
 8005498:	88bb      	ldrh	r3, [r7, #4]
 800549a:	88f9      	ldrh	r1, [r7, #6]
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	480c      	ldr	r0, [pc, #48]	; (80054d0 <DEV_I2CRead+0x5c>)
 80054a0:	f7fc fcec 	bl	8001e7c <HAL_I2C_Master_Receive_IT>
 80054a4:	4603      	mov	r3, r0
 80054a6:	461a      	mov	r2, r3
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <DEV_I2CRead+0x44>
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	e007      	b.n	80054c8 <DEV_I2CRead+0x54>

	//Wait for IT. Here you can do anything or just wait
	while(hi2c.State != HAL_I2C_STATE_READY){/**we can do anything*/}
 80054b8:	bf00      	nop
 80054ba:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <DEV_I2CRead+0x5c>)
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d1f9      	bne.n	80054ba <DEV_I2CRead+0x46>
	return ret;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	200000a8 	.word	0x200000a8

080054d4 <DEV_I2CIsReady>:
 * @brief  I2C Checker if communication is ready
 * @param
 * 		slave_addr	[I] - I2C device Slave address
 * @retval ret - Return API value
 */
retType DEV_I2CIsReady(uint16_t slave_addr){
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	80fb      	strh	r3, [r7, #6]

	retType ret = API_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]

	if(slave_addr==0) return API_ERROR;
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <DEV_I2CIsReady+0x18>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e009      	b.n	8005500 <DEV_I2CIsReady+0x2c>
	//Check if I2C communication is ready
	ret = HAL_I2C_IsDeviceReady(&hi2c, slave_addr, 2, 1000);
 80054ec:	88f9      	ldrh	r1, [r7, #6]
 80054ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054f2:	2202      	movs	r2, #2
 80054f4:	4804      	ldr	r0, [pc, #16]	; (8005508 <DEV_I2CIsReady+0x34>)
 80054f6:	f7fc fd6f 	bl	8001fd8 <HAL_I2C_IsDeviceReady>
 80054fa:	4603      	mov	r3, r0
 80054fc:	73fb      	strb	r3, [r7, #15]
	return ret;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200000a8 	.word	0x200000a8

0800550c <__libc_init_array>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4d0d      	ldr	r5, [pc, #52]	; (8005544 <__libc_init_array+0x38>)
 8005510:	4c0d      	ldr	r4, [pc, #52]	; (8005548 <__libc_init_array+0x3c>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	2600      	movs	r6, #0
 8005518:	42a6      	cmp	r6, r4
 800551a:	d109      	bne.n	8005530 <__libc_init_array+0x24>
 800551c:	4d0b      	ldr	r5, [pc, #44]	; (800554c <__libc_init_array+0x40>)
 800551e:	4c0c      	ldr	r4, [pc, #48]	; (8005550 <__libc_init_array+0x44>)
 8005520:	f000 f88c 	bl	800563c <_init>
 8005524:	1b64      	subs	r4, r4, r5
 8005526:	10a4      	asrs	r4, r4, #2
 8005528:	2600      	movs	r6, #0
 800552a:	42a6      	cmp	r6, r4
 800552c:	d105      	bne.n	800553a <__libc_init_array+0x2e>
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	f855 3b04 	ldr.w	r3, [r5], #4
 8005534:	4798      	blx	r3
 8005536:	3601      	adds	r6, #1
 8005538:	e7ee      	b.n	8005518 <__libc_init_array+0xc>
 800553a:	f855 3b04 	ldr.w	r3, [r5], #4
 800553e:	4798      	blx	r3
 8005540:	3601      	adds	r6, #1
 8005542:	e7f2      	b.n	800552a <__libc_init_array+0x1e>
 8005544:	08005730 	.word	0x08005730
 8005548:	08005730 	.word	0x08005730
 800554c:	08005730 	.word	0x08005730
 8005550:	08005734 	.word	0x08005734

08005554 <__itoa>:
 8005554:	1e93      	subs	r3, r2, #2
 8005556:	2b22      	cmp	r3, #34	; 0x22
 8005558:	b510      	push	{r4, lr}
 800555a:	460c      	mov	r4, r1
 800555c:	d904      	bls.n	8005568 <__itoa+0x14>
 800555e:	2300      	movs	r3, #0
 8005560:	700b      	strb	r3, [r1, #0]
 8005562:	461c      	mov	r4, r3
 8005564:	4620      	mov	r0, r4
 8005566:	bd10      	pop	{r4, pc}
 8005568:	2a0a      	cmp	r2, #10
 800556a:	d109      	bne.n	8005580 <__itoa+0x2c>
 800556c:	2800      	cmp	r0, #0
 800556e:	da07      	bge.n	8005580 <__itoa+0x2c>
 8005570:	232d      	movs	r3, #45	; 0x2d
 8005572:	700b      	strb	r3, [r1, #0]
 8005574:	4240      	negs	r0, r0
 8005576:	2101      	movs	r1, #1
 8005578:	4421      	add	r1, r4
 800557a:	f000 f81d 	bl	80055b8 <__utoa>
 800557e:	e7f1      	b.n	8005564 <__itoa+0x10>
 8005580:	2100      	movs	r1, #0
 8005582:	e7f9      	b.n	8005578 <__itoa+0x24>

08005584 <itoa>:
 8005584:	f7ff bfe6 	b.w	8005554 <__itoa>

08005588 <memset>:
 8005588:	4402      	add	r2, r0
 800558a:	4603      	mov	r3, r0
 800558c:	4293      	cmp	r3, r2
 800558e:	d100      	bne.n	8005592 <memset+0xa>
 8005590:	4770      	bx	lr
 8005592:	f803 1b01 	strb.w	r1, [r3], #1
 8005596:	e7f9      	b.n	800558c <memset+0x4>

08005598 <strcat>:
 8005598:	b510      	push	{r4, lr}
 800559a:	4602      	mov	r2, r0
 800559c:	7814      	ldrb	r4, [r2, #0]
 800559e:	4613      	mov	r3, r2
 80055a0:	3201      	adds	r2, #1
 80055a2:	2c00      	cmp	r4, #0
 80055a4:	d1fa      	bne.n	800559c <strcat+0x4>
 80055a6:	3b01      	subs	r3, #1
 80055a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	d1f9      	bne.n	80055a8 <strcat+0x10>
 80055b4:	bd10      	pop	{r4, pc}
	...

080055b8 <__utoa>:
 80055b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ba:	4c1f      	ldr	r4, [pc, #124]	; (8005638 <__utoa+0x80>)
 80055bc:	b08b      	sub	sp, #44	; 0x2c
 80055be:	4605      	mov	r5, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	466e      	mov	r6, sp
 80055c4:	f104 0c20 	add.w	ip, r4, #32
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	6861      	ldr	r1, [r4, #4]
 80055cc:	4637      	mov	r7, r6
 80055ce:	c703      	stmia	r7!, {r0, r1}
 80055d0:	3408      	adds	r4, #8
 80055d2:	4564      	cmp	r4, ip
 80055d4:	463e      	mov	r6, r7
 80055d6:	d1f7      	bne.n	80055c8 <__utoa+0x10>
 80055d8:	7921      	ldrb	r1, [r4, #4]
 80055da:	7139      	strb	r1, [r7, #4]
 80055dc:	1e91      	subs	r1, r2, #2
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	6038      	str	r0, [r7, #0]
 80055e2:	2922      	cmp	r1, #34	; 0x22
 80055e4:	f04f 0100 	mov.w	r1, #0
 80055e8:	d904      	bls.n	80055f4 <__utoa+0x3c>
 80055ea:	7019      	strb	r1, [r3, #0]
 80055ec:	460b      	mov	r3, r1
 80055ee:	4618      	mov	r0, r3
 80055f0:	b00b      	add	sp, #44	; 0x2c
 80055f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f4:	1e58      	subs	r0, r3, #1
 80055f6:	4684      	mov	ip, r0
 80055f8:	fbb5 f7f2 	udiv	r7, r5, r2
 80055fc:	fb02 5617 	mls	r6, r2, r7, r5
 8005600:	3628      	adds	r6, #40	; 0x28
 8005602:	446e      	add	r6, sp
 8005604:	460c      	mov	r4, r1
 8005606:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800560a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800560e:	462e      	mov	r6, r5
 8005610:	42b2      	cmp	r2, r6
 8005612:	f101 0101 	add.w	r1, r1, #1
 8005616:	463d      	mov	r5, r7
 8005618:	d9ee      	bls.n	80055f8 <__utoa+0x40>
 800561a:	2200      	movs	r2, #0
 800561c:	545a      	strb	r2, [r3, r1]
 800561e:	1919      	adds	r1, r3, r4
 8005620:	1aa5      	subs	r5, r4, r2
 8005622:	42aa      	cmp	r2, r5
 8005624:	dae3      	bge.n	80055ee <__utoa+0x36>
 8005626:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800562a:	780e      	ldrb	r6, [r1, #0]
 800562c:	7006      	strb	r6, [r0, #0]
 800562e:	3201      	adds	r2, #1
 8005630:	f801 5901 	strb.w	r5, [r1], #-1
 8005634:	e7f4      	b.n	8005620 <__utoa+0x68>
 8005636:	bf00      	nop
 8005638:	08005702 	.word	0x08005702

0800563c <_init>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	bf00      	nop
 8005640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005642:	bc08      	pop	{r3}
 8005644:	469e      	mov	lr, r3
 8005646:	4770      	bx	lr

08005648 <_fini>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr
