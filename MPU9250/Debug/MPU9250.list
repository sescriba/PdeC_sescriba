
MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e68  08004e68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e70  08004e70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c914  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e84  00000000  00000000  0002c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0002e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  0002f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246e6  00000000  00000000  0002fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f531  00000000  00000000  0005434e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d46bd  00000000  00000000  0006387f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137f3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002af4  00000000  00000000  00137f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004e14 	.word	0x08004e14

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004e14 	.word	0x08004e14

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <APP_SMInit>:
State_t states;
MPU9250_t *read_buff;
bool_t it_i2c;
bool_t first_time;

retType APP_SMInit(void){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 80004f6:	2300      	movs	r3, #0
 80004f8:	71fb      	strb	r3, [r7, #7]

	states = SM_INIT;
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <APP_SMInit+0x20>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
	return ret;
 8000500:	79fb      	ldrb	r3, [r7, #7]
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000028 	.word	0x20000028

08000514 <APP_SMProccess>:

retType APP_SMProccess(void){
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]
	uint8_t str[] = "Data to print\n";
 800051e:	4b68      	ldr	r3, [pc, #416]	; (80006c0 <APP_SMProccess+0x1ac>)
 8000520:	463c      	mov	r4, r7
 8000522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000524:	c407      	stmia	r4!, {r0, r1, r2}
 8000526:	8023      	strh	r3, [r4, #0]
 8000528:	3402      	adds	r4, #2
 800052a:	0c1b      	lsrs	r3, r3, #16
 800052c:	7023      	strb	r3, [r4, #0]

	switch(states){
 800052e:	4b65      	ldr	r3, [pc, #404]	; (80006c4 <APP_SMProccess+0x1b0>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b04      	cmp	r3, #4
 8000534:	f200 80b7 	bhi.w	80006a6 <APP_SMProccess+0x192>
 8000538:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <APP_SMProccess+0x2c>)
 800053a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053e:	bf00      	nop
 8000540:	08000555 	.word	0x08000555
 8000544:	080005af 	.word	0x080005af
 8000548:	080005fb 	.word	0x080005fb
 800054c:	08000645 	.word	0x08000645
 8000550:	0800068f 	.word	0x0800068f
		case SM_INIT:
			ret |= DEV_UARTInit();
 8000554:	f004 f9f0 	bl	8004938 <DEV_UARTInit>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	4313      	orrs	r3, r2
 8000560:	73fb      	strb	r3, [r7, #15]
			if(ret != API_OK) return ret;
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <APP_SMProccess+0x58>
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	e0a5      	b.n	80006b8 <APP_SMProccess+0x1a4>
			ret |= DEV_I2CInit();
 800056c:	f004 fbbc 	bl	8004ce8 <DEV_I2CInit>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4313      	orrs	r3, r2
 8000578:	73fb      	strb	r3, [r7, #15]
			if(ret != API_OK) return ret;
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <APP_SMProccess+0x70>
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	e099      	b.n	80006b8 <APP_SMProccess+0x1a4>
			ret |= APP_MPU9250Init();
 8000584:	f004 fa7e 	bl	8004a84 <APP_MPU9250Init>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	4313      	orrs	r3, r2
 8000590:	73fb      	strb	r3, [r7, #15]
			if(ret == API_OK){
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b00      	cmp	r3, #0
 8000596:	f040 8089 	bne.w	80006ac <APP_SMProccess+0x198>
				states = SM_READGYRO;
 800059a:	4b4a      	ldr	r3, [pc, #296]	; (80006c4 <APP_SMProccess+0x1b0>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
				it_i2c = false;
 80005a0:	4b49      	ldr	r3, [pc, #292]	; (80006c8 <APP_SMProccess+0x1b4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
				first_time = true;
 80005a6:	4b49      	ldr	r3, [pc, #292]	; (80006cc <APP_SMProccess+0x1b8>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005ac:	e07e      	b.n	80006ac <APP_SMProccess+0x198>
		case SM_READGYRO:
			if(first_time){
 80005ae:	4b47      	ldr	r3, [pc, #284]	; (80006cc <APP_SMProccess+0x1b8>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00d      	beq.n	80005d2 <APP_SMProccess+0xbe>
				ret |= APP_MPU9250ReadGyro(read_buff->gyro);
 80005b6:	4b46      	ldr	r3, [pc, #280]	; (80006d0 <APP_SMProccess+0x1bc>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 faa7 	bl	8004b10 <APP_MPU9250ReadGyro>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	73fb      	strb	r3, [r7, #15]
				first_time = false;
 80005cc:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <APP_SMProccess+0x1b8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
			}
			it_i2c = true;
 80005d2:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <APP_SMProccess+0x1b4>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
			if(ret == API_OK && it_i2c == true){
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d168      	bne.n	80006b0 <APP_SMProccess+0x19c>
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <APP_SMProccess+0x1b4>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d064      	beq.n	80006b0 <APP_SMProccess+0x19c>
				states = SM_READACCL;
 80005e6:	4b37      	ldr	r3, [pc, #220]	; (80006c4 <APP_SMProccess+0x1b0>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	701a      	strb	r2, [r3, #0]
				it_i2c = false;
 80005ec:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <APP_SMProccess+0x1b4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
				first_time = true;
 80005f2:	4b36      	ldr	r3, [pc, #216]	; (80006cc <APP_SMProccess+0x1b8>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005f8:	e05a      	b.n	80006b0 <APP_SMProccess+0x19c>
		case SM_READACCL:
			if(first_time){
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <APP_SMProccess+0x1b8>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00d      	beq.n	800061e <APP_SMProccess+0x10a>
				ret |= APP_MPU9250ReadAccl(read_buff->accl);
 8000602:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <APP_SMProccess+0x1bc>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	4618      	mov	r0, r3
 800060a:	f004 face 	bl	8004baa <APP_MPU9250ReadAccl>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	4313      	orrs	r3, r2
 8000616:	73fb      	strb	r3, [r7, #15]
				first_time = false;
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <APP_SMProccess+0x1b8>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
			}
			it_i2c = true;
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <APP_SMProccess+0x1b4>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
			if(ret == API_OK && it_i2c == true){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d10c      	bne.n	8000644 <APP_SMProccess+0x130>
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <APP_SMProccess+0x1b4>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d008      	beq.n	8000644 <APP_SMProccess+0x130>
				states = SM_READTEMP;
 8000632:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <APP_SMProccess+0x1b0>)
 8000634:	2203      	movs	r2, #3
 8000636:	701a      	strb	r2, [r3, #0]
				it_i2c = false;
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <APP_SMProccess+0x1b4>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
				first_time = true;
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <APP_SMProccess+0x1b8>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
			}
		case SM_READTEMP:
			if(first_time){
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <APP_SMProccess+0x1b8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00d      	beq.n	8000668 <APP_SMProccess+0x154>
				ret |= APP_MPU9250ReadTemp(read_buff->temp);
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <APP_SMProccess+0x1bc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	4618      	mov	r0, r3
 8000654:	f004 faf6 	bl	8004c44 <APP_MPU9250ReadTemp>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	4313      	orrs	r3, r2
 8000660:	73fb      	strb	r3, [r7, #15]
				first_time = false;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <APP_SMProccess+0x1b8>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
			}
			it_i2c = true;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <APP_SMProccess+0x1b4>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
			if(ret == API_OK && it_i2c == true){
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10c      	bne.n	800068e <APP_SMProccess+0x17a>
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <APP_SMProccess+0x1b4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d008      	beq.n	800068e <APP_SMProccess+0x17a>
				states = SM_PRINT;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <APP_SMProccess+0x1b0>)
 800067e:	2204      	movs	r2, #4
 8000680:	701a      	strb	r2, [r3, #0]
				it_i2c = false;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <APP_SMProccess+0x1b4>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
				first_time = true;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <APP_SMProccess+0x1b8>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
			};
		case SM_PRINT:
			DEV_UARTSendStringSize(str, sizeof(str));
 800068e:	463b      	mov	r3, r7
 8000690:	210f      	movs	r1, #15
 8000692:	4618      	mov	r0, r3
 8000694:	f004 f930 	bl	80048f8 <DEV_UARTSendStringSize>
			if(ret == API_OK) states = SM_READGYRO;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10a      	bne.n	80006b4 <APP_SMProccess+0x1a0>
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <APP_SMProccess+0x1b0>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
			break;
 80006a4:	e006      	b.n	80006b4 <APP_SMProccess+0x1a0>
		default:
			ret = API_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	73fb      	strb	r3, [r7, #15]
			break;
 80006aa:	e004      	b.n	80006b6 <APP_SMProccess+0x1a2>
			break;
 80006ac:	bf00      	nop
 80006ae:	e002      	b.n	80006b6 <APP_SMProccess+0x1a2>
			break;
 80006b0:	bf00      	nop
 80006b2:	e000      	b.n	80006b6 <APP_SMProccess+0x1a2>
			break;
 80006b4:	bf00      	nop
	}
	return ret;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]

}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	08004e2c 	.word	0x08004e2c
 80006c4:	20000028 	.word	0x20000028
 80006c8:	20000030 	.word	0x20000030
 80006cc:	20000031 	.word	0x20000031
 80006d0:	2000002c 	.word	0x2000002c

080006d4 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	retType ret = API_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	71fb      	strb	r3, [r7, #7]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 80006de:	f000 f8b3 	bl	8000848 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80006e2:	f000 f80f 	bl	8000704 <SystemClock_Config>
//	/* Initialize BSP BUTTON_USER */
//	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);


	//FSM initialization
	ret |= APP_SMInit();
 80006e6:	f7ff ff03 	bl	80004f0 <APP_SMInit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	71fb      	strb	r3, [r7, #7]

	/* Infinite loop */
	while (1)
	{
		//Update FSM
		ret |= APP_SMProccess();
 80006f4:	f7ff ff0e 	bl	8000514 <APP_SMProccess>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4313      	orrs	r3, r2
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	e7f7      	b.n	80006f4 <main+0x20>

08000704 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <SystemClock_Config+0xbc>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <SystemClock_Config+0xbc>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <SystemClock_Config+0xbc>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <SystemClock_Config+0xc0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a25      	ldr	r2, [pc, #148]	; (80007c4 <SystemClock_Config+0xc0>)
 8000730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <SystemClock_Config+0xc0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000742:	2301      	movs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000746:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800074a:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000756:	2308      	movs	r3, #8
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 800075a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000764:	2307      	movs	r3, #7
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4618      	mov	r0, r3
 800076e:	f003 f835 	bl	80037dc <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8000778:	f000 f826 	bl	80007c8 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800077c:	f002 ffde 	bl	800373c <HAL_PWREx_EnableOverDrive>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8000786:	f000 f81f 	bl	80007c8 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800078a:	230f      	movs	r3, #15
 800078c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000796:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007a6:	2105      	movs	r1, #5
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fa8f 	bl	8003ccc <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80007b4:	f000 f808 	bl	80007c8 <Error_Handler>
	}
}
 80007b8:	bf00      	nop
 80007ba:	3750      	adds	r7, #80	; 0x50
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
//	BSP_LED_On(LED2);
	while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x4>
	...

080007d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SystemInit+0x20>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <SystemInit+0x20>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80007f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800082c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007fa:	490e      	ldr	r1, [pc, #56]	; (8000834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000810:	4c0b      	ldr	r4, [pc, #44]	; (8000840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800081e:	f7ff ffd7 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f004 fad3 	bl	8004dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000826:	f7ff ff55 	bl	80006d4 <main>
  bx  lr    
 800082a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800082c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000838:	08004e78 	.word	0x08004e78
  ldr r2, =_sbss
 800083c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000840:	200000d0 	.word	0x200000d0

08000844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_Init+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <HAL_Init+0x40>)
 8000852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_Init+0x40>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_Init+0x40>)
 800085e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_Init+0x40>)
 800086a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 f92b 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	2000      	movs	r0, #0
 8000878:	f000 f808 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f002 fe9e 	bl	80035bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023c00 	.word	0x40023c00

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f943 	bl	8000b36 <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f90b 	bl	8000ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x20>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_IncTick+0x24>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008
 8000910:	20000034 	.word	0x20000034

08000914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_GetTick+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000034 	.word	0x20000034

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0b      	blt.n	80009ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4907      	ldr	r1, [pc, #28]	; (80009c8 <__NVIC_EnableIRQ+0x38>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a98:	d301      	bcc.n	8000a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00f      	b.n	8000abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <SysTick_Config+0x40>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f7ff ff8e 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff29 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af4:	f7ff ff3e 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f7ff ff8e 	bl	8000a20 <NVIC_EncodePriority>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff5d 	bl	80009cc <__NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff31 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffa2 	bl	8000a88 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d004      	beq.n	8000b6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e00c      	b.n	8000b86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2205      	movs	r2, #5
 8000b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 0201 	bic.w	r2, r2, #1
 8000b82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ba0:	b2db      	uxtb	r3, r3
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	e177      	b.n	8000ebc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f040 8166 	bne.w	8000eb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d005      	beq.n	8000c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d130      	bne.n	8000c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	f003 0201 	and.w	r2, r3, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d017      	beq.n	8000ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d123      	bne.n	8000cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	08da      	lsrs	r2, r3, #3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3208      	adds	r2, #8
 8000cee:	69b9      	ldr	r1, [r7, #24]
 8000cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0203 	and.w	r2, r3, #3
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 80c0 	beq.w	8000eb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b66      	ldr	r3, [pc, #408]	; (8000ed4 <HAL_GPIO_Init+0x324>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a65      	ldr	r2, [pc, #404]	; (8000ed4 <HAL_GPIO_Init+0x324>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b63      	ldr	r3, [pc, #396]	; (8000ed4 <HAL_GPIO_Init+0x324>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d52:	4a61      	ldr	r2, [pc, #388]	; (8000ed8 <HAL_GPIO_Init+0x328>)
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a58      	ldr	r2, [pc, #352]	; (8000edc <HAL_GPIO_Init+0x32c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d037      	beq.n	8000dee <HAL_GPIO_Init+0x23e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a57      	ldr	r2, [pc, #348]	; (8000ee0 <HAL_GPIO_Init+0x330>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d031      	beq.n	8000dea <HAL_GPIO_Init+0x23a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a56      	ldr	r2, [pc, #344]	; (8000ee4 <HAL_GPIO_Init+0x334>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d02b      	beq.n	8000de6 <HAL_GPIO_Init+0x236>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a55      	ldr	r2, [pc, #340]	; (8000ee8 <HAL_GPIO_Init+0x338>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d025      	beq.n	8000de2 <HAL_GPIO_Init+0x232>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a54      	ldr	r2, [pc, #336]	; (8000eec <HAL_GPIO_Init+0x33c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d01f      	beq.n	8000dde <HAL_GPIO_Init+0x22e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a53      	ldr	r2, [pc, #332]	; (8000ef0 <HAL_GPIO_Init+0x340>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d019      	beq.n	8000dda <HAL_GPIO_Init+0x22a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a52      	ldr	r2, [pc, #328]	; (8000ef4 <HAL_GPIO_Init+0x344>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x226>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a51      	ldr	r2, [pc, #324]	; (8000ef8 <HAL_GPIO_Init+0x348>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00d      	beq.n	8000dd2 <HAL_GPIO_Init+0x222>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a50      	ldr	r2, [pc, #320]	; (8000efc <HAL_GPIO_Init+0x34c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x21e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	; (8000f00 <HAL_GPIO_Init+0x350>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_GPIO_Init+0x21a>
 8000dc6:	2309      	movs	r3, #9
 8000dc8:	e012      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000dca:	230a      	movs	r3, #10
 8000dcc:	e010      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000dce:	2308      	movs	r3, #8
 8000dd0:	e00e      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	e00c      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	e00a      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000dda:	2305      	movs	r3, #5
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x240>
 8000dee:	2300      	movs	r3, #0
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e00:	4935      	ldr	r1, [pc, #212]	; (8000ed8 <HAL_GPIO_Init+0x328>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <HAL_GPIO_Init+0x354>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e32:	4a34      	ldr	r2, [pc, #208]	; (8000f04 <HAL_GPIO_Init+0x354>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e38:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <HAL_GPIO_Init+0x354>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e5c:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <HAL_GPIO_Init+0x354>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <HAL_GPIO_Init+0x354>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e86:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <HAL_GPIO_Init+0x354>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_GPIO_Init+0x354>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_GPIO_Init+0x354>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	f67f ae84 	bls.w	8000bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40013800 	.word	0x40013800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020c00 	.word	0x40020c00
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40021400 	.word	0x40021400
 8000ef4:	40021800 	.word	0x40021800
 8000ef8:	40021c00 	.word	0x40021c00
 8000efc:	40022000 	.word	0x40022000
 8000f00:	40022400 	.word	0x40022400
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e12b      	b.n	8001172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d106      	bne.n	8000f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f002 fb6c 	bl	800360c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2224      	movs	r2, #36	; 0x24
 8000f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f6c:	f003 f8a6 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8000f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a81      	ldr	r2, [pc, #516]	; (800117c <HAL_I2C_Init+0x274>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d807      	bhi.n	8000f8c <HAL_I2C_Init+0x84>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4a80      	ldr	r2, [pc, #512]	; (8001180 <HAL_I2C_Init+0x278>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	bf94      	ite	ls
 8000f84:	2301      	movls	r3, #1
 8000f86:	2300      	movhi	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	e006      	b.n	8000f9a <HAL_I2C_Init+0x92>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4a7d      	ldr	r2, [pc, #500]	; (8001184 <HAL_I2C_Init+0x27c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	bf94      	ite	ls
 8000f94:	2301      	movls	r3, #1
 8000f96:	2300      	movhi	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e0e7      	b.n	8001172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4a78      	ldr	r2, [pc, #480]	; (8001188 <HAL_I2C_Init+0x280>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	0c9b      	lsrs	r3, r3, #18
 8000fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a6a      	ldr	r2, [pc, #424]	; (800117c <HAL_I2C_Init+0x274>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d802      	bhi.n	8000fdc <HAL_I2C_Init+0xd4>
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	e009      	b.n	8000ff0 <HAL_I2C_Init+0xe8>
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	4a69      	ldr	r2, [pc, #420]	; (800118c <HAL_I2C_Init+0x284>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	099b      	lsrs	r3, r3, #6
 8000fee:	3301      	adds	r3, #1
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	495c      	ldr	r1, [pc, #368]	; (800117c <HAL_I2C_Init+0x274>)
 800100c:	428b      	cmp	r3, r1
 800100e:	d819      	bhi.n	8001044 <HAL_I2C_Init+0x13c>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1e59      	subs	r1, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fbb1 f3f3 	udiv	r3, r1, r3
 800101e:	1c59      	adds	r1, r3, #1
 8001020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001024:	400b      	ands	r3, r1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00a      	beq.n	8001040 <HAL_I2C_Init+0x138>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1e59      	subs	r1, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fbb1 f3f3 	udiv	r3, r1, r3
 8001038:	3301      	adds	r3, #1
 800103a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103e:	e051      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 8001040:	2304      	movs	r3, #4
 8001042:	e04f      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d111      	bne.n	8001070 <HAL_I2C_Init+0x168>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	1e58      	subs	r0, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6859      	ldr	r1, [r3, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	440b      	add	r3, r1
 800105a:	fbb0 f3f3 	udiv	r3, r0, r3
 800105e:	3301      	adds	r3, #1
 8001060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	e012      	b.n	8001096 <HAL_I2C_Init+0x18e>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1e58      	subs	r0, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6859      	ldr	r1, [r3, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	0099      	lsls	r1, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	fbb0 f3f3 	udiv	r3, r0, r3
 8001086:	3301      	adds	r3, #1
 8001088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf0c      	ite	eq
 8001090:	2301      	moveq	r3, #1
 8001092:	2300      	movne	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_I2C_Init+0x196>
 800109a:	2301      	movs	r3, #1
 800109c:	e022      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10e      	bne.n	80010c4 <HAL_I2C_Init+0x1bc>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1e58      	subs	r0, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6859      	ldr	r1, [r3, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	440b      	add	r3, r1
 80010b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010b8:	3301      	adds	r3, #1
 80010ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c2:	e00f      	b.n	80010e4 <HAL_I2C_Init+0x1dc>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1e58      	subs	r0, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6859      	ldr	r1, [r3, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	0099      	lsls	r1, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	6809      	ldr	r1, [r1, #0]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69da      	ldr	r2, [r3, #28]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6911      	ldr	r1, [r2, #16]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68d2      	ldr	r2, [r2, #12]
 800111e:	4311      	orrs	r1, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	430b      	orrs	r3, r1
 8001126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2220      	movs	r2, #32
 800115e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	000186a0 	.word	0x000186a0
 8001180:	001e847f 	.word	0x001e847f
 8001184:	003d08ff 	.word	0x003d08ff
 8001188:	431bde83 	.word	0x431bde83
 800118c:	10624dd3 	.word	0x10624dd3

08001190 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	461a      	mov	r2, r3
 800119c:	460b      	mov	r3, r1
 800119e:	817b      	strh	r3, [r7, #10]
 80011a0:	4613      	mov	r3, r2
 80011a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fbb6 	bl	8000914 <HAL_GetTick>
 80011a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b20      	cmp	r3, #32
 80011b4:	f040 80e0 	bne.w	8001378 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2319      	movs	r3, #25
 80011be:	2201      	movs	r2, #1
 80011c0:	4970      	ldr	r1, [pc, #448]	; (8001384 <HAL_I2C_Master_Transmit+0x1f4>)
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f001 ffd0 	bl	8003168 <I2C_WaitOnFlagUntilTimeout>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80011ce:	2302      	movs	r3, #2
 80011d0:	e0d3      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_I2C_Master_Transmit+0x50>
 80011dc:	2302      	movs	r3, #2
 80011de:	e0cc      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d007      	beq.n	8001206 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0201 	orr.w	r2, r2, #1
 8001204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2221      	movs	r2, #33	; 0x21
 800121a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2210      	movs	r2, #16
 8001222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	893a      	ldrh	r2, [r7, #8]
 8001236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123c:	b29a      	uxth	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_I2C_Master_Transmit+0x1f8>)
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001248:	8979      	ldrh	r1, [r7, #10]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	6a3a      	ldr	r2, [r7, #32]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f001 fd92 	bl	8002d78 <I2C_MasterRequestWrite>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e08d      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001274:	e066      	b.n	8001344 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	6a39      	ldr	r1, [r7, #32]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f002 f84a 	bl	8003314 <I2C_WaitOnTXEFlagUntilTimeout>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00d      	beq.n	80012a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	2b04      	cmp	r3, #4
 800128c:	d107      	bne.n	800129e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800129c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06b      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3b01      	subs	r3, #1
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ca:	3b01      	subs	r3, #1
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d11b      	bne.n	8001318 <HAL_I2C_Master_Transmit+0x188>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d017      	beq.n	8001318 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	6a39      	ldr	r1, [r7, #32]
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f002 f83a 	bl	8003396 <I2C_WaitOnBTFFlagUntilTimeout>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00d      	beq.n	8001344 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2b04      	cmp	r3, #4
 800132e:	d107      	bne.n	8001340 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800133e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e01a      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001348:	2b00      	cmp	r3, #0
 800134a:	d194      	bne.n	8001276 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800135a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2220      	movs	r2, #32
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001378:	2302      	movs	r3, #2
  }
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	00100002 	.word	0x00100002
 8001388:	ffff0000 	.word	0xffff0000

0800138c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	461a      	mov	r2, r3
 8001398:	460b      	mov	r3, r1
 800139a:	817b      	strh	r3, [r7, #10]
 800139c:	4613      	mov	r3, r2
 800139e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff fab8 	bl	8000914 <HAL_GetTick>
 80013a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b20      	cmp	r3, #32
 80013b0:	f040 820b 	bne.w	80017ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2319      	movs	r3, #25
 80013ba:	2201      	movs	r2, #1
 80013bc:	497c      	ldr	r1, [pc, #496]	; (80015b0 <HAL_I2C_Master_Receive+0x224>)
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f001 fed2 	bl	8003168 <I2C_WaitOnFlagUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80013ca:	2302      	movs	r3, #2
 80013cc:	e1fe      	b.n	80017cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_I2C_Master_Receive+0x50>
 80013d8:	2302      	movs	r3, #2
 80013da:	e1f7      	b.n	80017cc <HAL_I2C_Master_Receive+0x440>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d007      	beq.n	8001402 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0201 	orr.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001410:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2222      	movs	r2, #34	; 0x22
 8001416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2210      	movs	r2, #16
 800141e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	893a      	ldrh	r2, [r7, #8]
 8001432:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001438:	b29a      	uxth	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4a5c      	ldr	r2, [pc, #368]	; (80015b4 <HAL_I2C_Master_Receive+0x228>)
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001444:	8979      	ldrh	r1, [r7, #10]
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f001 fd16 	bl	8002e7c <I2C_MasterRequestRead>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e1b8      	b.n	80017cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145e:	2b00      	cmp	r3, #0
 8001460:	d113      	bne.n	800148a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	623b      	str	r3, [r7, #32]
 8001476:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e18c      	b.n	80017a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148e:	2b01      	cmp	r3, #1
 8001490:	d11b      	bne.n	80014ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e16c      	b.n	80017a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d11b      	bne.n	800150a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	e14c      	b.n	80017a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001518:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001530:	e138      	b.n	80017a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	2b03      	cmp	r3, #3
 8001538:	f200 80f1 	bhi.w	800171e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001540:	2b01      	cmp	r3, #1
 8001542:	d123      	bne.n	800158c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f001 ff97 	bl	800347c <I2C_WaitOnRXNEFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e139      	b.n	80017cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001574:	3b01      	subs	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001580:	b29b      	uxth	r3, r3
 8001582:	3b01      	subs	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	855a      	strh	r2, [r3, #42]	; 0x2a
 800158a:	e10b      	b.n	80017a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001590:	2b02      	cmp	r3, #2
 8001592:	d14e      	bne.n	8001632 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159a:	2200      	movs	r2, #0
 800159c:	4906      	ldr	r1, [pc, #24]	; (80015b8 <HAL_I2C_Master_Receive+0x22c>)
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f001 fde2 	bl	8003168 <I2C_WaitOnFlagUntilTimeout>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e10e      	b.n	80017cc <HAL_I2C_Master_Receive+0x440>
 80015ae:	bf00      	nop
 80015b0:	00100002 	.word	0x00100002
 80015b4:	ffff0000 	.word	0xffff0000
 80015b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	3b01      	subs	r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001630:	e0b8      	b.n	80017a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001638:	2200      	movs	r2, #0
 800163a:	4966      	ldr	r1, [pc, #408]	; (80017d4 <HAL_I2C_Master_Receive+0x448>)
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f001 fd93 	bl	8003168 <I2C_WaitOnFlagUntilTimeout>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0bf      	b.n	80017cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001694:	2200      	movs	r2, #0
 8001696:	494f      	ldr	r1, [pc, #316]	; (80017d4 <HAL_I2C_Master_Receive+0x448>)
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f001 fd65 	bl	8003168 <I2C_WaitOnFlagUntilTimeout>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e091      	b.n	80017cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001712:	b29b      	uxth	r3, r3
 8001714:	3b01      	subs	r3, #1
 8001716:	b29a      	uxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800171c:	e042      	b.n	80017a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f001 feaa 	bl	800347c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e04c      	b.n	80017cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	3b01      	subs	r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b04      	cmp	r3, #4
 8001770:	d118      	bne.n	80017a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	3b01      	subs	r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179a:	b29b      	uxth	r3, r3
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f aec2 	bne.w	8001532 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2220      	movs	r2, #32
 80017b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80017ca:	2302      	movs	r3, #2
  }
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	00010004 	.word	0x00010004

080017d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001800:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b10      	cmp	r3, #16
 8001806:	d003      	beq.n	8001810 <HAL_I2C_EV_IRQHandler+0x38>
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b40      	cmp	r3, #64	; 0x40
 800180c:	f040 80c1 	bne.w	8001992 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_I2C_EV_IRQHandler+0x6e>
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001830:	d003      	beq.n	800183a <HAL_I2C_EV_IRQHandler+0x62>
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001838:	d101      	bne.n	800183e <HAL_I2C_EV_IRQHandler+0x66>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_I2C_EV_IRQHandler+0x68>
 800183e:	2300      	movs	r3, #0
 8001840:	2b01      	cmp	r3, #1
 8001842:	f000 8132 	beq.w	8001aaa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00c      	beq.n	800186a <HAL_I2C_EV_IRQHandler+0x92>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	0a5b      	lsrs	r3, r3, #9
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f001 fe92 	bl	8003586 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fcdc 	bl	8002220 <I2C_Master_SB>
 8001868:	e092      	b.n	8001990 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <HAL_I2C_EV_IRQHandler+0xb2>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	0a5b      	lsrs	r3, r3, #9
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fd52 	bl	800232c <I2C_Master_ADD10>
 8001888:	e082      	b.n	8001990 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	085b      	lsrs	r3, r3, #1
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_I2C_EV_IRQHandler+0xd2>
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	0a5b      	lsrs	r3, r3, #9
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fd6c 	bl	8002380 <I2C_Master_ADDR>
 80018a8:	e072      	b.n	8001990 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03b      	beq.n	800192e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018c4:	f000 80f3 	beq.w	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	09db      	lsrs	r3, r3, #7
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00f      	beq.n	80018f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	0a9b      	lsrs	r3, r3, #10
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f94c 	bl	8001b8a <I2C_MasterTransmit_TXE>
 80018f2:	e04d      	b.n	8001990 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80d6 	beq.w	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	0a5b      	lsrs	r3, r3, #9
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80cf 	beq.w	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	2b21      	cmp	r3, #33	; 0x21
 8001914:	d103      	bne.n	800191e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f9d3 	bl	8001cc2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800191c:	e0c7      	b.n	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	2b40      	cmp	r3, #64	; 0x40
 8001922:	f040 80c4 	bne.w	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fa41 	bl	8001dae <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800192c:	e0bf      	b.n	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800193c:	f000 80b7 	beq.w	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	099b      	lsrs	r3, r3, #6
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00f      	beq.n	800196c <HAL_I2C_EV_IRQHandler+0x194>
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_I2C_EV_IRQHandler+0x194>
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d103      	bne.n	800196c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fab6 	bl	8001ed6 <I2C_MasterReceive_RXNE>
 800196a:	e011      	b.n	8001990 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 809a 	beq.w	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	0a5b      	lsrs	r3, r3, #9
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8093 	beq.w	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fb5f 	bl	800204c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800198e:	e08e      	b.n	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
 8001990:	e08d      	b.n	8001aae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e007      	b.n	80019b4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	085b      	lsrs	r3, r3, #1
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d012      	beq.n	80019e6 <HAL_I2C_EV_IRQHandler+0x20e>
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	0a5b      	lsrs	r3, r3, #9
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80019dc:	69b9      	ldr	r1, [r7, #24]
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 ff1d 	bl	800281e <I2C_Slave_ADDR>
 80019e4:	e066      	b.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_I2C_EV_IRQHandler+0x22e>
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	0a5b      	lsrs	r3, r3, #9
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 ff58 	bl	80028b4 <I2C_Slave_STOPF>
 8001a04:	e056      	b.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a06:	7bbb      	ldrb	r3, [r7, #14]
 8001a08:	2b21      	cmp	r3, #33	; 0x21
 8001a0a:	d002      	beq.n	8001a12 <HAL_I2C_EV_IRQHandler+0x23a>
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	2b29      	cmp	r3, #41	; 0x29
 8001a10:	d125      	bne.n	8001a5e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	09db      	lsrs	r3, r3, #7
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00f      	beq.n	8001a3e <HAL_I2C_EV_IRQHandler+0x266>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	0a9b      	lsrs	r3, r3, #10
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_I2C_EV_IRQHandler+0x266>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fe33 	bl	80026a2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a3c:	e039      	b.n	8001ab2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d033      	beq.n	8001ab2 <HAL_I2C_EV_IRQHandler+0x2da>
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	0a5b      	lsrs	r3, r3, #9
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d02d      	beq.n	8001ab2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fe60 	bl	800271c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a5c:	e029      	b.n	8001ab2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00f      	beq.n	8001a8a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	0a9b      	lsrs	r3, r3, #10
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fe6b 	bl	800275e <I2C_SlaveReceive_RXNE>
 8001a88:	e014      	b.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00e      	beq.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	0a5b      	lsrs	r3, r3, #9
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fe99 	bl	80027da <I2C_SlaveReceive_BTF>
 8001aa8:	e004      	b.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001aaa:	bf00      	nop
 8001aac:	e002      	b.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aae:	bf00      	nop
 8001ab0:	e000      	b.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ab2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001ab4:	3720      	adds	r7, #32
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
 8001b16:	4613      	mov	r3, r2
 8001b18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ba0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d150      	bne.n	8001c52 <I2C_MasterTransmit_TXE+0xc8>
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b21      	cmp	r3, #33	; 0x21
 8001bb4:	d14d      	bne.n	8001c52 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d01d      	beq.n	8001bf8 <I2C_MasterTransmit_TXE+0x6e>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d01a      	beq.n	8001bf8 <I2C_MasterTransmit_TXE+0x6e>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bc8:	d016      	beq.n	8001bf8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bd8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2211      	movs	r2, #17
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff62 	bl	8001aba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bf6:	e060      	b.n	8001cba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c06:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c16:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d107      	bne.n	8001c42 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff7d 	bl	8001b3a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c40:	e03b      	b.n	8001cba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff35 	bl	8001aba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c50:	e033      	b.n	8001cba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	2b21      	cmp	r3, #33	; 0x21
 8001c56:	d005      	beq.n	8001c64 <I2C_MasterTransmit_TXE+0xda>
 8001c58:	7bbb      	ldrb	r3, [r7, #14]
 8001c5a:	2b40      	cmp	r3, #64	; 0x40
 8001c5c:	d12d      	bne.n	8001cba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	2b22      	cmp	r3, #34	; 0x22
 8001c62:	d12a      	bne.n	8001cba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d108      	bne.n	8001c80 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001c7e:	e01c      	b.n	8001cba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b40      	cmp	r3, #64	; 0x40
 8001c8a:	d103      	bne.n	8001c94 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f88e 	bl	8001dae <I2C_MemoryTransmit_TXE_BTF>
}
 8001c92:	e012      	b.n	8001cba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001cb8:	e7ff      	b.n	8001cba <I2C_MasterTransmit_TXE+0x130>
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b21      	cmp	r3, #33	; 0x21
 8001cda:	d164      	bne.n	8001da6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d012      	beq.n	8001d0c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001d0a:	e04c      	b.n	8001da6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d01d      	beq.n	8001d4e <I2C_MasterTransmit_BTF+0x8c>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d01a      	beq.n	8001d4e <I2C_MasterTransmit_BTF+0x8c>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d1e:	d016      	beq.n	8001d4e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d2e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2211      	movs	r2, #17
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff feb7 	bl	8001aba <HAL_I2C_MasterTxCpltCallback>
}
 8001d4c:	e02b      	b.n	8001da6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d5c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	d107      	bne.n	8001d98 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff fed2 	bl	8001b3a <HAL_I2C_MemTxCpltCallback>
}
 8001d96:	e006      	b.n	8001da6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fe8a 	bl	8001aba <HAL_I2C_MasterTxCpltCallback>
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d11d      	bne.n	8001e02 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10b      	bne.n	8001de6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dde:	1c9a      	adds	r2, r3, #2
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001de4:	e073      	b.n	8001ece <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	121b      	asrs	r3, r3, #8
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e00:	e065      	b.n	8001ece <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10b      	bne.n	8001e22 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e20:	e055      	b.n	8001ece <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d151      	bne.n	8001ece <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	2b22      	cmp	r3, #34	; 0x22
 8001e2e:	d10d      	bne.n	8001e4c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e4a:	e040      	b.n	8001ece <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d015      	beq.n	8001e82 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b21      	cmp	r3, #33	; 0x21
 8001e5a:	d112      	bne.n	8001e82 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e80:	e025      	b.n	8001ece <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d120      	bne.n	8001ece <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b21      	cmp	r3, #33	; 0x21
 8001e90:	d11d      	bne.n	8001ece <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ea0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff fe36 	bl	8001b3a <HAL_I2C_MemTxCpltCallback>
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b22      	cmp	r3, #34	; 0x22
 8001ee8:	f040 80ac 	bne.w	8002044 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d921      	bls.n	8001f3e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	f040 808c 	bne.w	8002044 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001f3c:	e082      	b.n	8002044 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d075      	beq.n	8002032 <I2C_MasterReceive_RXNE+0x15c>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d002      	beq.n	8001f52 <I2C_MasterReceive_RXNE+0x7c>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d16f      	bne.n	8002032 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f001 fa60 	bl	8003418 <I2C_WaitOnSTOPRequestThroughIT>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d142      	bne.n	8001fe4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f7c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b40      	cmp	r3, #64	; 0x40
 8001fb6:	d10a      	bne.n	8001fce <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fdc1 	bl	8001b4e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fcc:	e03a      	b.n	8002044 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2212      	movs	r2, #18
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fd76 	bl	8001ace <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fe2:	e02f      	b.n	8002044 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ff2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fd99 	bl	8001b62 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002030:	e008      	b.n	8002044 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002040:	605a      	str	r2, [r3, #4]
}
 8002042:	e7ff      	b.n	8002044 <I2C_MasterReceive_RXNE+0x16e>
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b04      	cmp	r3, #4
 8002062:	d11b      	bne.n	800209c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002072:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800209a:	e0bd      	b.n	8002218 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d129      	bne.n	80020fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d00a      	beq.n	80020d2 <I2C_MasterReceive_BTF+0x86>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d007      	beq.n	80020d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020f8:	e08e      	b.n	8002218 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d176      	bne.n	80021f2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d002      	beq.n	8002110 <I2C_MasterReceive_BTF+0xc4>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b10      	cmp	r3, #16
 800210e:	d108      	bne.n	8002122 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e019      	b.n	8002156 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d002      	beq.n	800212e <I2C_MasterReceive_BTF+0xe2>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d108      	bne.n	8002140 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e00a      	b.n	8002156 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b10      	cmp	r3, #16
 8002144:	d007      	beq.n	8002156 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002154:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d10a      	bne.n	80021dc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fcba 	bl	8001b4e <HAL_I2C_MemRxCpltCallback>
}
 80021da:	e01d      	b.n	8002218 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2212      	movs	r2, #18
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fc6f 	bl	8001ace <HAL_I2C_MasterRxCpltCallback>
}
 80021f0:	e012      	b.n	8002218 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d117      	bne.n	8002264 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800224c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800224e:	e067      	b.n	8002320 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	b2da      	uxtb	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	611a      	str	r2, [r3, #16]
}
 8002262:	e05d      	b.n	8002320 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800226c:	d133      	bne.n	80022d6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b21      	cmp	r3, #33	; 0x21
 8002278:	d109      	bne.n	800228e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800228a:	611a      	str	r2, [r3, #16]
 800228c:	e008      	b.n	80022a0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	b2da      	uxtb	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <I2C_Master_SB+0x92>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d108      	bne.n	80022c4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d032      	beq.n	8002320 <I2C_Master_SB+0x100>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02d      	beq.n	8002320 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d2:	605a      	str	r2, [r3, #4]
}
 80022d4:	e024      	b.n	8002320 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10e      	bne.n	80022fc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	11db      	asrs	r3, r3, #7
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f003 0306 	and.w	r3, r3, #6
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f063 030f 	orn	r3, r3, #15
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	611a      	str	r2, [r3, #16]
}
 80022fa:	e011      	b.n	8002320 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10d      	bne.n	8002320 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	b29b      	uxth	r3, r3
 800230a:	11db      	asrs	r3, r3, #7
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f003 0306 	and.w	r3, r3, #6
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f063 030e 	orn	r3, r3, #14
 8002318:	b2da      	uxtb	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	b2da      	uxtb	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <I2C_Master_ADD10+0x26>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	2b00      	cmp	r3, #0
 8002350:	d108      	bne.n	8002364 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <I2C_Master_ADD10+0x48>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002372:	605a      	str	r2, [r3, #4]
  }
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002380:	b480      	push	{r7}
 8002382:	b091      	sub	sp, #68	; 0x44
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800238e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b22      	cmp	r3, #34	; 0x22
 80023a8:	f040 8169 	bne.w	800267e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <I2C_Master_ADDR+0x54>
 80023b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023b8:	2b40      	cmp	r3, #64	; 0x40
 80023ba:	d10b      	bne.n	80023d4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023bc:	2300      	movs	r3, #0
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	e160      	b.n	8002696 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11d      	bne.n	8002418 <I2C_Master_ADDR+0x98>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023e4:	d118      	bne.n	8002418 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	651a      	str	r2, [r3, #80]	; 0x50
 8002416:	e13e      	b.n	8002696 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d113      	bne.n	800244a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e115      	b.n	8002676 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 808a 	bne.w	800256a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800245c:	d137      	bne.n	80024ce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800247c:	d113      	bne.n	80024a6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	e0e7      	b.n	8002676 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	623b      	str	r3, [r7, #32]
 80024ba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e0d3      	b.n	8002676 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d02e      	beq.n	8002532 <I2C_Master_ADDR+0x1b2>
 80024d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d02b      	beq.n	8002532 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80024da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024dc:	2b12      	cmp	r3, #18
 80024de:	d102      	bne.n	80024e6 <I2C_Master_ADDR+0x166>
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d125      	bne.n	8002532 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d00e      	beq.n	800250a <I2C_Master_ADDR+0x18a>
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d00b      	beq.n	800250a <I2C_Master_ADDR+0x18a>
 80024f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d008      	beq.n	800250a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e007      	b.n	800251a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002518:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	e0a1      	b.n	8002676 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002540:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e085      	b.n	8002676 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d14d      	bne.n	8002610 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	2b04      	cmp	r3, #4
 8002578:	d016      	beq.n	80025a8 <I2C_Master_ADDR+0x228>
 800257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257c:	2b02      	cmp	r3, #2
 800257e:	d013      	beq.n	80025a8 <I2C_Master_ADDR+0x228>
 8002580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002582:	2b10      	cmp	r3, #16
 8002584:	d010      	beq.n	80025a8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002594:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e007      	b.n	80025b8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025b6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c6:	d117      	bne.n	80025f8 <I2C_Master_ADDR+0x278>
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025ce:	d00b      	beq.n	80025e8 <I2C_Master_ADDR+0x268>
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d008      	beq.n	80025e8 <I2C_Master_ADDR+0x268>
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d005      	beq.n	80025e8 <I2C_Master_ADDR+0x268>
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d002      	beq.n	80025e8 <I2C_Master_ADDR+0x268>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d107      	bne.n	80025f8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	e032      	b.n	8002676 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800261e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800262e:	d117      	bne.n	8002660 <I2C_Master_ADDR+0x2e0>
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002636:	d00b      	beq.n	8002650 <I2C_Master_ADDR+0x2d0>
 8002638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263a:	2b01      	cmp	r3, #1
 800263c:	d008      	beq.n	8002650 <I2C_Master_ADDR+0x2d0>
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	2b08      	cmp	r3, #8
 8002642:	d005      	beq.n	8002650 <I2C_Master_ADDR+0x2d0>
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	2b10      	cmp	r3, #16
 8002648:	d002      	beq.n	8002650 <I2C_Master_ADDR+0x2d0>
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	2b20      	cmp	r3, #32
 800264e:	d107      	bne.n	8002660 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800265e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800267c:	e00b      	b.n	8002696 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	e7ff      	b.n	8002696 <I2C_Master_ADDR+0x316>
 8002696:	bf00      	nop
 8002698:	3744      	adds	r7, #68	; 0x44
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02b      	beq.n	8002714 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d114      	bne.n	8002714 <I2C_SlaveTransmit_TXE+0x72>
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b29      	cmp	r3, #41	; 0x29
 80026ee:	d111      	bne.n	8002714 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2221      	movs	r2, #33	; 0x21
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2228      	movs	r2, #40	; 0x28
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff f9e7 	bl	8001ae2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d011      	beq.n	8002752 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d02c      	beq.n	80027d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d114      	bne.n	80027d2 <I2C_SlaveReceive_RXNE+0x74>
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b2a      	cmp	r3, #42	; 0x2a
 80027ac:	d111      	bne.n	80027d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2222      	movs	r2, #34	; 0x22
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2228      	movs	r2, #40	; 0x28
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff f992 	bl	8001af6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d012      	beq.n	8002812 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002828:	2300      	movs	r3, #0
 800282a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002838:	2b28      	cmp	r3, #40	; 0x28
 800283a:	d127      	bne.n	800288c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	09db      	lsrs	r3, r3, #7
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	81bb      	strh	r3, [r7, #12]
 800286e:	e002      	b.n	8002876 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800287e:	89ba      	ldrh	r2, [r7, #12]
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	4619      	mov	r1, r3
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff f940 	bl	8001b0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800288a:	e00e      	b.n	80028aa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288c:	2300      	movs	r3, #0
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002900:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800290c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002910:	d172      	bne.n	80029f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b22      	cmp	r3, #34	; 0x22
 8002916:	d002      	beq.n	800291e <I2C_Slave_STOPF+0x6a>
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b2a      	cmp	r3, #42	; 0x2a
 800291c:	d135      	bne.n	800298a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	b29a      	uxth	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0204 	orr.w	r2, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002950:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe f91b 	bl	8000b92 <HAL_DMA_GetState>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d049      	beq.n	80029f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	4a69      	ldr	r2, [pc, #420]	; (8002b0c <I2C_Slave_STOPF+0x258>)
 8002968:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe f8ed 	bl	8000b4e <HAL_DMA_Abort_IT>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d03d      	beq.n	80029f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002984:	4610      	mov	r0, r2
 8002986:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002988:	e035      	b.n	80029f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	b29a      	uxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f043 0204 	orr.w	r2, r3, #4
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f8e5 	bl	8000b92 <HAL_DMA_GetState>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d014      	beq.n	80029f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	4a4e      	ldr	r2, [pc, #312]	; (8002b0c <I2C_Slave_STOPF+0x258>)
 80029d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe f8b7 	bl	8000b4e <HAL_DMA_Abort_IT>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029f0:	4610      	mov	r0, r2
 80029f2:	4798      	blx	r3
 80029f4:	e000      	b.n	80029f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d03e      	beq.n	8002a80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d112      	bne.n	8002a36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d112      	bne.n	8002a6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0204 	orr.w	r2, r3, #4
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f843 	bl	8002b14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002a8e:	e039      	b.n	8002b04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b2a      	cmp	r3, #42	; 0x2a
 8002a94:	d109      	bne.n	8002aaa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2228      	movs	r2, #40	; 0x28
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff f826 	bl	8001af6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b28      	cmp	r3, #40	; 0x28
 8002ab4:	d111      	bne.n	8002ada <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <I2C_Slave_STOPF+0x25c>)
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff f827 	bl	8001b26 <HAL_I2C_ListenCpltCallback>
}
 8002ad8:	e014      	b.n	8002b04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	2b22      	cmp	r3, #34	; 0x22
 8002ae0:	d002      	beq.n	8002ae8 <I2C_Slave_STOPF+0x234>
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b22      	cmp	r3, #34	; 0x22
 8002ae6:	d10d      	bne.n	8002b04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fff9 	bl	8001af6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08003019 	.word	0x08003019
 8002b10:	ffff0000 	.word	0xffff0000

08002b14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b2c:	7bbb      	ldrb	r3, [r7, #14]
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d002      	beq.n	8002b38 <I2C_ITError+0x24>
 8002b32:	7bbb      	ldrb	r3, [r7, #14]
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d10a      	bne.n	8002b4e <I2C_ITError+0x3a>
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b22      	cmp	r3, #34	; 0x22
 8002b3c:	d107      	bne.n	8002b4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b54:	2b28      	cmp	r3, #40	; 0x28
 8002b56:	d107      	bne.n	8002b68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2228      	movs	r2, #40	; 0x28
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b66:	e015      	b.n	8002b94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b76:	d00a      	beq.n	8002b8e <I2C_ITError+0x7a>
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b60      	cmp	r3, #96	; 0x60
 8002b7c:	d007      	beq.n	8002b8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba2:	d162      	bne.n	8002c6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d020      	beq.n	8002c04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	4a6a      	ldr	r2, [pc, #424]	; (8002d70 <I2C_ITError+0x25c>)
 8002bc8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd ffbd 	bl	8000b4e <HAL_DMA_Abort_IT>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8089 	beq.w	8002cee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4798      	blx	r3
 8002c02:	e074      	b.n	8002cee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	4a59      	ldr	r2, [pc, #356]	; (8002d70 <I2C_ITError+0x25c>)
 8002c0a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd ff9c 	bl	8000b4e <HAL_DMA_Abort_IT>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d068      	beq.n	8002cee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d10b      	bne.n	8002c42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c64:	4610      	mov	r0, r2
 8002c66:	4798      	blx	r3
 8002c68:	e041      	b.n	8002cee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b60      	cmp	r3, #96	; 0x60
 8002c74:	d125      	bne.n	8002cc2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d10b      	bne.n	8002caa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe ff5b 	bl	8001b76 <HAL_I2C_AbortCpltCallback>
 8002cc0:	e015      	b.n	8002cee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d10b      	bne.n	8002ce8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fe ff3a 	bl	8001b62 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10e      	bne.n	8002d1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d113      	bne.n	8002d68 <I2C_ITError+0x254>
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b28      	cmp	r3, #40	; 0x28
 8002d44:	d110      	bne.n	8002d68 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <I2C_ITError+0x260>)
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fedf 	bl	8001b26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	08003019 	.word	0x08003019
 8002d74:	ffff0000 	.word	0xffff0000

08002d78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	460b      	mov	r3, r1
 8002d86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d006      	beq.n	8002da2 <I2C_MasterRequestWrite+0x2a>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d003      	beq.n	8002da2 <I2C_MasterRequestWrite+0x2a>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002da0:	d108      	bne.n	8002db4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e00b      	b.n	8002dcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	2b12      	cmp	r3, #18
 8002dba:	d107      	bne.n	8002dcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f9c5 	bl	8003168 <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df2:	d103      	bne.n	8002dfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e035      	b.n	8002e6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e08:	d108      	bne.n	8002e1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e18:	611a      	str	r2, [r3, #16]
 8002e1a:	e01b      	b.n	8002e54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e1c:	897b      	ldrh	r3, [r7, #10]
 8002e1e:	11db      	asrs	r3, r3, #7
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 0306 	and.w	r3, r3, #6
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f063 030f 	orn	r3, r3, #15
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	490e      	ldr	r1, [pc, #56]	; (8002e74 <I2C_MasterRequestWrite+0xfc>)
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f9eb 	bl	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e010      	b.n	8002e6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <I2C_MasterRequestWrite+0x100>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f9db 	bl	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	00010008 	.word	0x00010008
 8002e78:	00010002 	.word	0x00010002

08002e7c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d006      	beq.n	8002eb6 <I2C_MasterRequestRead+0x3a>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d003      	beq.n	8002eb6 <I2C_MasterRequestRead+0x3a>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb4:	d108      	bne.n	8002ec8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e00b      	b.n	8002ee0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	2b11      	cmp	r3, #17
 8002ece:	d107      	bne.n	8002ee0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ede:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f93b 	bl	8003168 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f06:	d103      	bne.n	8002f10 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e079      	b.n	8003008 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f1c:	d108      	bne.n	8002f30 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	611a      	str	r2, [r3, #16]
 8002f2e:	e05f      	b.n	8002ff0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f30:	897b      	ldrh	r3, [r7, #10]
 8002f32:	11db      	asrs	r3, r3, #7
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f003 0306 	and.w	r3, r3, #6
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f063 030f 	orn	r3, r3, #15
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4930      	ldr	r1, [pc, #192]	; (8003010 <I2C_MasterRequestRead+0x194>)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f961 	bl	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e054      	b.n	8003008 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f5e:	897b      	ldrh	r3, [r7, #10]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4929      	ldr	r1, [pc, #164]	; (8003014 <I2C_MasterRequestRead+0x198>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f951 	bl	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e044      	b.n	8003008 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f8d9 	bl	8003168 <I2C_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00d      	beq.n	8002fd8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fca:	d103      	bne.n	8002fd4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e017      	b.n	8003008 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002fd8:	897b      	ldrh	r3, [r7, #10]
 8002fda:	11db      	asrs	r3, r3, #7
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f003 0306 	and.w	r3, r3, #6
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f063 030e 	orn	r3, r3, #14
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4907      	ldr	r1, [pc, #28]	; (8003014 <I2C_MasterRequestRead+0x198>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f90d 	bl	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	00010008 	.word	0x00010008
 8003014:	00010002 	.word	0x00010002

08003018 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003032:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <I2C_DMAAbort+0x148>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	08db      	lsrs	r3, r3, #3
 8003038:	4a4a      	ldr	r2, [pc, #296]	; (8003164 <I2C_DMAAbort+0x14c>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0a1a      	lsrs	r2, r3, #8
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00da      	lsls	r2, r3, #3
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f043 0220 	orr.w	r2, r3, #32
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800305e:	e00a      	b.n	8003076 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3b01      	subs	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003074:	d0ea      	beq.n	800304c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	2200      	movs	r2, #0
 8003084:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	2200      	movs	r2, #0
 8003094:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2200      	movs	r2, #0
 80030aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	2200      	movs	r2, #0
 80030ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	2200      	movs	r2, #0
 80030ca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b60      	cmp	r3, #96	; 0x60
 80030e6:	d10e      	bne.n	8003106 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80030fe:	6978      	ldr	r0, [r7, #20]
 8003100:	f7fe fd39 	bl	8001b76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003104:	e027      	b.n	8003156 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800310c:	2b28      	cmp	r3, #40	; 0x28
 800310e:	d117      	bne.n	8003140 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800312e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2228      	movs	r2, #40	; 0x28
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800313e:	e007      	b.n	8003150 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003150:	6978      	ldr	r0, [r7, #20]
 8003152:	f7fe fd06 	bl	8001b62 <HAL_I2C_ErrorCallback>
}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000
 8003164:	14f8b589 	.word	0x14f8b589

08003168 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003178:	e025      	b.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d021      	beq.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003182:	f7fd fbc7 	bl	8000914 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d302      	bcc.n	8003198 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d116      	bne.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f043 0220 	orr.w	r2, r3, #32
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e023      	b.n	800320e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10d      	bne.n	80031ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	e00c      	b.n	8003206 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	43da      	mvns	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	429a      	cmp	r2, r3
 800320a:	d0b6      	beq.n	800317a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003224:	e051      	b.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003234:	d123      	bne.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003244:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800324e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0204 	orr.w	r2, r3, #4
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e046      	b.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d021      	beq.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003286:	f7fd fb45 	bl	8000914 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	d302      	bcc.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d116      	bne.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e020      	b.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d10c      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	43da      	mvns	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4013      	ands	r3, r2
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf14      	ite	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	2300      	moveq	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	e00b      	b.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	43da      	mvns	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4013      	ands	r3, r2
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d18d      	bne.n	8003226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003320:	e02d      	b.n	800337e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f900 	bl	8003528 <I2C_IsAcknowledgeFailed>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e02d      	b.n	800338e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d021      	beq.n	800337e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fd faeb 	bl	8000914 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d116      	bne.n	800337e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e007      	b.n	800338e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d1ca      	bne.n	8003322 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a2:	e02d      	b.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f8bf 	bl	8003528 <I2C_IsAcknowledgeFailed>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e02d      	b.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d021      	beq.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033bc:	f7fd faaa 	bl	8000914 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d302      	bcc.n	80033d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d116      	bne.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e007      	b.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d1ca      	bne.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	08db      	lsrs	r3, r3, #3
 800342a:	4a13      	ldr	r2, [pc, #76]	; (8003478 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	0a1a      	lsrs	r2, r3, #8
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b01      	subs	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0220 	orr.w	r2, r3, #32
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e008      	b.n	8003468 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003464:	d0e9      	beq.n	800343a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	20000000 	.word	0x20000000
 8003478:	14f8b589 	.word	0x14f8b589

0800347c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003488:	e042      	b.n	8003510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b10      	cmp	r3, #16
 8003496:	d119      	bne.n	80034cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0210 	mvn.w	r2, #16
 80034a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e029      	b.n	8003520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034cc:	f7fd fa22 	bl	8000914 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d302      	bcc.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e007      	b.n	8003520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d1b5      	bne.n	800348a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353e:	d11b      	bne.n	8003578 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003548:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0204 	orr.w	r2, r3, #4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003596:	d103      	bne.n	80035a0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800359e:	e007      	b.n	80035b0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035a8:	d102      	bne.n	80035b0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2208      	movs	r2, #8
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <HAL_MspInit+0x4c>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <HAL_MspInit+0x4c>)
 80035cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_MspInit+0x4c>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_MspInit+0x4c>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	4a08      	ldr	r2, [pc, #32]	; (8003608 <HAL_MspInit+0x4c>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6413      	str	r3, [r2, #64]	; 0x40
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_MspInit+0x4c>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800

0800360c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_I2C_MspInit+0x94>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d134      	bne.n	8003698 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <HAL_I2C_MspInit+0x98>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <HAL_I2C_MspInit+0x98>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_I2C_MspInit+0x98>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800364a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800364e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003650:	2312      	movs	r3, #18
 8003652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800365c:	2304      	movs	r3, #4
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4619      	mov	r1, r3
 8003666:	4810      	ldr	r0, [pc, #64]	; (80036a8 <HAL_I2C_MspInit+0x9c>)
 8003668:	f7fd faa2 	bl	8000bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_I2C_MspInit+0x98>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_I2C_MspInit+0x98>)
 8003676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800367a:	6413      	str	r3, [r2, #64]	; 0x40
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_I2C_MspInit+0x98>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003688:	2200      	movs	r2, #0
 800368a:	2100      	movs	r1, #0
 800368c:	201f      	movs	r0, #31
 800368e:	f7fd fa28 	bl	8000ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003692:	201f      	movs	r0, #31
 8003694:	f7fd fa41 	bl	8000b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003698:	bf00      	nop
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40005400 	.word	0x40005400
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020400 	.word	0x40020400

080036ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 0314 	add.w	r3, r7, #20
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_UART_MspInit+0x84>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d12c      	bne.n	8003728 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <HAL_UART_MspInit+0x88>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_UART_MspInit+0x88>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_UART_MspInit+0x88>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_UART_MspInit+0x88>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <HAL_UART_MspInit+0x88>)
 80036f4:	f043 0308 	orr.w	r3, r3, #8
 80036f8:	6313      	str	r3, [r2, #48]	; 0x30
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <HAL_UART_MspInit+0x88>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800370a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370c:	2302      	movs	r3, #2
 800370e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003714:	2303      	movs	r3, #3
 8003716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003718:	2307      	movs	r3, #7
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4619      	mov	r1, r3
 8003722:	4805      	ldr	r0, [pc, #20]	; (8003738 <HAL_UART_MspInit+0x8c>)
 8003724:	f7fd fa44 	bl	8000bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003728:	bf00      	nop
 800372a:	3728      	adds	r7, #40	; 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40004800 	.word	0x40004800
 8003734:	40023800 	.word	0x40023800
 8003738:	40020c00 	.word	0x40020c00

0800373c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_PWREx_EnableOverDrive+0x90>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003762:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003768:	f7fd f8d4 	bl	8000914 <HAL_GetTick>
 800376c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800376e:	e009      	b.n	8003784 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003770:	f7fd f8d0 	bl	8000914 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800377e:	d901      	bls.n	8003784 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e01f      	b.n	80037c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d1ee      	bne.n	8003770 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003798:	f7fd f8bc 	bl	8000914 <HAL_GetTick>
 800379c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800379e:	e009      	b.n	80037b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037a0:	f7fd f8b8 	bl	8000914 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ae:	d901      	bls.n	80037b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e007      	b.n	80037c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c0:	d1ee      	bne.n	80037a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	420e0040 	.word	0x420e0040
 80037d4:	40007000 	.word	0x40007000
 80037d8:	420e0044 	.word	0x420e0044

080037dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e267      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d075      	beq.n	80038e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037fa:	4b88      	ldr	r3, [pc, #544]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b04      	cmp	r3, #4
 8003804:	d00c      	beq.n	8003820 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003806:	4b85      	ldr	r3, [pc, #532]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380e:	2b08      	cmp	r3, #8
 8003810:	d112      	bne.n	8003838 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003812:	4b82      	ldr	r3, [pc, #520]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381e:	d10b      	bne.n	8003838 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	4b7e      	ldr	r3, [pc, #504]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d05b      	beq.n	80038e4 <HAL_RCC_OscConfig+0x108>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d157      	bne.n	80038e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e242      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003840:	d106      	bne.n	8003850 <HAL_RCC_OscConfig+0x74>
 8003842:	4b76      	ldr	r3, [pc, #472]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a75      	ldr	r2, [pc, #468]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e01d      	b.n	800388c <HAL_RCC_OscConfig+0xb0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0x98>
 800385a:	4b70      	ldr	r3, [pc, #448]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6f      	ldr	r2, [pc, #444]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6c      	ldr	r2, [pc, #432]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e00b      	b.n	800388c <HAL_RCC_OscConfig+0xb0>
 8003874:	4b69      	ldr	r3, [pc, #420]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a68      	ldr	r2, [pc, #416]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 800387a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a65      	ldr	r2, [pc, #404]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fd f83e 	bl	8000914 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800389c:	f7fd f83a 	bl	8000914 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	; 0x64
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e207      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	4b5b      	ldr	r3, [pc, #364]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0xc0>
 80038ba:	e014      	b.n	80038e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fd f82a 	bl	8000914 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fd f826 	bl	8000914 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e1f3      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d6:	4b51      	ldr	r3, [pc, #324]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0xe8>
 80038e2:	e000      	b.n	80038e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d063      	beq.n	80039ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038f2:	4b4a      	ldr	r3, [pc, #296]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fe:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003906:	2b08      	cmp	r3, #8
 8003908:	d11c      	bne.n	8003944 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390a:	4b44      	ldr	r3, [pc, #272]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d116      	bne.n	8003944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_RCC_OscConfig+0x152>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e1c7      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392e:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4937      	ldr	r1, [pc, #220]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	e03a      	b.n	80039ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d020      	beq.n	800398e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800394c:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <HAL_RCC_OscConfig+0x244>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fc ffdf 	bl	8000914 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395a:	f7fc ffdb 	bl	8000914 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e1a8      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4925      	ldr	r1, [pc, #148]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_OscConfig+0x244>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fc ffbe 	bl	8000914 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800399c:	f7fc ffba 	bl	8000914 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e187      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d036      	beq.n	8003a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_RCC_OscConfig+0x248>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fc ff9e 	bl	8000914 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039dc:	f7fc ff9a 	bl	8000914 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e167      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_OscConfig+0x240>)
 80039f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x200>
 80039fa:	e01b      	b.n	8003a34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_OscConfig+0x248>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a02:	f7fc ff87 	bl	8000914 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a08:	e00e      	b.n	8003a28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0a:	f7fc ff83 	bl	8000914 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d907      	bls.n	8003a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e150      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	42470000 	.word	0x42470000
 8003a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a28:	4b88      	ldr	r3, [pc, #544]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ea      	bne.n	8003a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8097 	beq.w	8003b70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a46:	4b81      	ldr	r3, [pc, #516]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	4b7d      	ldr	r3, [pc, #500]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a7c      	ldr	r2, [pc, #496]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
 8003a62:	4b7a      	ldr	r3, [pc, #488]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a72:	4b77      	ldr	r3, [pc, #476]	; (8003c50 <HAL_RCC_OscConfig+0x474>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d118      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7e:	4b74      	ldr	r3, [pc, #464]	; (8003c50 <HAL_RCC_OscConfig+0x474>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a73      	ldr	r2, [pc, #460]	; (8003c50 <HAL_RCC_OscConfig+0x474>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8a:	f7fc ff43 	bl	8000914 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fc ff3f 	bl	8000914 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e10c      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <HAL_RCC_OscConfig+0x474>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2ea>
 8003ab8:	4b64      	ldr	r3, [pc, #400]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a63      	ldr	r2, [pc, #396]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac4:	e01c      	b.n	8003b00 <HAL_RCC_OscConfig+0x324>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x30c>
 8003ace:	4b5f      	ldr	r3, [pc, #380]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	4a5e      	ldr	r2, [pc, #376]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ada:	4b5c      	ldr	r3, [pc, #368]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	4a5b      	ldr	r2, [pc, #364]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCC_OscConfig+0x324>
 8003ae8:	4b58      	ldr	r3, [pc, #352]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a57      	ldr	r2, [pc, #348]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
 8003af4:	4b55      	ldr	r3, [pc, #340]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	4a54      	ldr	r2, [pc, #336]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003afa:	f023 0304 	bic.w	r3, r3, #4
 8003afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fc ff04 	bl	8000914 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fc ff00 	bl	8000914 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0cb      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b26:	4b49      	ldr	r3, [pc, #292]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ee      	beq.n	8003b10 <HAL_RCC_OscConfig+0x334>
 8003b32:	e014      	b.n	8003b5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b34:	f7fc feee 	bl	8000914 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7fc feea 	bl	8000914 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0b5      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b52:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ee      	bne.n	8003b3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b64:	4b39      	ldr	r3, [pc, #228]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	4a38      	ldr	r2, [pc, #224]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a1 	beq.w	8003cbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b7a:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d05c      	beq.n	8003c40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d141      	bne.n	8003c12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <HAL_RCC_OscConfig+0x478>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fc febe 	bl	8000914 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fc feba 	bl	8000914 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e087      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	491b      	ldr	r1, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <HAL_RCC_OscConfig+0x478>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fc fe93 	bl	8000914 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fc fe8f 	bl	8000914 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e05c      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x416>
 8003c10:	e054      	b.n	8003cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <HAL_RCC_OscConfig+0x478>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fc fe7c 	bl	8000914 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fc fe78 	bl	8000914 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e045      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCC_OscConfig+0x470>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x444>
 8003c3e:	e03d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e038      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40007000 	.word	0x40007000
 8003c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x4ec>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d028      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d121      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d11a      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c88:	4013      	ands	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d111      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d107      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800

08003ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0cc      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b68      	ldr	r3, [pc, #416]	; (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d90c      	bls.n	8003d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	4b65      	ldr	r3, [pc, #404]	; (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b63      	ldr	r3, [pc, #396]	; (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0b8      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d020      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d20:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a58      	ldr	r2, [pc, #352]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d38:	4b53      	ldr	r3, [pc, #332]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	4a52      	ldr	r2, [pc, #328]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d44:	4b50      	ldr	r3, [pc, #320]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	494d      	ldr	r1, [pc, #308]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d044      	beq.n	8003dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d107      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6a:	4b47      	ldr	r3, [pc, #284]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d119      	bne.n	8003daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e07f      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d003      	beq.n	8003d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8a:	4b3f      	ldr	r3, [pc, #252]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e06f      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e067      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f023 0203 	bic.w	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4934      	ldr	r1, [pc, #208]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dbc:	f7fc fdaa 	bl	8000914 <HAL_GetTick>
 8003dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc4:	f7fc fda6 	bl	8000914 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e04f      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dda:	4b2b      	ldr	r3, [pc, #172]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 020c 	and.w	r2, r3, #12
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d1eb      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dec:	4b25      	ldr	r3, [pc, #148]	; (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d20c      	bcs.n	8003e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b20      	ldr	r3, [pc, #128]	; (8003e84 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e032      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e20:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4916      	ldr	r1, [pc, #88]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e3e:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	490e      	ldr	r1, [pc, #56]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e52:	f000 f821 	bl	8003e98 <HAL_RCC_GetSysClockFreq>
 8003e56:	4602      	mov	r2, r0
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	490a      	ldr	r1, [pc, #40]	; (8003e8c <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	5ccb      	ldrb	r3, [r1, r3]
 8003e66:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fc fd0a 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40023c00 	.word	0x40023c00
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	08004e50 	.word	0x08004e50
 8003e90:	20000000 	.word	0x20000000
 8003e94:	20000004 	.word	0x20000004

08003e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e9c:	b094      	sub	sp, #80	; 0x50
 8003e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb0:	4b79      	ldr	r3, [pc, #484]	; (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d00d      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	f200 80e1 	bhi.w	8004084 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x34>
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eca:	e0db      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b73      	ldr	r3, [pc, #460]	; (800409c <HAL_RCC_GetSysClockFreq+0x204>)
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ed0:	e0db      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ed2:	4b73      	ldr	r3, [pc, #460]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ed4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ed6:	e0d8      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ed8:	4b6f      	ldr	r3, [pc, #444]	; (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ee0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ee2:	4b6d      	ldr	r3, [pc, #436]	; (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d063      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eee:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	099b      	lsrs	r3, r3, #6
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f00:	633b      	str	r3, [r7, #48]	; 0x30
 8003f02:	2300      	movs	r3, #0
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
 8003f06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	f04f 0000 	mov.w	r0, #0
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	0159      	lsls	r1, r3, #5
 8003f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f1c:	0150      	lsls	r0, r2, #5
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4621      	mov	r1, r4
 8003f24:	1a51      	subs	r1, r2, r1
 8003f26:	6139      	str	r1, [r7, #16]
 8003f28:	4629      	mov	r1, r5
 8003f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	018b      	lsls	r3, r1, #6
 8003f40:	4651      	mov	r1, sl
 8003f42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f46:	4651      	mov	r1, sl
 8003f48:	018a      	lsls	r2, r1, #6
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f50:	4659      	mov	r1, fp
 8003f52:	eb63 0901 	sbc.w	r9, r3, r1
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f6a:	4690      	mov	r8, r2
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	4623      	mov	r3, r4
 8003f70:	eb18 0303 	adds.w	r3, r8, r3
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	462b      	mov	r3, r5
 8003f78:	eb49 0303 	adc.w	r3, r9, r3
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	024b      	lsls	r3, r1, #9
 8003f8e:	4621      	mov	r1, r4
 8003f90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f94:	4621      	mov	r1, r4
 8003f96:	024a      	lsls	r2, r1, #9
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fa8:	f7fc f920 	bl	80001ec <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb4:	e058      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb6:	4b38      	ldr	r3, [pc, #224]	; (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fc6:	623b      	str	r3, [r7, #32]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
 8003fcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	f04f 0000 	mov.w	r0, #0
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	0159      	lsls	r1, r3, #5
 8003fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe2:	0150      	lsls	r0, r2, #5
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4641      	mov	r1, r8
 8003fea:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fee:	4649      	mov	r1, r9
 8003ff0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004000:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004004:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004008:	ebb2 040a 	subs.w	r4, r2, sl
 800400c:	eb63 050b 	sbc.w	r5, r3, fp
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	00eb      	lsls	r3, r5, #3
 800401a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401e:	00e2      	lsls	r2, r4, #3
 8004020:	4614      	mov	r4, r2
 8004022:	461d      	mov	r5, r3
 8004024:	4643      	mov	r3, r8
 8004026:	18e3      	adds	r3, r4, r3
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	464b      	mov	r3, r9
 800402c:	eb45 0303 	adc.w	r3, r5, r3
 8004030:	607b      	str	r3, [r7, #4]
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800403e:	4629      	mov	r1, r5
 8004040:	028b      	lsls	r3, r1, #10
 8004042:	4621      	mov	r1, r4
 8004044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004048:	4621      	mov	r1, r4
 800404a:	028a      	lsls	r2, r1, #10
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004052:	2200      	movs	r2, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	61fa      	str	r2, [r7, #28]
 8004058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405c:	f7fc f8c6 	bl	80001ec <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4613      	mov	r3, r2
 8004066:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_GetSysClockFreq+0x200>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	3301      	adds	r3, #1
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004078:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004082:	e002      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCC_GetSysClockFreq+0x204>)
 8004086:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800408a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800408c:	4618      	mov	r0, r3
 800408e:	3750      	adds	r7, #80	; 0x50
 8004090:	46bd      	mov	sp, r7
 8004092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800
 800409c:	00f42400 	.word	0x00f42400
 80040a0:	007a1200 	.word	0x007a1200

080040a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000000 	.word	0x20000000

080040bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040c0:	f7ff fff0 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	0a9b      	lsrs	r3, r3, #10
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4903      	ldr	r1, [pc, #12]	; (80040e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40023800 	.word	0x40023800
 80040e0:	08004e60 	.word	0x08004e60

080040e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040e8:	f7ff ffdc 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	0b5b      	lsrs	r3, r3, #13
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4903      	ldr	r1, [pc, #12]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40023800 	.word	0x40023800
 8004108:	08004e60 	.word	0x08004e60

0800410c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e03f      	b.n	800419e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff faba 	bl	80036ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	; 0x24
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800414e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f929 	bl	80043a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b08a      	sub	sp, #40	; 0x28
 80041aa:	af02      	add	r7, sp, #8
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d17c      	bne.n	80042c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_UART_Transmit+0x2c>
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e075      	b.n	80042c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Transmit+0x3e>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e06e      	b.n	80042c2 <HAL_UART_Transmit+0x11c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2221      	movs	r2, #33	; 0x21
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041fa:	f7fc fb8b 	bl	8000914 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004214:	d108      	bne.n	8004228 <HAL_UART_Transmit+0x82>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d104      	bne.n	8004228 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	e003      	b.n	8004230 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004238:	e02a      	b.n	8004290 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2200      	movs	r2, #0
 8004242:	2180      	movs	r1, #128	; 0x80
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f840 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e036      	b.n	80042c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	3302      	adds	r3, #2
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	e007      	b.n	8004282 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	781a      	ldrb	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	3301      	adds	r3, #1
 8004280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1cf      	bne.n	800423a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2200      	movs	r2, #0
 80042a2:	2140      	movs	r1, #64	; 0x40
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f810 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e006      	b.n	80042c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3720      	adds	r7, #32
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b090      	sub	sp, #64	; 0x40
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042da:	e050      	b.n	800437e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d04c      	beq.n	800437e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0x30>
 80042ea:	f7fc fb13 	bl	8000914 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d241      	bcs.n	800437e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800431a:	637a      	str	r2, [r7, #52]	; 0x34
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3314      	adds	r3, #20
 8004334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	613b      	str	r3, [r7, #16]
   return(result);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3314      	adds	r3, #20
 800434c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800434e:	623a      	str	r2, [r7, #32]
 8004350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	69f9      	ldr	r1, [r7, #28]
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	61bb      	str	r3, [r7, #24]
   return(result);
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e00f      	b.n	800439e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4013      	ands	r3, r2
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	bf0c      	ite	eq
 800438e:	2301      	moveq	r3, #1
 8004390:	2300      	movne	r3, #0
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	429a      	cmp	r2, r3
 800439a:	d09f      	beq.n	80042dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3740      	adds	r7, #64	; 0x40
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ac:	b0c0      	sub	sp, #256	; 0x100
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	68d9      	ldr	r1, [r3, #12]
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	ea40 0301 	orr.w	r3, r0, r1
 80043d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004400:	f021 010c 	bic.w	r1, r1, #12
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800440e:	430b      	orrs	r3, r1
 8004410:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004422:	6999      	ldr	r1, [r3, #24]
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	ea40 0301 	orr.w	r3, r0, r1
 800442e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b8f      	ldr	r3, [pc, #572]	; (8004674 <UART_SetConfig+0x2cc>)
 8004438:	429a      	cmp	r2, r3
 800443a:	d005      	beq.n	8004448 <UART_SetConfig+0xa0>
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b8d      	ldr	r3, [pc, #564]	; (8004678 <UART_SetConfig+0x2d0>)
 8004444:	429a      	cmp	r2, r3
 8004446:	d104      	bne.n	8004452 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004448:	f7ff fe4c 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 800444c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004450:	e003      	b.n	800445a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004452:	f7ff fe33 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8004456:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004464:	f040 810c 	bne.w	8004680 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800446c:	2200      	movs	r2, #0
 800446e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004472:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004476:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800447a:	4622      	mov	r2, r4
 800447c:	462b      	mov	r3, r5
 800447e:	1891      	adds	r1, r2, r2
 8004480:	65b9      	str	r1, [r7, #88]	; 0x58
 8004482:	415b      	adcs	r3, r3
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004486:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800448a:	4621      	mov	r1, r4
 800448c:	eb12 0801 	adds.w	r8, r2, r1
 8004490:	4629      	mov	r1, r5
 8004492:	eb43 0901 	adc.w	r9, r3, r1
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044aa:	4690      	mov	r8, r2
 80044ac:	4699      	mov	r9, r3
 80044ae:	4623      	mov	r3, r4
 80044b0:	eb18 0303 	adds.w	r3, r8, r3
 80044b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044b8:	462b      	mov	r3, r5
 80044ba:	eb49 0303 	adc.w	r3, r9, r3
 80044be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044d6:	460b      	mov	r3, r1
 80044d8:	18db      	adds	r3, r3, r3
 80044da:	653b      	str	r3, [r7, #80]	; 0x50
 80044dc:	4613      	mov	r3, r2
 80044de:	eb42 0303 	adc.w	r3, r2, r3
 80044e2:	657b      	str	r3, [r7, #84]	; 0x54
 80044e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044ec:	f7fb fe7e 	bl	80001ec <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4b61      	ldr	r3, [pc, #388]	; (800467c <UART_SetConfig+0x2d4>)
 80044f6:	fba3 2302 	umull	r2, r3, r3, r2
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	011c      	lsls	r4, r3, #4
 80044fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004508:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800450c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004510:	4642      	mov	r2, r8
 8004512:	464b      	mov	r3, r9
 8004514:	1891      	adds	r1, r2, r2
 8004516:	64b9      	str	r1, [r7, #72]	; 0x48
 8004518:	415b      	adcs	r3, r3
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004520:	4641      	mov	r1, r8
 8004522:	eb12 0a01 	adds.w	sl, r2, r1
 8004526:	4649      	mov	r1, r9
 8004528:	eb43 0b01 	adc.w	fp, r3, r1
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004538:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800453c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004540:	4692      	mov	sl, r2
 8004542:	469b      	mov	fp, r3
 8004544:	4643      	mov	r3, r8
 8004546:	eb1a 0303 	adds.w	r3, sl, r3
 800454a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800454e:	464b      	mov	r3, r9
 8004550:	eb4b 0303 	adc.w	r3, fp, r3
 8004554:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004564:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004568:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800456c:	460b      	mov	r3, r1
 800456e:	18db      	adds	r3, r3, r3
 8004570:	643b      	str	r3, [r7, #64]	; 0x40
 8004572:	4613      	mov	r3, r2
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	647b      	str	r3, [r7, #68]	; 0x44
 800457a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800457e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004582:	f7fb fe33 	bl	80001ec <__aeabi_uldivmod>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4611      	mov	r1, r2
 800458c:	4b3b      	ldr	r3, [pc, #236]	; (800467c <UART_SetConfig+0x2d4>)
 800458e:	fba3 2301 	umull	r2, r3, r3, r1
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2264      	movs	r2, #100	; 0x64
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	1acb      	subs	r3, r1, r3
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045a2:	4b36      	ldr	r3, [pc, #216]	; (800467c <UART_SetConfig+0x2d4>)
 80045a4:	fba3 2302 	umull	r2, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045b0:	441c      	add	r4, r3
 80045b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045c4:	4642      	mov	r2, r8
 80045c6:	464b      	mov	r3, r9
 80045c8:	1891      	adds	r1, r2, r2
 80045ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80045cc:	415b      	adcs	r3, r3
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045d4:	4641      	mov	r1, r8
 80045d6:	1851      	adds	r1, r2, r1
 80045d8:	6339      	str	r1, [r7, #48]	; 0x30
 80045da:	4649      	mov	r1, r9
 80045dc:	414b      	adcs	r3, r1
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045ec:	4659      	mov	r1, fp
 80045ee:	00cb      	lsls	r3, r1, #3
 80045f0:	4651      	mov	r1, sl
 80045f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f6:	4651      	mov	r1, sl
 80045f8:	00ca      	lsls	r2, r1, #3
 80045fa:	4610      	mov	r0, r2
 80045fc:	4619      	mov	r1, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	4642      	mov	r2, r8
 8004602:	189b      	adds	r3, r3, r2
 8004604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004608:	464b      	mov	r3, r9
 800460a:	460a      	mov	r2, r1
 800460c:	eb42 0303 	adc.w	r3, r2, r3
 8004610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004620:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004624:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004628:	460b      	mov	r3, r1
 800462a:	18db      	adds	r3, r3, r3
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
 800462e:	4613      	mov	r3, r2
 8004630:	eb42 0303 	adc.w	r3, r2, r3
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004636:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800463a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800463e:	f7fb fdd5 	bl	80001ec <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4b0d      	ldr	r3, [pc, #52]	; (800467c <UART_SetConfig+0x2d4>)
 8004648:	fba3 1302 	umull	r1, r3, r3, r2
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	2164      	movs	r1, #100	; 0x64
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	3332      	adds	r3, #50	; 0x32
 800465a:	4a08      	ldr	r2, [pc, #32]	; (800467c <UART_SetConfig+0x2d4>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	f003 0207 	and.w	r2, r3, #7
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4422      	add	r2, r4
 800466e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004670:	e105      	b.n	800487e <UART_SetConfig+0x4d6>
 8004672:	bf00      	nop
 8004674:	40011000 	.word	0x40011000
 8004678:	40011400 	.word	0x40011400
 800467c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800468a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800468e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004692:	4642      	mov	r2, r8
 8004694:	464b      	mov	r3, r9
 8004696:	1891      	adds	r1, r2, r2
 8004698:	6239      	str	r1, [r7, #32]
 800469a:	415b      	adcs	r3, r3
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046a2:	4641      	mov	r1, r8
 80046a4:	1854      	adds	r4, r2, r1
 80046a6:	4649      	mov	r1, r9
 80046a8:	eb43 0501 	adc.w	r5, r3, r1
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	00eb      	lsls	r3, r5, #3
 80046b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ba:	00e2      	lsls	r2, r4, #3
 80046bc:	4614      	mov	r4, r2
 80046be:	461d      	mov	r5, r3
 80046c0:	4643      	mov	r3, r8
 80046c2:	18e3      	adds	r3, r4, r3
 80046c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046c8:	464b      	mov	r3, r9
 80046ca:	eb45 0303 	adc.w	r3, r5, r3
 80046ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046ee:	4629      	mov	r1, r5
 80046f0:	008b      	lsls	r3, r1, #2
 80046f2:	4621      	mov	r1, r4
 80046f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f8:	4621      	mov	r1, r4
 80046fa:	008a      	lsls	r2, r1, #2
 80046fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004700:	f7fb fd74 	bl	80001ec <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4b60      	ldr	r3, [pc, #384]	; (800488c <UART_SetConfig+0x4e4>)
 800470a:	fba3 2302 	umull	r2, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	011c      	lsls	r4, r3, #4
 8004712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800471c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004720:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004724:	4642      	mov	r2, r8
 8004726:	464b      	mov	r3, r9
 8004728:	1891      	adds	r1, r2, r2
 800472a:	61b9      	str	r1, [r7, #24]
 800472c:	415b      	adcs	r3, r3
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004734:	4641      	mov	r1, r8
 8004736:	1851      	adds	r1, r2, r1
 8004738:	6139      	str	r1, [r7, #16]
 800473a:	4649      	mov	r1, r9
 800473c:	414b      	adcs	r3, r1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800474c:	4659      	mov	r1, fp
 800474e:	00cb      	lsls	r3, r1, #3
 8004750:	4651      	mov	r1, sl
 8004752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004756:	4651      	mov	r1, sl
 8004758:	00ca      	lsls	r2, r1, #3
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	4603      	mov	r3, r0
 8004760:	4642      	mov	r2, r8
 8004762:	189b      	adds	r3, r3, r2
 8004764:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004768:	464b      	mov	r3, r9
 800476a:	460a      	mov	r2, r1
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	67bb      	str	r3, [r7, #120]	; 0x78
 800477e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800478c:	4649      	mov	r1, r9
 800478e:	008b      	lsls	r3, r1, #2
 8004790:	4641      	mov	r1, r8
 8004792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004796:	4641      	mov	r1, r8
 8004798:	008a      	lsls	r2, r1, #2
 800479a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800479e:	f7fb fd25 	bl	80001ec <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4b39      	ldr	r3, [pc, #228]	; (800488c <UART_SetConfig+0x4e4>)
 80047a8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	2164      	movs	r1, #100	; 0x64
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	3332      	adds	r3, #50	; 0x32
 80047ba:	4a34      	ldr	r2, [pc, #208]	; (800488c <UART_SetConfig+0x4e4>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c6:	441c      	add	r4, r3
 80047c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047cc:	2200      	movs	r2, #0
 80047ce:	673b      	str	r3, [r7, #112]	; 0x70
 80047d0:	677a      	str	r2, [r7, #116]	; 0x74
 80047d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047d6:	4642      	mov	r2, r8
 80047d8:	464b      	mov	r3, r9
 80047da:	1891      	adds	r1, r2, r2
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	415b      	adcs	r3, r3
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e6:	4641      	mov	r1, r8
 80047e8:	1851      	adds	r1, r2, r1
 80047ea:	6039      	str	r1, [r7, #0]
 80047ec:	4649      	mov	r1, r9
 80047ee:	414b      	adcs	r3, r1
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047fe:	4659      	mov	r1, fp
 8004800:	00cb      	lsls	r3, r1, #3
 8004802:	4651      	mov	r1, sl
 8004804:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004808:	4651      	mov	r1, sl
 800480a:	00ca      	lsls	r2, r1, #3
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	4603      	mov	r3, r0
 8004812:	4642      	mov	r2, r8
 8004814:	189b      	adds	r3, r3, r2
 8004816:	66bb      	str	r3, [r7, #104]	; 0x68
 8004818:	464b      	mov	r3, r9
 800481a:	460a      	mov	r2, r1
 800481c:	eb42 0303 	adc.w	r3, r2, r3
 8004820:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	663b      	str	r3, [r7, #96]	; 0x60
 800482c:	667a      	str	r2, [r7, #100]	; 0x64
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800483a:	4649      	mov	r1, r9
 800483c:	008b      	lsls	r3, r1, #2
 800483e:	4641      	mov	r1, r8
 8004840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004844:	4641      	mov	r1, r8
 8004846:	008a      	lsls	r2, r1, #2
 8004848:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800484c:	f7fb fcce 	bl	80001ec <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4b0d      	ldr	r3, [pc, #52]	; (800488c <UART_SetConfig+0x4e4>)
 8004856:	fba3 1302 	umull	r1, r3, r3, r2
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	2164      	movs	r1, #100	; 0x64
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	3332      	adds	r3, #50	; 0x32
 8004868:	4a08      	ldr	r2, [pc, #32]	; (800488c <UART_SetConfig+0x4e4>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	f003 020f 	and.w	r2, r3, #15
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4422      	add	r2, r4
 800487c:	609a      	str	r2, [r3, #8]
}
 800487e:	bf00      	nop
 8004880:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004884:	46bd      	mov	sp, r7
 8004886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488a:	bf00      	nop
 800488c:	51eb851f 	.word	0x51eb851f

08004890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004894:	e7fe      	b.n	8004894 <NMI_Handler+0x4>

08004896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004896:	b480      	push	{r7}
 8004898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800489a:	e7fe      	b.n	800489a <HardFault_Handler+0x4>

0800489c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048a0:	e7fe      	b.n	80048a0 <MemManage_Handler+0x4>

080048a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048a6:	e7fe      	b.n	80048a6 <BusFault_Handler+0x4>

080048a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048ac:	e7fe      	b.n	80048ac <UsageFault_Handler+0x4>

080048ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048ce:	bf00      	nop
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048dc:	f7fc f806 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <I2C1_EV_IRQHandler+0x10>)
 80048ea:	f7fc ff75 	bl	80017d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	2000007c 	.word	0x2000007c

080048f8 <DEV_UARTSendStringSize>:
/**
  * @brief  Send String and size via UART
  * @param  uint8_t *, uint16_t
  * @retval Void
  */
retType DEV_UARTSendStringSize(uint8_t * pstring, uint16_t size){
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	807b      	strh	r3, [r7, #2]

	retType ret = API_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]

	if(size == 0) return API_ERROR;
 8004908:	887b      	ldrh	r3, [r7, #2]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <DEV_UARTSendStringSize+0x1a>
 800490e:	2301      	movs	r3, #1
 8004910:	e00c      	b.n	800492c <DEV_UARTSendStringSize+0x34>
	ret |= HAL_UART_Transmit(&huart, pstring, size, TIME_OUT);
 8004912:	887a      	ldrh	r2, [r7, #2]
 8004914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4806      	ldr	r0, [pc, #24]	; (8004934 <DEV_UARTSendStringSize+0x3c>)
 800491c:	f7ff fc43 	bl	80041a6 <HAL_UART_Transmit>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	4313      	orrs	r3, r2
 8004928:	73fb      	strb	r3, [r7, #15]

	return ret;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000038 	.word	0x20000038

08004938 <DEV_UARTInit>:
/**
  * @brief  Configurate UART port
  * @param  Void
  * @retval bool_t
  */
retType DEV_UARTInit(void){
 8004938:	b5b0      	push	{r4, r5, r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]

	uint8_t str[] = "UART INITIALIZED:\n";
 8004942:	4b1e      	ldr	r3, [pc, #120]	; (80049bc <DEV_UARTInit+0x84>)
 8004944:	1d3c      	adds	r4, r7, #4
 8004946:	461d      	mov	r5, r3
 8004948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800494a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	8022      	strh	r2, [r4, #0]
 8004952:	3402      	adds	r4, #2
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	7023      	strb	r3, [r4, #0]

	huart.Instance = USARTx;
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <DEV_UARTInit+0x88>)
 800495a:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <DEV_UARTInit+0x8c>)
 800495c:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate= UART_BAUDRATE;
 800495e:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <DEV_UARTInit+0x88>)
 8004960:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004964:	605a      	str	r2, [r3, #4]
	huart.Init.HwFlowCtl = UART_HWFLOWCTL;
 8004966:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <DEV_UARTInit+0x88>)
 8004968:	2200      	movs	r2, #0
 800496a:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE;
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <DEV_UARTInit+0x88>)
 800496e:	220c      	movs	r2, #12
 8004970:	615a      	str	r2, [r3, #20]
	huart.Init.OverSampling = UART_OVERSAMPLING;
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <DEV_UARTInit+0x88>)
 8004974:	2200      	movs	r2, #0
 8004976:	61da      	str	r2, [r3, #28]
	huart.Init.Parity = UART_PARITY;
 8004978:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <DEV_UARTInit+0x88>)
 800497a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800497e:	611a      	str	r2, [r3, #16]
	huart.Init.StopBits = UART_STOPBITS;
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <DEV_UARTInit+0x88>)
 8004982:	2200      	movs	r2, #0
 8004984:	60da      	str	r2, [r3, #12]
	huart.Init.WordLength = UART_WORDLENGTH;
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <DEV_UARTInit+0x88>)
 8004988:	2200      	movs	r2, #0
 800498a:	609a      	str	r2, [r3, #8]

	ret |= HAL_UART_Init(&huart);
 800498c:	480c      	ldr	r0, [pc, #48]	; (80049c0 <DEV_UARTInit+0x88>)
 800498e:	f7ff fbbd 	bl	800410c <HAL_UART_Init>
 8004992:	4603      	mov	r3, r0
 8004994:	461a      	mov	r2, r3
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	4313      	orrs	r3, r2
 800499a:	75fb      	strb	r3, [r7, #23]
	if(ret != API_OK) return ret;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <DEV_UARTInit+0x6e>
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
 80049a4:	e005      	b.n	80049b2 <DEV_UARTInit+0x7a>
	else DEV_UARTSendStringSize(str, sizeof(str));
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	2113      	movs	r1, #19
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff ffa4 	bl	80048f8 <DEV_UARTSendStringSize>
	return ret;
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bdb0      	pop	{r4, r5, r7, pc}
 80049ba:	bf00      	nop
 80049bc:	08004e3c 	.word	0x08004e3c
 80049c0:	20000038 	.word	0x20000038
 80049c4:	40004800 	.word	0x40004800

080049c8 <APP_MPU9250Write>:

static uint8_t gyro_convert(uint8_t axis);
static uint8_t accl_convert(uint8_t axis);
static uint8_t temp_convert(uint8_t temp);

retType APP_MPU9250Write(uint8_t addr2write, uint8_t * pdata, uint16_t size){
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	6039      	str	r1, [r7, #0]
 80049d2:	71fb      	strb	r3, [r7, #7]
 80049d4:	4613      	mov	r3, r2
 80049d6:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	73fb      	strb	r3, [r7, #15]

	if(size <= 0) ret = API_ERROR;
 80049dc:	88bb      	ldrh	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <APP_MPU9250Write+0x1e>
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <APP_MPU9250Write+0x28>
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	e016      	b.n	8004a1e <APP_MPU9250Write+0x56>

	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2write, 1);
 80049f0:	1dfb      	adds	r3, r7, #7
 80049f2:	2201      	movs	r2, #1
 80049f4:	4619      	mov	r1, r3
 80049f6:	2068      	movs	r0, #104	; 0x68
 80049f8:	f000 f9a8 	bl	8004d4c <DEV_I2CWrite>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, pdata, size);
 8004a06:	88bb      	ldrh	r3, [r7, #4]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6839      	ldr	r1, [r7, #0]
 8004a0c:	2068      	movs	r0, #104	; 0x68
 8004a0e:	f000 f99d 	bl	8004d4c <DEV_I2CWrite>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461a      	mov	r2, r3
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <APP_MPU9250Read>:

retType APP_MPU9250Read(uint8_t addr2read, uint8_t * pdata, uint16_t size){
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	6039      	str	r1, [r7, #0]
 8004a30:	71fb      	strb	r3, [r7, #7]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]

	if(size <= 0) ret = API_ERROR;
 8004a3a:	88bb      	ldrh	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <APP_MPU9250Read+0x1e>
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
	if(ret != API_OK) return ret;
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <APP_MPU9250Read+0x28>
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	e016      	b.n	8004a7c <APP_MPU9250Read+0x56>

	ret |= DEV_I2CWrite(MPU9250_SLAVEADDR, &addr2read, 1);
 8004a4e:	1dfb      	adds	r3, r7, #7
 8004a50:	2201      	movs	r2, #1
 8004a52:	4619      	mov	r1, r3
 8004a54:	2068      	movs	r0, #104	; 0x68
 8004a56:	f000 f979 	bl	8004d4c <DEV_I2CWrite>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	73fb      	strb	r3, [r7, #15]
	ret |= DEV_I2CRead(MPU9250_SLAVEADDR, pdata, size);
 8004a64:	88bb      	ldrh	r3, [r7, #4]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	2068      	movs	r0, #104	; 0x68
 8004a6c:	f000 f98e 	bl	8004d8c <DEV_I2CRead>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]

}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <APP_MPU9250Init>:

retType APP_MPU9250Init(void){
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	71fb      	strb	r3, [r7, #7]
//	uint8_t *data;

	ret |= APP_MPU9250Write(MPU9250_PWR_MGMT_1, (uint8_t*)0x1, 1);
 8004a8e:	2201      	movs	r2, #1
 8004a90:	2101      	movs	r1, #1
 8004a92:	206b      	movs	r0, #107	; 0x6b
 8004a94:	f7ff ff98 	bl	80049c8 <APP_MPU9250Write>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <APP_MPU9250Init+0x28>
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	e02d      	b.n	8004b08 <APP_MPU9250Init+0x84>
	ret |= APP_MPU9250Write(MPU9250_GYRO_CONFIG, (uint8_t*)0x8, 1);
 8004aac:	2201      	movs	r2, #1
 8004aae:	2108      	movs	r1, #8
 8004ab0:	201b      	movs	r0, #27
 8004ab2:	f7ff ff89 	bl	80049c8 <APP_MPU9250Write>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	461a      	mov	r2, r3
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_1, (uint8_t*)0x8, 1);
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	2108      	movs	r1, #8
 8004ac4:	201c      	movs	r0, #28
 8004ac6:	f7ff ff7f 	bl	80049c8 <APP_MPU9250Write>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	71fb      	strb	r3, [r7, #7]
	ret |= APP_MPU9250Write(MPU9250_ACCEL_CONFIG_2, (uint8_t*)0x5, 1);
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	2105      	movs	r1, #5
 8004ad8:	201d      	movs	r0, #29
 8004ada:	f7ff ff75 	bl	80049c8 <APP_MPU9250Write>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
	if(ret != API_OK) return ret;
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <APP_MPU9250Init+0x6e>
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	e00a      	b.n	8004b08 <APP_MPU9250Init+0x84>
	ret |= APP_MPU9250Write(MPU9250_CONFIG_AD, (uint8_t*)0x5, 1);
 8004af2:	2201      	movs	r2, #1
 8004af4:	2105      	movs	r1, #5
 8004af6:	201a      	movs	r0, #26
 8004af8:	f7ff ff66 	bl	80049c8 <APP_MPU9250Write>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461a      	mov	r2, r3
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	71fb      	strb	r3, [r7, #7]
	return ret;
 8004b06:	79fb      	ldrb	r3, [r7, #7]

}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <APP_MPU9250ReadGyro>:

retType APP_MPU9250ReadGyro(axis_t * gyro){
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	73fb      	strb	r3, [r7, #15]
	uint8_t aux_x = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	73bb      	strb	r3, [r7, #14]
	uint8_t aux_y = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	737b      	strb	r3, [r7, #13]
	uint8_t aux_z = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	733b      	strb	r3, [r7, #12]

	ret |= APP_MPU9250Read(MPU9250_GYRO_XOUT_H, &aux_x, 2);
 8004b28:	f107 030e 	add.w	r3, r7, #14
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	2043      	movs	r0, #67	; 0x43
 8004b32:	f7ff ff78 	bl	8004a26 <APP_MPU9250Read>
 8004b36:	4603      	mov	r3, r0
 8004b38:	461a      	mov	r2, r3
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_YOUT_H, &aux_y, 2);
 8004b40:	f107 030d 	add.w	r3, r7, #13
 8004b44:	2202      	movs	r2, #2
 8004b46:	4619      	mov	r1, r3
 8004b48:	2045      	movs	r0, #69	; 0x45
 8004b4a:	f7ff ff6c 	bl	8004a26 <APP_MPU9250Read>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	461a      	mov	r2, r3
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_GYRO_ZOUT_H, &aux_z, 2);
 8004b58:	f107 030c 	add.w	r3, r7, #12
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	2047      	movs	r0, #71	; 0x47
 8004b62:	f7ff ff60 	bl	8004a26 <APP_MPU9250Read>
 8004b66:	4603      	mov	r3, r0
 8004b68:	461a      	mov	r2, r3
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	73fb      	strb	r3, [r7, #15]

	*gyro->x = gyro_convert(aux_x);
 8004b70:	7bba      	ldrb	r2, [r7, #14]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681c      	ldr	r4, [r3, #0]
 8004b76:	4610      	mov	r0, r2
 8004b78:	f000 f885 	bl	8004c86 <gyro_convert>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	7023      	strb	r3, [r4, #0]
	*gyro->y = gyro_convert(aux_y);
 8004b80:	7b7a      	ldrb	r2, [r7, #13]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685c      	ldr	r4, [r3, #4]
 8004b86:	4610      	mov	r0, r2
 8004b88:	f000 f87d 	bl	8004c86 <gyro_convert>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	7023      	strb	r3, [r4, #0]
	*gyro->z = gyro_convert(aux_z);
 8004b90:	7b3a      	ldrb	r2, [r7, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689c      	ldr	r4, [r3, #8]
 8004b96:	4610      	mov	r0, r2
 8004b98:	f000 f875 	bl	8004c86 <gyro_convert>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	7023      	strb	r3, [r4, #0]
	return ret;
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd90      	pop	{r4, r7, pc}

08004baa <APP_MPU9250ReadAccl>:

retType APP_MPU9250ReadAccl(axis_t * accl){
 8004baa:	b590      	push	{r4, r7, lr}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
	uint8_t aux_x = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73bb      	strb	r3, [r7, #14]
	uint8_t aux_y = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	737b      	strb	r3, [r7, #13]
	uint8_t aux_z = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	733b      	strb	r3, [r7, #12]

	ret |= APP_MPU9250Read(MPU9250_ACCEL_XOUT_H, &aux_x, 2);
 8004bc2:	f107 030e 	add.w	r3, r7, #14
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	4619      	mov	r1, r3
 8004bca:	203b      	movs	r0, #59	; 0x3b
 8004bcc:	f7ff ff2b 	bl	8004a26 <APP_MPU9250Read>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_YOUT_H, &aux_y, 2);
 8004bda:	f107 030d 	add.w	r3, r7, #13
 8004bde:	2202      	movs	r2, #2
 8004be0:	4619      	mov	r1, r3
 8004be2:	203d      	movs	r0, #61	; 0x3d
 8004be4:	f7ff ff1f 	bl	8004a26 <APP_MPU9250Read>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	73fb      	strb	r3, [r7, #15]
	ret |= APP_MPU9250Read(MPU9250_ACCEL_ZOUT_H, &aux_z, 2);
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	203f      	movs	r0, #63	; 0x3f
 8004bfc:	f7ff ff13 	bl	8004a26 <APP_MPU9250Read>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	73fb      	strb	r3, [r7, #15]

	*accl->x = accl_convert(aux_x);
 8004c0a:	7bba      	ldrb	r2, [r7, #14]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681c      	ldr	r4, [r3, #0]
 8004c10:	4610      	mov	r0, r2
 8004c12:	f000 f848 	bl	8004ca6 <accl_convert>
 8004c16:	4603      	mov	r3, r0
 8004c18:	7023      	strb	r3, [r4, #0]
	*accl->y = accl_convert(aux_y);
 8004c1a:	7b7a      	ldrb	r2, [r7, #13]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685c      	ldr	r4, [r3, #4]
 8004c20:	4610      	mov	r0, r2
 8004c22:	f000 f840 	bl	8004ca6 <accl_convert>
 8004c26:	4603      	mov	r3, r0
 8004c28:	7023      	strb	r3, [r4, #0]
	*accl->z = accl_convert(aux_z);
 8004c2a:	7b3a      	ldrb	r2, [r7, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689c      	ldr	r4, [r3, #8]
 8004c30:	4610      	mov	r0, r2
 8004c32:	f000 f838 	bl	8004ca6 <accl_convert>
 8004c36:	4603      	mov	r3, r0
 8004c38:	7023      	strb	r3, [r4, #0]
	return ret;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd90      	pop	{r4, r7, pc}

08004c44 <APP_MPU9250ReadTemp>:

retType APP_MPU9250ReadTemp(uint8_t * temp){
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]

	retType ret = API_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]
	uint8_t aux_temp = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73bb      	strb	r3, [r7, #14]

	ret |= APP_MPU9250Read(MPU9250_TEMP_OUT_H, &aux_temp, 2);
 8004c54:	f107 030e 	add.w	r3, r7, #14
 8004c58:	2202      	movs	r2, #2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	2041      	movs	r0, #65	; 0x41
 8004c5e:	f7ff fee2 	bl	8004a26 <APP_MPU9250Read>
 8004c62:	4603      	mov	r3, r0
 8004c64:	461a      	mov	r2, r3
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	73fb      	strb	r3, [r7, #15]

	*temp = temp_convert(aux_temp);
 8004c6c:	7bbb      	ldrb	r3, [r7, #14]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f829 	bl	8004cc6 <temp_convert>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	701a      	strb	r2, [r3, #0]
	return ret;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <gyro_convert>:

static uint8_t gyro_convert(uint8_t axis){
 8004c86:	b480      	push	{r7}
 8004c88:	b085      	sub	sp, #20
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	71fb      	strb	r3, [r7, #7]

	uint8_t value = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	73fb      	strb	r3, [r7, #15]

	value = axis;
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	73fb      	strb	r3, [r7, #15]
	return value;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <accl_convert>:

static uint8_t accl_convert(uint8_t axis){
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	4603      	mov	r3, r0
 8004cae:	71fb      	strb	r3, [r7, #7]

	uint8_t value = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73fb      	strb	r3, [r7, #15]

	value = axis;
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	73fb      	strb	r3, [r7, #15]
	return value;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <temp_convert>:

static uint8_t temp_convert(uint8_t temp){
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	4603      	mov	r3, r0
 8004cce:	71fb      	strb	r3, [r7, #7]

	uint8_t value = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73fb      	strb	r3, [r7, #15]

	value = temp;
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	73fb      	strb	r3, [r7, #15]
	return value;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <DEV_I2CInit>:
#define I2C_OWNADDRESS1 0
#define I2C_TIMEOUT 0xFFFF

I2C_HandleTypeDef  hi2c;

retType DEV_I2CInit(void){
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0

	retType ret = API_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	71fb      	strb	r3, [r7, #7]
	hi2c.Instance = I2C1;
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <DEV_I2CInit+0x58>)
 8004cf4:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <DEV_I2CInit+0x5c>)
 8004cf6:	601a      	str	r2, [r3, #0]
	hi2c.Init.ClockSpeed = I2C_CLOCKSPEED;
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <DEV_I2CInit+0x58>)
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <DEV_I2CInit+0x60>)
 8004cfc:	605a      	str	r2, [r3, #4]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <DEV_I2CInit+0x58>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	609a      	str	r2, [r3, #8]
	hi2c.Init.OwnAddress1 = I2C_OWNADDRESS1;
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <DEV_I2CInit+0x58>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	60da      	str	r2, [r3, #12]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <DEV_I2CInit+0x58>)
 8004d0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d10:	611a      	str	r2, [r3, #16]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <DEV_I2CInit+0x58>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	615a      	str	r2, [r3, #20]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <DEV_I2CInit+0x58>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61da      	str	r2, [r3, #28]
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d1e:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <DEV_I2CInit+0x58>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	621a      	str	r2, [r3, #32]


	ret |= HAL_I2C_Init(&hi2c);
 8004d24:	4806      	ldr	r0, [pc, #24]	; (8004d40 <DEV_I2CInit+0x58>)
 8004d26:	f7fc f8ef 	bl	8000f08 <HAL_I2C_Init>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
	return ret;
 8004d34:	79fb      	ldrb	r3, [r7, #7]

}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	2000007c 	.word	0x2000007c
 8004d44:	40005400 	.word	0x40005400
 8004d48:	00061a80 	.word	0x00061a80

08004d4c <DEV_I2CWrite>:
	ret |= HAL_I2C_DeInit(&hi2c);
	return ret;

}

retType DEV_I2CWrite(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	4603      	mov	r3, r0
 8004d54:	6039      	str	r1, [r7, #0]
 8004d56:	80fb      	strh	r3, [r7, #6]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]

	ret |= HAL_I2C_Master_Transmit(&hi2c, slave_addr, pdata, size, I2C_TIMEOUT);
 8004d60:	88bb      	ldrh	r3, [r7, #4]
 8004d62:	88f9      	ldrh	r1, [r7, #6]
 8004d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d68:	9200      	str	r2, [sp, #0]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	4806      	ldr	r0, [pc, #24]	; (8004d88 <DEV_I2CWrite+0x3c>)
 8004d6e:	f7fc fa0f 	bl	8001190 <HAL_I2C_Master_Transmit>
 8004d72:	4603      	mov	r3, r0
 8004d74:	461a      	mov	r2, r3
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	73fb      	strb	r3, [r7, #15]
	return ret;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]


}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	2000007c 	.word	0x2000007c

08004d8c <DEV_I2CRead>:

retType DEV_I2CRead(uint16_t slave_addr, uint8_t * pdata, uint16_t size){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	4603      	mov	r3, r0
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	80fb      	strh	r3, [r7, #6]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	80bb      	strh	r3, [r7, #4]

	retType ret = API_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	73fb      	strb	r3, [r7, #15]

	ret |= HAL_I2C_Master_Receive(&hi2c, slave_addr, pdata, size, I2C_TIMEOUT);
 8004da0:	88bb      	ldrh	r3, [r7, #4]
 8004da2:	88f9      	ldrh	r1, [r7, #6]
 8004da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da8:	9200      	str	r2, [sp, #0]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	4806      	ldr	r0, [pc, #24]	; (8004dc8 <DEV_I2CRead+0x3c>)
 8004dae:	f7fc faed 	bl	800138c <HAL_I2C_Master_Receive>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	73fb      	strb	r3, [r7, #15]
	return ret;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]

}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	2000007c 	.word	0x2000007c

08004dcc <__libc_init_array>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	4d0d      	ldr	r5, [pc, #52]	; (8004e04 <__libc_init_array+0x38>)
 8004dd0:	4c0d      	ldr	r4, [pc, #52]	; (8004e08 <__libc_init_array+0x3c>)
 8004dd2:	1b64      	subs	r4, r4, r5
 8004dd4:	10a4      	asrs	r4, r4, #2
 8004dd6:	2600      	movs	r6, #0
 8004dd8:	42a6      	cmp	r6, r4
 8004dda:	d109      	bne.n	8004df0 <__libc_init_array+0x24>
 8004ddc:	4d0b      	ldr	r5, [pc, #44]	; (8004e0c <__libc_init_array+0x40>)
 8004dde:	4c0c      	ldr	r4, [pc, #48]	; (8004e10 <__libc_init_array+0x44>)
 8004de0:	f000 f818 	bl	8004e14 <_init>
 8004de4:	1b64      	subs	r4, r4, r5
 8004de6:	10a4      	asrs	r4, r4, #2
 8004de8:	2600      	movs	r6, #0
 8004dea:	42a6      	cmp	r6, r4
 8004dec:	d105      	bne.n	8004dfa <__libc_init_array+0x2e>
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df4:	4798      	blx	r3
 8004df6:	3601      	adds	r6, #1
 8004df8:	e7ee      	b.n	8004dd8 <__libc_init_array+0xc>
 8004dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfe:	4798      	blx	r3
 8004e00:	3601      	adds	r6, #1
 8004e02:	e7f2      	b.n	8004dea <__libc_init_array+0x1e>
 8004e04:	08004e70 	.word	0x08004e70
 8004e08:	08004e70 	.word	0x08004e70
 8004e0c:	08004e70 	.word	0x08004e70
 8004e10:	08004e74 	.word	0x08004e74

08004e14 <_init>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr

08004e20 <_fini>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr
